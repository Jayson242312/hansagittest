name: Test Deployment

on:
  pull_request:
    branches:
      - "main"

env:
  SSH_PORT: 22
  SERVER_IP: 172.21.56.243
  SERVER_USER: f
  APP_DIR: u1/StandardERPServer/
  APP_CMD: ./StandardERPServer64 --port 1201 --webport 1301 --stop journaling
  MAX_RETRIES: 5
  RETRY_DELAY: 10

jobs:
  test-deploy:
    runs-on: self-hosted
    timeout-minutes: 20

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
      
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.T }}

      - name: Validate server connection
        run: ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "echo 'Successfully connected to server'"

      - name: Pull test branch changes to production
        run: |
          ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            set -e
            cd $APP_DIR
            git fetch origin test
            git checkout -B test
          "

      - name: Stop existing server if running
        run: |
          ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            set -ex
            # Attempt to find the PID; if not found, do not fail the command
            PID=\$(pgrep -f '.\StandardERPServer64.*--port 1201' || true)
            if [ -n \"\$PID\" ]; then
              echo \"Found PID: \$PID\"
              kill \$PID || true
              sleep 5
              if ps -p \$PID > /dev/null; then
                echo 'Force killing process...'
                kill -9 \$PID
              fi
            else
              echo 'No running process found'
            fi
          "
      - name: Remove old logs
        run: |
          ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "rm -f $APP_DIR/hansa.log $APP_DIR/hal.log $APP_DIR/test.log"

      - name: Start server with test branch
        run: |
          ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            set -e
            cd $APP_DIR
            nohup $APP_CMD > test.log 2>&1 &
            echo 'Server start command executed - waiting for initialization...'
          "

      - name: Wait and display current logs
        run: |
          sleep 30
          echo "Latest test.log output:"
          ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "tail -n 20 $APP_DIR/test.log"

      - name: Verify server status
        run: |
          # Retrieve PID with an exact match for APP_CMD
          PID=$(ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            pgrep -f '$(printf "%q" "$APP_CMD")'
          " | tr -d '\n')
        
          echo "Raw PID detected: '$PID'"
        
          # Verify the process is running with the expected command line
          ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            if [ -z \"$PID\" ]; then 
              echo 'No PID found'; exit 1; 
            elif ! ps -p \"$PID\" >/dev/null; then 
              echo 'PID $PID not running'; exit 1;
            elif ! grep -qF \"\$APP_CMD\" /proc/$PID/cmdline 2>/dev/null; then
              echo 'PID $PID command mismatch'; exit 1;
            fi
          "
        
          echo "Process is running."
        
          # Check for 'close database' error in test.log
          ERROR_FOUND=$(ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            if grep -qi 'close database' $APP_DIR/test.log; then
              echo 'error'
            fi
          " | tr -d '\n')
        
          # Check if hal.log exists (indicates a validation error)
          HAL_EXISTS=$(ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            if [ -f $APP_DIR/hal.log ]; then
              echo 'exists'
            fi
          " | tr -d '\n')
        
          if [ \"$ERROR_FOUND\" = \"error\" ] || [ \"$HAL_EXISTS\" = \"exists\" ]; then
            echo "::error::Server validation failed."
            echo "Error details from logs:"
            # Prefer hal.log if it exists; otherwise, show test.log
            ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "cat $APP_DIR/hal.log || cat $APP_DIR/test.log"
            exit 1
          else
            echo "No critical errors found in logs."
            echo "Server verified as running."
          fi

      - name: Revert to main branch
        if: always()
        run: |
          ssh -p $SSH_PORT $SERVER_USER@$SERVER_IP "
            set -e
            cd $APP_DIR
            git checkout main
            git pull origin main
            PID=\$(pgrep -f '.\StandardERPServer64.*--port 1201' | head -1)
            if [ -n \"\$PID\" ]; then
              kill \$PID
              sleep 5
              if ps -p \$PID > /dev/null; then
                kill -9 \$PID
              fi
            fi
            nohup $APP_CMD > hal.log 2>&1 &
            echo 'Server restarted with main branch'
          "
