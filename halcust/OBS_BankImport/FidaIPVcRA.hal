external inner procedure ExtractObj(string,var Integer,var string);remote updating procedure CreateFidaIPRowID(var record FidaIPVc);globalprocedure FidaIPSumUp(var record FidaIPVc FidaIPr)begin  record IPVc IPr;  row FidaIPVc FidaIPrw;  integer i,rwc,cnt;  val t;    FidaIPr.RowCnt=MatRowCnt(FidaIPr);  if FidaIPr.RowCnt==0 then begin    FidaIPr.RowCnt=-1;  end;  FidaIPr.RowCntTR=0;    rwc=MatRowCnt(FidaIPr);  for (i=0;i<rwc;i=i+1) begin    MatRowGet(FidaIPr,i,FidaIPrw);    if FidaIPrw.DCType==2 then begin      FidaIPr.RowCntTR = FidaIPr.RowCntTR + 1;    end;        t = t + FidaIPrw.Amount;    if FidaIPrw.IPNr>0 then begin      if FidaIPrw.DCType==2 then begin        FidaIPrw.TransMark=Uchr(10004);        cnt=cnt+1;      end;      if FidaIPrw.DCType==0 then begin        IPr.SerNr=FidaIPrw.IPNr;        if ReadFirstMain(IPr,1,true) then begin          if IPr.OKFlag==1 then begin            FidaIPrw.TransMark=Uchr(10004);            cnt=cnt+1;          end else begin            FidaIPrw.TransMark=Uchr(10060);          end;        end;      end;    end else begin      FidaIPrw.TransMark="";    end;    MatRowPut(FidaIPr,i,FidaIPrw);  end;      // FidaIPr.UnOKCnt=-1;  // if cnt>0 then begin    FidaIPr.UnOKCnt=FidaIPr.RowCnt-cnt;    if FidaIPr.UnOKCnt<=0 then begin      FidaIPr.UnOKCnt=-1;    end;    FidaIPr.RowCnt = FidaIPr.RowCnt - FidaIPr.RowCntTR;  // end;  if FidaIPr.RowCntTR==0 then begin    FidaIPr.RowCntTR=-1;  end;  FidaIPr.Sum=t;    return;end;global updatingfunction longint FidaIPVcRecordCheck(var record FidaIPVc FidaIPr,record FidaIPVc FidaIP2r,LongInt stat,LongInt long4) begin  longInt res;  row FidaIPVc Fidarw;  record NAContractVc NAContractr;  record ARVc ARr;  record APVc APr;  record CUVc CUr;  record AccVc Accr;  record IVVc IVr;  integer i,rwc,pos;  string 20 invoicenr;  val t,amt;  boolean okflag;    res=0;  if blankdate(FidaIPr.TransDate) then begin    FidaIPr.TransDate=CurrentDate;  end;  if FidaIPr.SerNr<=0 then begin    if CountRecords("FidaIPVc")==0 then begin      FidaIPr.SerNr=10001;    end else begin      FidaIPr.SerNr=NextSerNr("FidaIPVc",FidaIPr.TransDate,-1,false,"");    end;  end;    okflag = false;  if FidaIP2r.OKFlag==0 and FidaIPr.OKFlag==1 then begin    okflag = true;  end;    if okflag then begin    if blank(FidaIPr.PayMode) then begin      res=-1;      RecordCheckError(1207,"",-1,"PayMode");      GoTo EndFidaIPVcRecordCheck;    end;  end;    if FidaIPr.OKFlag==0 and FidaIP2r.OKFlag==1 then begin    if !UserCanAction("OBSAllowUnOKFidaPayment",false) then begin      RecordCheckError(1001631,"",-1,"SerNr");      res = -1;      goto EndFidaIPVcRecordCheck;    end;  end;      rwc=MatRowCnt(FidaIPr);  if rwc<=0 then begin    res=-1;    RecordCheckError(1100005,"",-1,"SerNr");    GoTo EndFidaIPVcRecordCheck;  end;  for(i=0;i<rwc;i=i+1)begin    MatRowGet(FidaIPr,i,Fidarw);    if Fidarw.Type!=1 and okflag then begin      res=-1;      RecordCheckError(1100004,"",i,"Type");      GoTo EndFidaIPVcRecordCheck;    end;    if FidaIPr.OKFlag==1 and Fidarw.DCType!=2 then begin      CUr.Code = Fidarw.CustCode;      if !ReadFirstMain(CUr,1,true) then begin        res=-1;        RecordCheckError(1100002,"",i,"CustCode");        GoTo EndFidaIPVcRecordCheck;      end;      if Fidarw.PayType==1 and nonblank(Fidarw.InvoiceList) then begin        res=-1;        RecordCheckError(1100003,"",i,"InvoiceList");        GoTo EndFidaIPVcRecordCheck;      end;    end;    if Fidarw.Type==1 then begin      // if blank(Fidarw.RegNr) and Fidarw.DCType!=2 then begin      //   res=-1;      //   RecordCheckError(1058,"",i,"RegNr");      //   GoTo EndFidaIPVcRecordCheck;      // end;      if Fidarw.DCType==2 then begin //Grāmatojumu pārbaudes        if blank(Fidarw.AccNumber) then begin          res=-1;          RecordCheckError(1058,"",i,"AccNumber");          GoTo EndFidaIPVcRecordCheck;        end;        Accr.AccNumber = Fidarw.AccNumber;        if !ReadFirstMain(Accr,1,true) then begin          res=-1;          RecordCheckError(1100022,"",i,"AccNumber");          GoTo EndFidaIPVcRecordCheck;        end;      end;      if Fidarw.DCType==1 then begin //izejošo maksājumu pārbaudes        if Fidarw.PayType==0 and blank(Fidarw.InvoiceList) and Fidarw.IPNr==-1 then begin          res=-1;          RecordCheckError(1100021,"",i,"InvoiceList");          GoTo EndFidaIPVcRecordCheck;        end;                if Fidarw.IPNr==-1 and nonblank(Fidarw.InvoiceList) then begin          pos = 0;          amt = 0;          ExtractObj(Fidarw.InvoiceList,pos,invoicenr);          while nonblank(invoicenr) begin            APr.SerNr=StringToLongInt(invoicenr);            if !ReadFirstMain(APr,1,true) then begin              res=-1;              RecordCheckError(1100007,"",i,"InvoiceList");              GoTo EndFidaIPVcRecordCheck;            end;            if Fidarw.CustCode!=APr.VECode and nonblank(Fidarw.CustCode) then begin              res=-1;              RecordCheckError(1100019,"",i,"InvoiceList");              GoTo EndFidaIPVcRecordCheck;            end;            amt = amt + APr.RVal;            ExtractObj(Fidarw.InvoiceList,pos,invoicenr);          end;          if amt<Fidarw.Amount then begin            res=-1;            RecordCheckError(1100020,"",i,"InvoiceList");            GoTo EndFidaIPVcRecordCheck;          end;        end;      end;      if Fidarw.DCType==0 then begin //Ienākošo maksājumu pārbaudes        if Fidarw.ContractNr!=-1 and nonblank(Fidarw.CustCode) and Fidarw.Type==1 then begin          NAContractr.SerNr = Fidarw.ContractNr;          if !ReadFirstMain(NAContractr,1,true) then begin            res=-1;            RecordCheckError(1100028,"",i,"ContractNr");            GoTo EndFidaIPVcRecordCheck;          end;          if NAContractr.CustCode!=Fidarw.CustCode then begin            // res=-1;            // RecordCheckError(1100029,"",i,"ContractNr");            // GoTo EndFidaIPVcRecordCheck;            MessageBox(1100029,"");          end;        end;        if nonblank(Fidarw.InvoiceList) and Fidarw.IPNr==-1 and okflag then begin //parbauda vai visi rēķini ir norādītajam klientam un līgumam          pos = 0;          ExtractObj(Fidarw.InvoiceList,pos,invoicenr);          while nonblank(invoicenr) begin            IVr.SerNr=StringToLongInt(invoicenr);            if !ReadFirstMain(IVr,1,true) then begin              res=-1;              RecordCheckError(1100007," " & invoicenr,i,"InvoiceList");              GoTo EndFidaIPVcRecordCheck;            end;            if Fidarw.CustCode!=IVr.CustCode and nonblank(Fidarw.CustCode) then begin              res=-1;              RecordCheckError(1100008," " & invoicenr,i,"InvoiceList");              GoTo EndFidaIPVcRecordCheck;            end;                        if Fidarw.ContractNr!=-1 then begin              if Fidarw.ContractNr!=IVr.Contract then begin                res=-1;                RecordCheckError(1100027," " & invoicenr,i,"InvoiceList");                GoTo EndFidaIPVcRecordCheck;              end;            end;            ExtractObj(Fidarw.InvoiceList,pos,invoicenr);          end;        end;      end;      if Fidarw.Amount==blankval or Fidarw.Amount==0 then begin        res=-1;        RecordCheckError(1100006,"",i,"Amount");        GoTo EndFidaIPVcRecordCheck;      end;    end;  end;    FidaIPSumUp(FidaIPr);  EndFidaIPVcRecordCheck:;  FidaIPVcRecordCheck=res;end;global updating function LongInt FidaIPVcRecordSave(var record FidaIPVc FidaIPr,record FidaIPVc FidaIP2r,LongInt stat,LongInt long4)begin  LongInt res;  res = 0;  CreateFidaIPRowID(FidaIPr);  FidaIPSumUp(FidaIPr);  FidaIPVcRecordSave = res;  return;end;global updating function LongInt FidaIPVcRecordUpdate(var record FidaIPVc FidaIPr,record FidaIPVc FidaIP2r,LongInt stat,LongInt long4)begin  LongInt res;    res = 0;  CreateFidaIPRowID(FidaIPr);    FidaIPVcRecordUpdate = res;  return;end;  