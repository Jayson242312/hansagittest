external inner function LongInt INVcRecordRemoveTest(var record INVc,record INVc,LongInt,LongInt);
external inner procedure CheckFlush(var Integer,Integer);

global
updating procedure DelNotUsedINMn(record RcVc RepSpec)
BEGIN
  record INVc INr;
  record INVc fakeINr;
  record ItemHistVc IHr;
  record TBIVVc TBIVr;
  string 255 frin,toin;
  Boolean TrHs,testf;
  Integer flushcnt;

  frin = FirstInRange(RepSpec.f1,20);
  toin = LastInRange(RepSpec.f1,20);
  INr.Code = frin;
  TrHs = true;
  while (LoopMain(INr,1,TrHs)) begin
    //if ((nonblank(RepSpec.f1)) and (INr.Code>toin)) then begin TrHs = false; end;
    if (TrHs) then begin
        testf = true;
        //if ((nonblank(RepSpec.f2)) and (INr.Group!=RepSpec.f2)) then begin testf = false; end;
        //IHr.ArtCode = INr.Code;
        //if (ReadFirstKey("ArtCode",IHr,1,true)) then begin
        //  testf = false;
        //end;
        //TBIVr.ArtCode = INr.Code;
        //if (ReadFirstKey("ArtCode",TBIVr,1,true)) then begin
        //  testf = false;
        //end;
        if (testf) then begin
          if (INVcRecordRemoveTest(INr,fakeINr,0,0)!=0) then begin
            RecordDelete(INr);
            StepBack(INr);
            CheckFlush(flushcnt,10);
          end;
        end;
    end;
    UserTrace(INr.Code,M4Code);
  end;
  RETURN;
END;

//  FORMAT IS AS FOLLOWS:

//Item Code, Item Description, Item Group, Base Price, Cost Price, Unit, Unit 2, not for sales check box, BarCode, EKNCode, Recipe Code

global
updating procedure ItemIn()
BEGIN
  string 255 InLine;
  record INVc oldINr;
  record INVc INr;
  record RcVc RepSpec;
  string 255 tstr,t2;
  Boolean testf,opt;

  // optional delete first
//  RecordNew(RepSpec);
//  DelNotUsedINMn(RepSpec);

 // SetDOSFlag(true);
  while (TestEOF()==false) begin
    InLine = ImportField();
    if(nonblank(InLine)) then begin
      opt = true; // load
      INr.Code = InLine;
      if (ReadFirstMain(INr,1,true)) then begin
        opt = false;  // amend
        goto LSKIP;

        RecordCopy(oldINr,INr);
      end
      else begin
        RecordNew(INr);
        INr.Code = InLine;
      end;

      InLine = ImportField();              //item description
      INr.Name = InLine;
      InLine = ImportField();              //item group
      INr.Group = InLine;
      //InLine = ImportField();              //supplier item (alternaltive code)
      //INr.AlternativeCode = InLine;
      InLine = ImportField();              //base (sell) price
      INr.UPrice1 = StringToVal(InLine,M4Val);
      InLine = ImportField();              //cost price
      INr.InPrice = StringToVal(InLine,M4Val);
      InLine = ImportField();              //inner unit (unit of measure)
      INr.Unittext = InLine;
      //InLine = ImportField();
      //INr.LocArea = InLine;
      //InLine = ImportField();
      //INr.PickArea = InLine;
      //InLine = ImportField();
      //INr.Weight = StringToVal(InLine,M4Val);
      //InLine = ImportField();
      //INr.Department = InLine;
      InLine = ImportField();              //item type
      INr.ItemType = StringToInt(InLine);
      InLine = ImportField();              //update cost price on goods receipt
      INr.UpdateCost = StringToInt(InLine);
      InLine = ImportField();              //serial number tracking
      INr.SerNrf = StringToInt(InLine);
     // InLine = ImportField();              //objects
     // INr.Objects = InLine;
    //  InLine = ImportField();              //classifications
     // INr.DispGroups = InLine;
      //InLine = ImportField();
      //INr.BarCode = InLine;
      //InLine = ImportField();
      //INr.SalesAcc = InLine;
      //InLine = ImportField();            //min level 2
      //INr.RepaPricePerWeight = StringToVal(InLine,M4Val);
      
      
      //InLine = ImportField();              //last cost (last purchase price)
      //INr.LastPurchPrice = StringToVal(InLine,M4Val);
     // InLine = ImportField();              //Warning text
      //INr.WarnText1 = InLine;
     
     // InLine = ImportField();              //shelf code
    //  INr.InvCode = InLine;
     // InLine = ImportField();              //min level
     // INr.MinLevel = StringToVal(InLine,M4Val);
     // InLine = ImportField();              //unit 2
     // INr.Unittext2 = InLine;
      //InLine = ImportField();              //unit coeff
      //INr.UnitCoefficient = StringToVal(InLine,M4Val);
      //InLine = ImportField();              //not for sales check box
      //INr.NotForSales = StringToInt(InLine);
     // InLine = ImportField();              // BarCode
     // INr.BarCode = InLine;
     // InLine = ImportField();              // EKNCode
      //INr.EKNCode = InLine;
     // InLine = ImportField();              // EKNCode
     // INr.Recepy = InLine;                 // Recepy Code  //RecordField(Recepy,M4Code,20,RecVc);
     // InLine = UpperCase(ImportField);     // Variety Mask
      //INr.VARMask = InLine;

      if (opt==true) then begin    // load
        if (RecordStore(INr,true)) then begin
        end;
      end
      else begin                   // amend
        if (RecordUpdate(oldINr,INr,true)==0) then begin
        end;
      end;

    end;
    UserTrace(INr.Code,M4Str);

    LSKIP:;

    testf = NextImportLine(true);
  end;
//  SetDOSFlag(false);
  RETURN;
END;
