// Sales Orders, Recipes, Goods Receipt, Purchase Orders
//
// VER: 6.2 100727
// UST: 21/06/2010
external inner function Boolean PasteCustInOrder(var record ORVc,string,string,var string,var string);
external inner procedure ORVc_PasteOrdDate(var record ORVc);
external inner procedure ORVc_PastePayDeal(var record ORVc);
external inner procedure ORVc_PasteSalesMan(var record ORVc,string);
external inner procedure ORVc_PasteCurncyCode(var record ORVc,string);
external inner procedure ORVc_PasteLocation(var record ORVc,Integer);
external inner procedure ORVc_PastePriceList(var record ORVc);
external inner function Boolean ORVc_PasteArtCode(var record ORVc,Integer,var string,var string,Boolean);
external inner procedure ORVc_PasteQuant(var record ORVc,Integer,Boolean,var Boolean);
external inner procedure ORDchsum(var record ORVc,Integer);
external inner procedure ORSumup(var record ORVc);
external inner procedure ORVc_PastePrice(var record ORVc,Integer,var Boolean);
external inner procedure ORVc_PastevRebate(var record ORVc,Integer,var Boolean);
external inner procedure ORVc_PasteSum(var record ORVc,Integer,var Boolean);
external inner procedure SetORFlags(record ORVc);
external inner procedure RecSumup(record RecVc);
external inner procedure RecVc_PasteItem(var record RecVc,Integer);
external inner function Boolean PUVc_PasteArtCode(var record PUVc,Integer,var string,var string);
external inner function Integer PUVc_PasteQuant(var record PUVc,Integer);
external inner function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external inner procedure GetItemVATCode(string,Integer,var string,Boolean);
external inner procedure MulVATIV(string,val,var val,var val,Integer,Integer);
external inner procedure PUCalcPerc(val,string,var val);
external inner procedure PUSumUp(var record PUVc);
external inner procedure PUVc_PasteLocation(var record PUVc,Integer);
external inner procedure PUSetShipCost(var record PUVc,Integer);
external inner procedure PURecalcCost(var record PUVc);
external inner function Boolean POVc_PasteVECode(var record POVc,Boolean);
external inner procedure GetSalesGroup(string,var string);
external inner procedure POGetRate(var record POVc);
external inner procedure POVc_PasteCurncyCode(var record POVc,string,Boolean);
external inner function Boolean POVc_PasteLocation(var record POVc);
external inner function Boolean POVc_PasteArtCode(var record POVc,Integer,Boolean);
external inner procedure POVc_PasteQuant(var record POVc,Integer);
external inner procedure POVc_PastePrice(var record POVc,Integer);
external inner procedure POVc_PastevRebate(var record POVc,Integer);
external inner procedure POVc_PasteSum(var record POVc,Integer);
external inner procedure POVc_PasteVATCode(var record POVc,Integer);
external inner procedure POSumup(var record POVc );

external function Boolean ImportItemCode(var string);
external function Boolean ImportPriceValue(var val, Integer);

remote inner procedure PUVc_PasteCostPrice(var record PUVc,Integer);
external inner procedure PUCalcCostPrice(string,val,Integer,Integer,string,string,
                                   val,val,val,val,val,
                                   val,val,val,val,val,val,
                                   string,var val,val,var val,string,Integer);


global
function Boolean TestField(string ExpectedStr,var Integer ColNr)
begin
  Boolean res;
  string 255 ActualStr,tstr;

  res = true;
  ActualStr = ImportField;
  ColNr = ColNr + 1;
  if (ExpectedStr!=Left(ActualStr,Len(ExpectedStr))) then begin
    tstr = "File not in correct format. Import cancelled.";
    tstr = tstr & chr(10) & "First row must contain header values.";
    tstr = tstr & chr(10) & "Column: " & ColNr & "; Expected: " & ExpectedStr & "; Actual: " & ActualStr;
    MessageBox(0,tstr);
    res = false;
  end;

  TestField = res;
  return;
end;

function Boolean ValidateOrderHeader()   //sales order
begin
  Boolean res;
  Integer ColNr;
  //JRX - Done  100715 14:40
  if (!TestField("No",ColNr)) then begin goto LExit; end;
  if (!TestField("Customer",ColNr)) then begin goto LExit; end;
  if (!TestField("Name",ColNr)) then begin goto LExit; end;
  if (!TestField("Date",ColNr)) then begin goto LExit; end;
  if (!TestField("Pay Terms",ColNr)) then begin goto LExit; end;
  if (!TestField("Our Ref",ColNr)) then begin goto LExit; end;
  if (!TestField("Planned Delivery Date",ColNr)) then begin goto LExit; end;
  if (!TestField("Sales Men",ColNr)) then begin goto LExit; end;
  if (!TestField("Customer Order no",ColNr)) then begin goto LExit; end;
  if (!TestField("Order Class",ColNr)) then begin goto LExit; end;
  if (!TestField("Currency",ColNr)) then begin goto LExit; end;
  if (!TestField("Del. Mode",ColNr)) then begin goto LExit; end;
  if (!TestField("Del. Terms",ColNr)) then begin goto LExit; end;
  if (!TestField("Comments (60 character)",ColNr)) then begin goto LExit; end;
  if (!TestField("Location",ColNr)) then begin goto LExit; end;
  if (!TestField("Project (No)",ColNr)) then begin goto LExit; end;
  if (!TestField("Price List",ColNr)) then begin goto LExit; end;
  if (!TestField("Language",ColNr)) then begin goto LExit; end;
  if (!TestField("Discount Matrix",ColNr)) then begin goto LExit; end;
  if (!TestField("Tot. Quantity",ColNr)) then begin goto LExit; end;
  if (!TestField("Tot. Weight",ColNr)) then begin goto LExit; end;
  if (!TestField("Invoice Address1",ColNr)) then begin goto LExit; end;   //JRX - 100715 mod and added
  if (!TestField("Invoice Address2",ColNr)) then begin goto LExit; end;   //JRX - 100715 mod and added
  if (!TestField("Invoice Address3",ColNr)) then begin goto LExit; end;   //JRX - 100715 mod and added
  if (!TestField("Invoice Address4",ColNr)) then begin goto LExit; end;   //JRX - 100715 mod and added
  if (!TestField("Invoice Address5",ColNr)) then begin goto LExit; end;   //JRX - 100715 mod and added
  if (!TestField("Tot. Volume",ColNr)) then begin goto LExit; end;
  if (!TestField("Sorting",ColNr)) then begin goto LExit; end;
  if (!TestField("Vat Zone",ColNr)) then begin goto LExit; end;
  if (!TestField("Approval Status",ColNr)) then begin goto LExit; end;
  if (!TestField("Delivery Address1",ColNr)) then begin goto LExit; end;
  if (!TestField("Delivery Address2",ColNr)) then begin goto LExit; end;
  if (!TestField("Delivery Address3",ColNr)) then begin goto LExit; end;
  if (!TestField("Delivery Address4",ColNr)) then begin goto LExit; end;

  res = true;

  LExit:;

  NextImportLine(true);
  ValidateOrderHeader = res;
  return;
end;

function Boolean ValidateOrderRows()   // Sales Orders
begin
  Boolean res;
  Integer ColNr;
  //JRX - Done  100715 14:38
  if (!TestField("Sales Order No",ColNr)) then begin goto LExit; end;
  if (!TestField("Item Code",ColNr)) then begin goto LExit; end;
  if (!TestField("Quantity Ord.",ColNr)) then begin goto LExit; end;
  if (!TestField("Desc",ColNr)) then begin goto LExit; end;
  if (!TestField("Unit Price",ColNr)) then begin goto LExit; end;
  if (!TestField("% Discount",ColNr)) then begin goto LExit; end;
  if (!TestField("Sum",ColNr)) then begin goto LExit; end;
  if (!TestField("V-Cod",ColNr)) then begin goto LExit; end;
  if (!TestField("Cost",ColNr)) then begin goto LExit; end;
  if (!TestField("Gross Profit",ColNr)) then begin goto LExit; end;
  if (!TestField("Budget Cost",ColNr)) then begin goto LExit; end;
  if (!TestField("Del. 1",ColNr)) then begin goto LExit; end;
  if (!TestField("Del. 2",ColNr)) then begin goto LExit; end;
  if (!TestField("Invoiced",ColNr)) then begin goto LExit; end;
  if (!TestField("Recipe",ColNr)) then begin goto LExit; end;
  if (!TestField("Unit",ColNr)) then begin goto LExit; end;
  if (!TestField("Width",ColNr)) then begin goto LExit; end;
  if (!TestField("Depth",ColNr)) then begin goto LExit; end;
  if (!TestField("Height",ColNr)) then begin goto LExit; end;
  if (!TestField("Vat",ColNr)) then begin goto LExit; end;
  if (!TestField("Total",ColNr)) then begin goto LExit; end;

  res = true;

  LExit:;

  NextImportLine(true);
  ValidateOrderRows = res;
  return;
end;

function Boolean ValidateRecipe()
begin
  Boolean res;
  Integer ColNr;

  if (!TestField("Parent Item Code",ColNr)) then begin goto LExit2; end;
  if (!TestField("Children Item Code",ColNr)) then begin goto LExit2; end;
  if (!TestField("Specification",ColNr)) then begin goto LExit2; end;
  if (!TestField("In",ColNr)) then begin goto LExit2; end;
  if (!TestField("Out",ColNr)) then begin goto LExit2; end;
  if (!TestField("Hrs to produce",ColNr)) then begin goto LExit2; end;

  res = true;

  LExit2:;
  
  NextImportLine(true);
  ValidateRecipe = res;
  return;
end;

function Boolean ValidateGoodsReceipt()
begin
  Boolean res;
  Integer ColNr;

  if (!TestField("Location",ColNr)) then begin goto LExit2; end;
  if (!TestField("Item Code",ColNr)) then begin goto LExit2; end;
  if (!TestField("Description",ColNr)) then begin goto LExit2; end;
  if (!TestField("Qty",ColNr)) then begin goto LExit2; end;
  if (!TestField("Cost",ColNr)) then begin goto LExit2; end;
  if (!TestField("location Area",ColNr)) then begin goto LExit2; end;
  if (!TestField("Position",ColNr)) then begin goto LExit2; end;
  if (!TestField("Serial/Batch#",ColNr)) then begin goto LExit2; end;

  res = true;

  LExit2:;
  NextImportLine(true);
  ValidateGoodsReceipt = res;
  return;
end;

function Boolean ValidatePurchOrdHeader()
begin
  Boolean res;
  Integer ColNr;

  //JRX - Done  100715 14:06
  if (!TestField("No",ColNr)) then begin goto LExit2; end;
  if (!TestField("Supplier no",ColNr)) then begin goto LExit2; end;
  if (!TestField("Supplier Name",ColNr)) then begin goto LExit2; end;
  if (!TestField("Signers",ColNr)) then begin goto LExit2; end;
  if (!TestField("Trans date",ColNr)) then begin goto LExit2; end;
  if (!TestField("Suppl. Payment Terms",ColNr)) then begin goto LExit2; end;
  if (!TestField("Qur Ref",ColNr)) then begin goto LExit2; end;
  if (!TestField("Plan delivery Date",ColNr)) then begin goto LExit2; end;
  if (!TestField("P/Order Classes",ColNr)) then begin goto LExit2; end;
  if (!TestField("Order Type",ColNr)) then begin goto LExit2; end;
  if (!TestField("Purchase Ref",ColNr)) then begin goto LExit2; end;
  if (!TestField("Attn.",ColNr)) then begin goto LExit2; end;
  if (!TestField("Objects",ColNr)) then begin goto LExit2; end;
  if (!TestField("Price Incl. VAT",ColNr)) then begin goto LExit2; end;
  if (!TestField("Currency",ColNr)) then begin goto LExit2; end;
  if (!TestField("Agreed Rate",ColNr)) then begin goto LExit2; end;
  if (!TestField("Del Terms",ColNr)) then begin goto LExit2; end;
  if (!TestField("Project No.",ColNr)) then begin goto LExit2; end;
  if (!TestField("Order No.",ColNr)) then begin goto LExit2; end;
  if (!TestField("Approval Status",ColNr)) then begin goto LExit2; end;
  if (!TestField("Branch",ColNr)) then begin goto LExit2; end;
  if (!TestField("Comments",ColNr)) then begin goto LExit2; end;
  if (!TestField("DelAddress1",ColNr)) then begin goto LExit2; end;
  if (!TestField("DelAddress2",ColNr)) then begin goto LExit2; end;
  if (!TestField("DelAddress3",ColNr)) then begin goto LExit2; end;
  if (!TestField("DelAddress4",ColNr)) then begin goto LExit2; end;
  if (!TestField("DelAddress5",ColNr)) then begin goto LExit2; end;
  if (!TestField("DelAddress6",ColNr)) then begin goto LExit2; end;
  if (!TestField("Location",ColNr)) then begin goto LExit2; end;

  res = true;

  LELExit2xit:;
  NextImportLine(true);
  ValidatePurchOrdHeader = res;
  return;
end;

function Boolean ValidatePurchOrdRows()
begin
  Boolean res;
  Integer ColNr;
  //JRX - Done  100715 14:08
  if (!TestField("Purchase Order No.",ColNr)) then begin goto LExit3; end;
  if (!TestField("Item Code",ColNr)) then begin goto LExit3; end;
  if (!TestField("Qty",ColNr)) then begin goto LExit3; end;
  if (!TestField("Unit",ColNr)) then begin goto LExit3; end;
  if (!TestField("Desc",ColNr)) then begin goto LExit3; end;
  if (!TestField("Supplier Unit Price",ColNr)) then begin goto LExit3; end;
  if (!TestField("Discount Percentage",ColNr)) then begin goto LExit3; end;
  if (!TestField("Sum",ColNr)) then begin goto LExit3; end;
  if (!TestField("Vat Code",ColNr)) then begin goto LExit3; end;
  if (!TestField("Purchase Account",ColNr)) then begin goto LExit3; end;
  if (!TestField("Objects",ColNr)) then begin goto LExit3; end;
  if (!TestField("Planned Del Item",ColNr)) then begin goto LExit3; end;
  if (!TestField("Comments (100 Character)",ColNr)) then begin goto LExit3; end;
  if (!TestField("Fr. Cost",ColNr)) then begin goto LExit3; end;
  if (!TestField("Recv.1",ColNr)) then begin goto LExit3; end;
  if (!TestField("Invoiced",ColNr)) then begin goto LExit3; end;

  res = true;

  LExit3:;
  NextImportLine(true);
  ValidatePurchOrdRows = res;
  return;
end;


function Boolean ValidateLoyaltyColumns()   // Loyalty Point Import Headers
begin
  Boolean res;
  Integer ColNr;


  if (!TestField("CUSTCODE",ColNr)) then begin goto LExit4; end;
  if (!TestField("CUSTNAME",ColNr)) then begin goto LExit4; end;
  if (!TestField("STARTDATE",ColNr)) then begin goto LExit4; end;
  if (!TestField("EXPIRYDATE",ColNr)) then begin goto LExit4; end;
  if (!TestField("LCMLEVEL",ColNr)) then begin goto LExit4; end;
  if (!TestField("ACCUMPOINTS",ColNr)) then begin goto LExit4; end;
  if (!TestField("POINTSTO",ColNr)) then begin goto LExit4; end;
  if (!TestField("CLOSED",ColNr)) then begin goto LExit4; end;
  if (!TestField("SERNR",ColNr)) then begin goto LExit4; end;

  res = true;

  LExit4:;
  NextImportLine(true);
  ValidateLoyaltyColumns = res;
  return;
end;


procedure GotoEndOfFile()
begin
  while (!TestEOF) begin
    NextImportLine(true);
  end;
  return;
end;

global
function Boolean ImportString(var string Field,Integer MaxLen)
begin
  Boolean res;
  string 255 tstr;

  tstr = ImportField;
  if (nonblank(tstr)) then begin
    Field = Left(tstr,MaxLen);
    res = true;
  end;

  ImportString = res;
  return;
end;

global
function Boolean ImportCode(var string Field,Integer MaxLen)
begin
  Boolean res;
  string 255 tstr;

  tstr = UpperCase(ImportField);
  if (nonblank(tstr)) then begin
    Field = Left(tstr,MaxLen);
    res = true;
  end;

  ImportCode = res;
  return;
end;

global
function Boolean ImportDate(var Date Field)
begin
  Boolean res;
  string 255 tstr;

  tstr = ImportField;
  if (nonblank(tstr)) then begin
    Field = StringToDate(tstr);
    res = true;
  end;

  ImportDate = res;
  return;
end;

global
function Boolean ImportVal(var val Field,Integer Format)
begin
  Boolean res;
  string 255 tstr;

  tstr = ImportField;
  if (nonblank(tstr)) then begin
    Field = StringToVal(tstr,Format);
    res = true;
  end;

  ImportVal = res;
  return;
end;

global
function Boolean ImportLongInt(var LongInt Field)
begin
  Boolean res;
  string 255 tstr;

  tstr = ImportField;
  if (nonblank(tstr)) then begin
    Field = StringToLongInt(tstr);
    res = true;
  end;

  ImportLongInt = res;
  return;
end;

global
function Boolean ImportInt(var Integer Field)
begin
  Boolean res;
  string 255 tstr;

  tstr = ImportField;
  if (nonblank(tstr)) then begin
    Field = StringToInt(tstr);
    res = true;
  end;

  ImportInt = res;
  return;
end;


global
updating procedure SalesOrderHeaderIn()  //Sales Orders
begin
  record ORVc ORr;
  string 255 tstr,OrignialSerNr;
  record UserVc Userr;
  record LocationVc Locationr;

//  while (LoopMain(ORr,1,true)) begin
//    RecordDelete(ORr);
//    StepBack(ORr);
//  end;

  if (!ValidateOrderHeader) then begin
    GotoEndOfFile;
    goto LSalesOrderHeaderIn;
  end;

  while (!TestEOF) begin
    RecordNew(ORr);
    ImportString(OrignialSerNr,20);
    if (ImportCode(ORr.CustCode,20)) then begin
      PasteCustInOrder(ORr,ORr.CustCode,"",tstr,tstr);
    end;
    ORr.Sorting = OrignialSerNr;
    ImportString(ORr.Addr0,60);
    if (ImportDate(ORr.OrdDate)) then begin
      ORVc_PasteOrdDate(ORr);
    end;
    if (ImportCode(ORr.PayDeal,2)) then begin
      ORVc_PastePayDeal(ORr);
    end;

    ImportField; // Our Ref
    ImportField; // Overiding plan ship date setting manually below
    //ImportString(ORr.PlanShip,10);
    ORr.PlanShip = datetostring(AddDay(ORr.OrdDate,30),"DD/MM/YYYY");  //adding 30 days to orddate
    ORr.DespatchDate = AddDay(ORr.OrdDate,30); //adding 30 days to orddate


    if (ImportString(tstr,60)) then begin
      Userr.Name = tstr;
      if (ReadFirstKey("Name",Userr,1,true)) then begin
        tstr = ORr.SalesMan;
        ORr.SalesMan = Userr.Code;
        ORVc_PasteSalesMan(ORr,tstr);
      end else begin
        LogText(0,"User not found: " & tstr);
      end;
    end;
    ImportString(ORr.CustOrdNr,60);
    ImportString(ORr.OrderClass,5);
    if (blank(ORr.OrderClass)) then begin
      ORr.OrderClass = "OPEN";
    end;

    tstr = ORr.CurncyCode;
    if (ImportCode(ORr.CurncyCode,5)) then begin
      ORVc_PasteCurncyCode(ORr,tstr);
    end;
    ImportString(ORr.ShipMode,5);
    ImportString(ORr.ShipDeal,5);
    ImportString(ORr.Comment,60);
    if (ImportString(ORr.Location,60)) then begin
   /*   Locationr.Name = tstr;
      if (ReadFirstKey("Name",Locationr,1,true)) then begin
        ORr.Location = Locationr.Code;
        ORVc_PasteLocation(ORr,-1);
      end else begin
        LogText(0,"Location not found: " & tstr & " -- Adding Anyway--" );
        ORr.Location = tstr;
      end; */
    end;
    //ImportField; // Project
    ImportString(ORr.OurContact,20);                        // Importing Project into Our Contact field
    ORr.OurContact = ORr.OurContact;

    if (ImportString(ORr.PriceList,5)) then begin
      ORVc_PastePriceList(ORr);
    end;
    ImportString(ORr.LangCode,5);
    ImportString(ORr.RebCode,5);
    ImportField; // Tot. Quantity
    ImportField; // Tot. Weight
    ImportField; // Invoice Address1
    ImportField; // Invoice Address2
    ImportField; // Invoice Address3
    ImportField; // Invoice Address4
    ImportField; // Invoice Address5
    ImportField; // Tot. Volume
    ImportField; // Sorting
    ImportField; // Vat Zone
    ImportField; // Approval Status
    ImportString(ORr.ShipAddr0,60);
    ImportString(ORr.ShipAddr1,60);
    ImportString(ORr.ShipAddr2,60);
    ImportString(ORr.ShipAddr3,60);
    //ORr.Objects = "HANSA,SV,KLI";
    ORr.Sorting = OrignialSerNr;  //JRX - 100731   , making sure the sorting field stays :-)
    if (ORr.Sorting=="") then begin
      logtext(0,"Sorting null:! : " & ORr.CustCode);
    end;
    if (ORr.SerNr==-1) then begin
      ORr.SerNr = NextSerNr("ORVc",ORr.OrdDate,-1,false,"");
    end;
    RecordStore(ORr,false);

    NextImportLine(true);
  end;

LSalesOrderHeaderIn:;
  return;
end;

global
updating procedure SalesOrderRowsIn()
begin
  record ORVc ORr,OldORr;
  row ORVc ORrw;
  string 255 tstr,Sorting;
  Integer rownr;
  Boolean chsum;

  if (!ValidateOrderRows) then begin
    GotoEndOfFile;
    goto LSalesOrderRowsIn;
  end;
  while (!TestEOF) begin
    if (ImportString(Sorting,20)) then begin
      ORr.Sorting = Sorting;        //JRX - 100801  checnged to sorting String
      if (ReadFirstKey("Sorting",ORr,1,true)) then begin
        RecordCopy(OldORr,ORr);
        ClearRow(ORr,ORrw,1);
        rownr = MatRowCnt(ORr);

        if (ImportItemCode(ORrw.ArtCode)) then begin
          MatRowPut(ORr,rownr,ORrw);
          ORVc_PasteArtCode(ORr,rownr,tstr,tstr,false);
          MatRowGet(ORr,rownr,ORrw);
        end;
        if (ImportVal(ORrw.Quant,M4UVal)) then begin
          MatRowPut(ORr,rownr,ORrw);
          ORVc_PasteQuant(ORr,rownr,false,chsum);
          if (chsum) then begin
            ORDchsum(ORr,rownr);
            ORSumup(ORr);
          end;
          MatRowGet(ORr,rownr,ORrw);
        end;
        ImportString(ORrw.Spec,100);
        if (ImportPriceValue(ORrw.Price,M423Val)) then begin        //JRX - 100802
          MatRowPut(ORr,rownr,ORrw);
          ORVc_PastePrice(ORr,rownr,chsum);
          if (chsum) then begin
            ORDchsum(ORr,rownr);
            ORSumup(ORr);
          end;
          MatRowGet(ORr,rownr,ORrw);
        end;
        if (ImportVal(ORrw.vRebate,M41Val)) then begin
          MatRowPut(ORr,rownr,ORrw);
          ORVc_PastevRebate(ORr,rownr,chsum);
          if (chsum) then begin
            ORDchsum(ORr,rownr);
            ORSumup(ORr);
          end;
          MatRowGet(ORr,rownr,ORrw);
        end;
        if (ImportVal(ORrw.Sum,M4Val)) then begin
          MatRowPut(ORr,rownr,ORrw);
          ORVc_PasteSum(ORr,rownr,chsum);
          if (chsum) then begin
            ORDchsum(ORr,rownr);
            ORSumup(ORr);
          end;
          MatRowGet(ORr,rownr,ORrw);
        end;
        ImportField; // V-Cod              // VAT code;
        ORrw.VATCode = "1";                //VAT code , manual set to 1;
        ImportField; // Cost
        ImportField; // Gross Profit
        ImportField; // Budget Cost
        ImportVal(ORrw.Shipd1,M4UVal);      //Del 1
        ImportVal(ORrw.Shipd2,M4UVal);      //Del 2
        ImportVal(ORrw.Invd,M4UVal);        //Invoiced
        ImportField; // Recipe
        ImportField; // Unit
        ImportField; // Width
        ImportField; // Depth
        ImportField; // Height
        ImportField; // Vat - Total
        ImportField; // Total
        MatRowPut(ORr,rownr,ORrw);
        SetORFlags(ORr);
        ORr.Sorting = Sorting;        //JRX - 100801
        RecordUpdate(OldORr,ORr,false);
      end else begin
        LogText(0,"Order header not found: " & tstr);
      end;
    end;
    NextImportLine(true);
  end;

LSalesOrderRowsIn:;
  return;
end;

global
updating procedure RecipeIn()
begin
  record RecVc Recr;
  row RecVc Recrw;
  string 255 ItemOut,LastItemOut,Comment,tstr;
  Integer rownr;
  record INVc INr,OldINr;

//  while (LoopMain(Recr,1,true)) begin
//    RecordDelete(Recr);
//    StepBack(Recr);
//  end;
//  RecordNew(Recr);

  if (!ValidateRecipe) then begin
    GotoEndOfFile;
    goto LRecipeIn;
  end;

  while (!TestEOF) begin
    if (ImportItemCode(ItemOut)) then begin
      if (ItemOut!=LastItemOut) then begin
        INr.Code = ItemOut;
        if (ReadFirstMain(INr,1,true)) then begin
        RecordCopy(OldINr,INr);
        INr.Recepy = ItemOut;
        RecordUpdate(OldINr,INr,false);
        end;
        if (MatRowCnt(Recr)>0) then begin
          RecSumup(Recr);
          RecordStore(Recr,false);
        end;
        RecordNew(Recr);
        rownr = 0;
        Recr.Code = ItemOut;
        ImportString(tstr,0);
        if (ImportString(Comment,60)) then begin
          Recr.Comment = Comment;
        end;

        ClearRow(Recr,Recrw,1);
        Recrw.Item = ItemOut;
        MatRowPut(Recr,rownr,Recrw);
        RecVc_PasteItem(Recr,rownr);
        MatRowGet(Recr,rownr,Recrw);

        if (nonblank(Comment)) then begin
          Recrw.Comment = Comment;
        end;
        ImportField;

        if (ImportVal(Recrw.OutQty,M45Val)) then begin
          MatRowPut(Recr,rownr,Recrw);
          RecVc_PasteItem(Recr,rownr);
          MatRowGet(Recr,rownr,Recrw);
        end;

        ImportVal(Recr.HrsToProd,M45Val);
        MatRowPut(Recr,rownr,Recrw);
        rownr = rownr + 1;
        LastItemOut = ItemOut;
      end else begin
        ClearRow(Recr,Recrw,1);
        ImportItemCode(Recrw.Item);
        ImportString(Recrw.Comment,60);
        ImportVal(Recrw.InQty,M45Val);
        MatRowPut(Recr,rownr,Recrw);
        rownr = rownr + 1;
      end;
    end;

    NextImportLine(true);
  end;

  if (MatRowCnt(Recr)>0) then begin
    RecSumup(Recr);
    RecordStore(Recr,false);
  end;

LRecipeIn:;
  return;
end;


//JRX - 2012-02-28  : Made Windowless from Standard Code
function Boolean PUDClassUPriceEFAfter(var record PUVc PUr,Integer rownr)
begin
  Boolean chsum,chrsum;
  
  row PUVc PUrw;
  val p,s;
  
 // if (changedf!=0) then begin
 //   GetWindowRecord(wn,PUr);
    MatRowGet(PUr,rownr,PUrw);    
    chrsum = true;
    if (chrsum) then begin
      PUCalcCostPrice(PUrw.ArtCode,PUrw.UPrice,PUr.InclVAT,PUr.NoTAXonVAT,PUrw.Extra,PUr.CurncyCode,
                      PUr.FrRate,PUr.ToRateB1,PUr.ToRateB2,PUr.BaseRate1,PUr.BaseRate2,
                      PUrw.ShipCost,PUrw.RowCost1,PUrw.RowCost2,PUrw.RowCost3,PUrw.RowCost4,PUrw.RowCost5,
                      PUrw.CustomsCost,p,PUrw.Quant,s,PUrw.VATCode,PUr.ExportFlag);
      PUrw.CostPrice = p;
      PUrw.Sum = s;
      chsum = true;
    end;
    MatRowPut(PUr,rownr,PUrw);    
    if (chsum) then begin
      PUSumUp(PUr);
    end;
//    PutWindowRecord(wn,PUr);
//  end;
  PUDClassUPriceEFAfter = true;
  return;
end;

global
updating procedure GoodsReceiptIn()    // GRN Import
begin
  record PUVc PUr;
  row PUVc PUrw;
  Integer rownr;
  string 255 Location,PrevLocation,tstr;
  date Settodate;

  settodate = stringtodate("31/07/2010");

//  while (LoopMain(PUr,1,true)) begin
//    RecordDelete(PUr);
//    StepBack(PUr);
//  end;

  if (!ValidateGoodsReceipt) then begin
    GotoEndOfFile;
    goto LGoodsReceiptIn;
  end;

  RecordNew(PUr);
  rownr = 0;

  while (!TestEOF) begin
    ImportCode(Location,10);
    if (Location!=PrevLocation or rownr>=190) then begin
      if (MatRowCnt(PUr)>0) then begin
        if (PUr.SerNr==-1) then begin
          PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
        end;
        PUSetShipCost(PUr,2);
        PURecalcCost(PUr);
        PUSumUp(PUr);
        RecordStore(PUr,false);
      end;
      RecordNew(PUr);
      PUr.TransDate = settodate;     //JRX - 100801      Alan wanted it like this ..
      PUr.Location = Location;
      PUVc_PasteLocation(PUr,-1);
      rownr = 0;
      PrevLocation = Location;
    end;

    if (ImportItemCode(PUrw.ArtCode)) then begin   //JRX - Done  100715 14:12  mod ImportItemCode
      MatRowPut(PUr,rownr,PUrw);
      PUVc_PasteArtCode(PUr,rownr,tstr,tstr);
      MatRowGet(PUr,rownr,PUrw);
    end;
    ImportString(PUrw.Spec,100);
    if (ImportVal(PUrw.Quant,M4UVal)) then begin
      MatRowPut(PUr,rownr,PUrw);
      PUVc_PasteQuant(PUr,rownr);
      MatRowGet(PUr,rownr,PUrw);
    end;
    if (ImportPriceValue(PUrw.UPrice,M45Val)) then begin     //JRX mod - 11-06-01 : was CostPrice : now : UPrice : Werner
      MatRowPut(PUr,rownr,PUrw);
      PUDClassUPriceEFAfter(PUr,rownr);
      //CUST commented out --- PUVc_PasteCostPrice(PUr,rownr);  // Comment back if you want to past the Cost price and not the Unit Price.
      //CUST commented out --- PUDClassCostPriceEFAfter(PUr,rownr);
      MatRowGet(PUr,rownr,PUrw);
    end;
    ImportField; // location Area
    ImportCode(PUrw.CustomsNr,20);
    ImportString(PUrw.SerialNr,30);           //JRX - 100726    //"Serial/Batch#"
    PUr.TransDate = settodate;     //JRX - 100801      Alan wanted it like this ..
    MatRowPut(PUr,rownr,PUrw);
    if (PUrw.Quant>0) then begin
      rownr = rownr + 1;
    end else begin
      MatRowDelete(PUr,rownr);
    end;
    NextImportLine(true);
  end;

  if (MatRowCnt(PUr)>0) then begin
    if (PUr.SerNr==-1) then begin
      PUr.SerNr = NextSerNr("PUVc",PUr.TransDate,-1,false,"");
    end;
    PUSetShipCost(PUr,2);
    PURecalcCost(PUr);
    PUSumUp(PUr);
    //PUr.TransDate = "31/07/2010";     //JRX - 100801      Alan wanted it like this ..
    PUr.TransDate = CurrentDate; //JRX - 2012-03-01 : Maricelle wanted this for Mikka
    RecordStore(PUr,false);
  end;

LGoodsReceiptIn:;
  return;
end;

// UST: 100707 - taken from standard and made windowless
function Boolean PODClassPlanShipEFAfter(var record POVc POr)
begin
//  record POVc POr;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;

//  if (changedf) then begin
    BlockLoad(PlanDelRec);
//    GetWindowRecord(wn,POr);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = POr.PlanShip;
        POr.PlanShip = d;
        POr.PlanShipDate = StringToDate(POr.PlanShip);
      case 2:  /* week number (nn) */
        week = POr.PlanShip;
        POr.PlanShip = week;
      case 3:  /* week number (yynn */
        if (nonblank(POr.PlanShip)) then begin
          week = POr.PlanShip;
          POr.PlanShip = week;
          if (len(POr.PlanShip)<4) then begin
            POr.PlanShip = "0" & POr.PlanShip;
          end;
          if (len(POr.PlanShip)>4) then begin
            POr.PlanShip = Left(POr.PlanShip,4);
          end;
        end;
    end;
//    PutWindowRecord(wn,POr);
//  end;
  PODClassPlanShipEFAfter = true;
  return;
end;

// UST: 100707 - taken from standard and made windowless
function Boolean PODClassPlanShipRowEFAfter(var record POVc POr,Integer rownr)
begin
  row POVc POrw;
  record PlanDeliveryBlock PlanDelRec;
  LongInt week;
  date d;

//  if (changedf) then begin
    BlockLoad(PlanDelRec);
//    GetWindowRecord(wn,POr);
    MatRowGet(POr,rownr,POrw);
    switch (PlanDelRec.FieldType) begin
      case 1:  /* date */
        d = POrw.PlanShipRow;
        POrw.PlanShipRow = d;
      case 2:  /* week number (nn) */
        week = POrw.PlanShipRow;
        POrw.PlanShipRow = week;
      case 3:  /* week number (yynn */
        week = POrw.PlanShipRow;
        POrw.PlanShipRow = week;
        if (len(POrw.PlanShipRow)<4) then begin
          POrw.PlanShipRow = "0" & POrw.PlanShipRow;
        end;
        if (len(POrw.PlanShipRow)>4) then begin
          POrw.PlanShipRow = Left(POrw.PlanShipRow,4);
        end;
    end;
    MatRowPut(POr,rownr,POrw);
//    PutWindowRecord(wn,POr);
//  end;
  PODClassPlanShipRowEFAfter = true;
  return;
end;

global
updating procedure PurchOrdHeaderIn()   // purchase Order HEader POrder
begin
  record POVc POr;
  string 255 OriginalSerNr,tstr,project,Loca;
  record UserVc Userr;
/*
  while (LoopMain(POr,1,true)) begin
    RecordDelete(POr);
    StepBack(POr);
  end;
*/
  if (!ValidatePurchOrdHeader) then begin
    GotoEndOfFile;
    goto LPurchOrdIn;
  end;

  while (!TestEOF) begin
    RecordNew(POr);
    if(!ImportString(OriginalSerNr,20)) then begin
      OriginalSerNr = "";
    end;
    if (ImportCode(POr.VECode,20)) then begin
      POVc_PasteVECode(POr,true);
    end;
    ImportString(POr.Addr0,60);

//    if (ImportCode(POr.SalesMan,10)) then begin
//      GetSalesGroup(POr.SalesMan,tstr);
//      POr.SalesGroup = tstr;
//   end;

    if (ImportString(tstr,60)) then begin
      Userr.Name = tstr;
      if (ReadFirstKey("Name",Userr,1,true)) then begin
        tstr = POr.SalesMan;
        POr.SalesMan = Userr.Code;
        GetSalesGroup(POr.SalesMan,tstr);
        POr.SalesGroup = tstr;
      end else begin
        LogText(0,"Purchase Order Import >> User not found: " & tstr);
      end;
    end;


    if ( nonblank(POr.SalesMan)) then begin
        if (nonblank(POr.Comment)) then begin
          POr.Comment = POr.SalesMan & " / " & POr.Comment;
        end else begin
          POr.Comment = POr.SalesMan;
        end;
    end;

    if (ImportDate(POr.TransDate)) then begin
      POGetRate(POr);
    end;
    ImportCode(POr.PayDeal,2);
    ImportString(POr.OurContact,20);
    importfield;              // Planed Shipped Ddate  -- Skiupping it, manual
    POr.PlanShip = datetostring(AddDay(POr.TransDate,30),"DD/MM/YYYY");  //adding 30 days to orddate

   // POr.DespatchDate = AddDay(POr.OrdDate,30); //adding 30 days to orddate

   /*if (ImportString(POr.PlanShip,10)) then begin
      PODClassPlanShipEFAfter(POr);
    end;
   */

    ImportField; // CLASS
    if (blank(POr.POClass)) then begin
      POr.POClass = "STOCK";
    end;

    ImportField; // ORDTYPE
    ImportString(POr.Reference,20);
    ImportString(POr.VEContact,60);
    ImportCode(POr.Objects,60);
    //POr.Objects = "HANSA,SV,KLI";                         //Manual Overide

    ImportField; // VATCODE
    if (ImportCode(POr.CurncyCode,5)) then begin
      POVc_PasteCurncyCode(POr,"",true);
    end;

    ImportField; // RATE
    ImportCode(POr.ShipDeal,5);

    ImportCode(project,20); // don't think they have projects  // Project Code


    ImportField; // BONO
    ImportField; // STATUS
    ImportCode(POr.BranchID,20);
    ImportString(POr.Comment,60);
    ImportString(POr.ShipAddr0,60);

    //JRX - 100715  added
    ImportString(POr.ShipAddr1,60);
    ImportString(POr.ShipAddr2,60);
    ImportString(POr.ShipAddr3,60);
    ImportString(POr.DelAddr3,60);
    ImportString(POr.DelAddr4,60);
    //JRX - 100715  end

    if (ImportCode(Loca,10)) then begin
      POr.Location = Loca;
      if (!POVc_PasteLocation(POr)) then begin
        POr.Location = Loca;
      end;
    end;
    //POr.Location = "KLI";                                    //Manual Overide
    POr.Comment = POr.Comment & "  " & project;
    POr.Reference = OriginalSerNr;

    if (POr.SerNr==-1) then begin
      POr.SerNr = NextSerNr("POVc",POr.TransDate,-1,false,"");
    end;
    if (!blank(OriginalSerNr)) then begin
    RecordStore(POr,false);
    end;
    NextImportLine(true);
  end;

LPurchOrdIn:;
  return;
end;

global
updating procedure PurchOrdRowsIn()
begin
  record POVc POr,OldPOr;
  row POVc POrw;
  string 255 OriginalSerNr;
  Integer rownr;

  if (!ValidatePurchOrdRows) then begin
    GotoEndOfFile;
    goto LPurchOrdRowsIn;
  end;

  while (!TestEOF) begin
    ImportString(OriginalSerNr,20);
    POr.Reference = OriginalSerNr;
    if (ReadFirstKey("Reference",POr,1,true)) then begin
      RecordCopy(OldPOr,POr);
      rownr = MatRowCnt(POr);
      ClearRow(POr,POrw,1);
      if (ImportItemCode(POrw.ArtCode)) then begin  //JRX - 100715  mod +  ImportItemCode
        MatRowPut(POr,rownr,POrw);
        POVc_PasteArtCode(POr,rownr,false);
        MatRowGet(POr,rownr,POrw);
      end;
      if (ImportVal(POrw.Quant,M4UVal)) then begin
        MatRowPut(POr,rownr,POrw);
        POVc_PasteQuant(POr,rownr);
        MatRowGet(POr,rownr,POrw);
      end;
      ImportCode(POrw.UnitCode,5);
      ImportString(POrw.Spec,100);
      if (ImportVal(POrw.Price,M45Val)) then begin
        MatRowPut(POr,rownr,POrw);
        POVc_PastePrice(POr,rownr);
        MatRowGet(POr,rownr,POrw);
      end;
      if (ImportVal(POrw.vRebate,M41Val)) then begin
        MatRowPut(POr,rownr,POrw);
        POVc_PastevRebate(POr,rownr);
        MatRowGet(POr,rownr,POrw);
      end;
      if (ImportPriceValue(POrw.Sum,M45Val)) then begin       //JRX - 100802  ImportPriceValue
        MatRowPut(POr,rownr,POrw);
        POVc_PasteSum(POr,rownr);
        MatRowGet(POr,rownr,POrw);
      end;
      if (ImportCode(POrw.VATCode,2)) then begin
        if(blank(POrw.VATCode))then begin                 //VAT Code , if Blank , then 1;
            POrw.VATCode = "1";
        end else begin
          if (POrw.VATCode == "00") then begin
             POrw.VATCode = "1";
          end;
        end;
        MatRowPut(POr,rownr,POrw);
        POVc_PasteVATCode(POr,rownr);
      end;
      ImportCode(POrw.CostAcc,5);
      ImportCode(POrw.Objects,60);
      if (ImportString(POrw.PlanShipRow,10)) then begin
        MatRowPut(POr,rownr,POrw);
        PODClassPlanShipRowEFAfter(POr,rownr);
        MatRowGet(POr,rownr,POrw);
      end;
      ImportString(POrw.Comment,100);
      ImportPriceValue(POrw.ShipCost,M45Val);       //JRX - 100802  ImportPriceValue
      ImportVal(POrw.Shipd1,M4UVal);
      ImportVal(POrw.Invd,M4UVal);
      MatRowPut(POr,rownr,POrw);
      POSumUp(POr);

      RecordUpdate(OldPOr,POr,false);
    end else begin
      LogText(0,"Purchase Order not found: " & OriginalSerNr);
    end;
    NextImportLine(true);
  end;

LPurchOrdRowsIn:;
  return;
end;

//JRX-Added - 2011-04-11  : Imports for Loyalty Records
global
updating procedure LoyaltyCardsIn()   // LoyaltyCardVc
begin
  record LoyaltyCardVc LoyaltyCardVr;
  record LCMemberLevelVc LCMemberLevelVr;
  string 255 OriginalSerNr,tstr,project,Loca;
  record UserVc Userr;
/*
  while (LoopMain(LoyaltyCardVr,1,true)) begin
    RecordDelete(LoyaltyCardVr);
    StepBack(LoyaltyCardVr);
  end;
*/
  if (!ValidateLoyaltyColumns) then begin
    GotoEndOfFile;
    goto LLoyaltyCardsIn;
  end;

  while (!TestEOF) begin
    RecordNew(LoyaltyCardVr);
    if (ImportItemCode(LoyaltyCardVr.CustCode)) then begin
    end;
    ImportString(LoyaltyCardVr.CustName,60);
    if (ImportDate(LoyaltyCardVr.StartDate)) then begin
    end;
    if (ImportDate(LoyaltyCardVr.ExpiryDate)) then begin
    end;
    if (ImportItemCode(LoyaltyCardVr.LCMLevel)) then begin  // ItemCode for upper Case Import
      LCMemberLevelVr.Code = LoyaltyCardVr.LCMLevel;
      if (ReadFirstMain(LCMemberLevelVr,1,true)) then begin
      end else begin
        LogText(0,"LCMLevel >> not found: " & LoyaltyCardVr.LCMLevel & " Cust Code :" &  LoyaltyCardVr.CustCode);
      end;
    end;
    ImportVal(LoyaltyCardVr.PointsBalance,M41Val);
    ImportItemCode(LoyaltyCardVr.PointsTo);
    ImportInt(LoyaltyCardVr.Closed);
    ImportItemCode(LoyaltyCardVr.SerNr);
    if (blank(LoyaltyCardVr.SerNr)) then begin
      LoyaltyCardVr.SerNr = NextSerNr("LoyaltyCardVc",currentdate,-1,false,"");
    end;
    RecordStore(LoyaltyCardVr,false);
    NextImportLine(true);
  end;
LLoyaltyCardsIn:;
  return;
end;
