//VER 6.4 120718  
updating procedure DeleteCashIns()
begin
  record CLInVc CLInr;
  
  ResetLoop(CLInr);
  while (LoopMain(CLInr,1,true)) begin
    RecordDelete(CLInr);
    StepBack(CLInr);
  end;
  return;
end;

updating procedure DeleteCashOuts()
begin
  record CLOutVc CLOutr;
  
  ResetLoop(CLOutr);
  while (LoopMain(CLOutr,1,true)) begin
    RecordDelete(CLOutr);
    StepBack(CLOutr);
  end;
  return;
end;

updating procedure DeleteTargetTimes()
begin
  record TargTimeVc TargTimer;
  
  ResetLoop(TargTimer);
  while (LoopMain(TargTimer,1,true)) begin
    RecordDelete(TargTimer);
    StepBack(TargTimer);
  end;
  return;
end;

updating procedure DeleteTransaction()
begin
  record TBIVVc TBIVr;
  
  ResetLoop(TBIVr);
  while (LoopMain(TBIVr,1,true)) begin
    RecordDelete(TBIVr);
    StepBack(TBIVr);
  end;
  return;
end;

updating procedure DeleteSimulations()
begin
  record SMVc SMr;
  
  ResetLoop(SMr);
  while (LoopMain(SMr,1,true)) begin
    RecordDelete(SMr);
    StepBack(SMr);
  end;
 return; 
end;

updating procedure DeletePurchaseInvoice()
begin
  record VIVc VIr;
  
  ResetLoop(VIr);
  while (LoopMain(VIr,1,true)) begin
    RecordDelete(VIr);
    StepBack(VIr);
  end;
  return;
end;

updating procedure DeleteInvoices()
begin
  record IVVc IVr;
  
  ResetLoop(IVr);
  while (LoopMain(IVr,1,true)) begin
    RecordDelete(IVr);
    StepBack(IVr);
  end;
  return;
end;

updating procedure DeleteOrders()
begin
  record ORVc ORr;
  
  ResetLoop(ORr);
  while (LoopMain(ORr,1,true)) begin
    RecordDelete(ORr);
    StepBack(ORr);
  end;
  return;
end;

updating procedure DeleteReceipts()
begin
  record IPVc IPr;
  
  ResetLoop(IPr);
  while (LoopMain(IPr,1,true)) begin
    RecordDelete(IPr);
    StepBack(IPr);
  end;
  return;
end;

updating procedure DeleteActivities()
begin
  record ActVc Actr;
  
  ResetLoop(Actr);
  while (LoopMain(Actr,1,true)) begin
    RecordDelete(Actr);
    StepBack(Actr);
  end;
  return;
end;

updating procedure DeleteWeightedAvarage()
begin
  record WeigAvVc WeigAvr;
  
  ResetLoop(WeigAvr);
  while (LoopMain(WeigAvr,1,true)) begin
    RecordDelete(WeigAvr);
    StepBack(WeigAvr);
  end;
  return;
end;

updating procedure DeleteStockMovements()
begin
  record StockMovVc StockMovr;
  
  ResetLoop(StockMovr);
  while (LoopMain(StockMovr,1,true)) begin
    RecordDelete(StockMovr);
    StepBack(StockMovr);
  end;
  return;
end;

updating procedure DeleteReturnedGoods()
begin
  record RetVc Retr;
  
  ResetLoop(Retr);
  while (LoopMain(Retr,1,true)) begin
    RecordDelete(Retr);
    StepBack(Retr);
  end;
  return;
end;

updating procedure DeleteLoggingHistory()
begin
  record RHistVc RHistr;
  
  ResetLoop(RHistr);
  while (LoopMain(RHistr,1,true)) begin
    RecordDelete(RHistr);
    StepBack(RHistr);
  end;
  return;
end;

updating procedure DeleteReturnedGoodsSuppliers()
begin
  record RetPUVc RetPUr;
  
  ResetLoop(RetPUr);
  while (LoopMain(RetPUr,1,true)) begin
    RecordDelete(RetPUr);
    StepBack(RetPUr);
  end;
  return;
end;

updating procedure DeleteAccounts()
begin
  record AccVc Accr;
  
  ResetLoop(Accr);
  while (LoopMain(Accr,1,true)) begin
    RecordDelete(Accr);
    StepBack(Accr);
  end;
  return;
end;

updating procedure DeleteContacts()
begin
  record CUVc CUr;
  
  ResetLoop(CUr);
  while (LoopMain(CUr,1,true)) begin
    RecordDelete(CUr);
    StepBack(CUr);
  end;
  return;
end;

updating procedure DeletePrices()
begin
  record PLVc PLr;
  
  ResetLoop(PLr);
  while (LoopMain(PLr,1,true)) begin
    RecordDelete(PLr);
    StepBack(PLr);
  end;
  return;
end;

updating procedure DeletePurchaseOrders()
begin
  record POVc POr;
  
  ResetLoop(POr);
  while (LoopMain(POr,1,true)) begin
    RecordDelete(POr);
    StepBack(POr);
  end;
  return;
end;

updating procedure DeleteItems()
begin
  record INVc INr;
  
  ResetLoop(INr);
  while (LoopMain(INr,1,true)) begin 
    RecordDelete(INr);
    LogText(0,"I am executed"); 
    StepBack(INr);
  end;
  return;
end;

updating procedure DeleteGoodsReceipts()
begin
  record PUVc PUr;
  
  ResetLoop(PUr);
  while (LoopMain(PUr,1,true)) begin
    RecordDelete(PUr);
    StepBack(PUr);
  end;
  return;
end;

updating procedure DeleteItemHist()
begin
  record ItemHistVc ItemHistr;
  
  ResetLoop(ItemHistr);
  while (LoopMain(ItemHistr,1,true)) begin
    RecordDelete(ItemHistr);
    StepBack(ItemHistr);
  end;
  return;
end;

updating procedure DeleteDeliveries()
begin
  record SHVc SHr;
  
  ResetLoop(SHr);
  while (LoopMain(SHr,1,true)) begin
    RecordDelete(SHr);
    StepBack(SHr);
  end;
  return;
end;

updating procedure DeleteStockDepreciations()
begin
  record SDVc SDr;
  
  ResetLoop(SDr);
  while (LoopMain(SDr,1,true)) begin
    RecordDelete(SDr);
    StepBack(SDr);
  end;
  return;
end;

updating procedure DeleteItemGroups()
begin
  record ITVc ITr;
  
  ResetLoop(ITr);
  while (LoopMain(ITr,1,true)) begin
    RecordDelete(ITr);
    StepBack(ITr);
  end;
  return;
end;

updating procedure DeleteJobVc()
begin
  record JobVc Jobr;
  
  ResetLoop(Jobr);
  while (LoopMain(Jobr,1,true)) begin
    RecordDelete(Jobr);
    StepBack(Jobr);
  end;
  return;
end;

updating procedure DeleteResAvVc()
begin
  record ResAvVc ResAvr;
  
  ResetLoop(ResAvr);
  while (LoopMain(ResAvr,1,true)) begin
    RecordDelete(ResAvr);
    StepBack(ResAvr);
  end;
  return;
end;

updating procedure DeletePRVc()
begin
  record PRVc PRr;
  
  ResetLoop(PRr);
  while (LoopMain(PRr,1,true)) begin
    RecordDelete(PRr);
    StepBack(PRr);
  end;
  return;
end;

updating procedure DeleteTBBUVc()
begin
  record TBBUVc TBBUr;
  
  ResetLoop(TBBUr);
  while (LoopMain(TBBUr,1,true)) begin
    RecordDelete(TBBUr);
    StepBack(TBBUr);
  end;
  return;
end;

updating procedure DeleteResVc()
begin
  record ResVc ResVr;
  
  ResetLoop(ResVr);
  while (LoopMain(ResVr,1,true)) begin
    RecordDelete(ResVr);
    StepBack(ResVr);
  end;

  return;
end;

updating procedure DeleteProfileVc()
begin
  record ProfileVc ProfileVr;
  
  ResetLoop(ProfileVr);
  while (LoopMain(ProfileVr,1,true)) begin
    RecordDelete(ProfileVr);
    StepBack(ProfileVr);
  end;

  return;
end;

updating procedure DeletePOSEventVc()
begin
  record POSEventVc POSEventr;
  
  ResetLoop(POSEventr);
  while (LoopMain(POSEventr,1,true)) begin
    RecordDelete(POSEventr);
    StepBack(POSEventr);
  end;

  return;
end;

updating procedure DeleteProdOrderVc()
begin
  record ProdOrderVc ProdOrderr;
  
  ResetLoop(ProdOrderr);
  while (LoopMain(ProdOrderr,1,true)) begin
    RecordDelete(ProdOrderr);
    StepBack(ProdOrderr);
  end;
  return;
end;

updating procedure DeletePLDefVc()
begin
  record PLDefVc PLDefr;
  
  ResetLoop(PLDefr);
  while (LoopMain(PLDefr,1,true)) begin
    RecordDelete(PLDefr);
    StepBack(PLDefr);
  end;
  return;
end;

updating procedure DeletePosBalanceVC()
begin
  record PosBalanceVC PosBalancer;
  
  ResetLoop(PosBalancer);
  while (LoopMain(PosBalancer,1,true)) begin
    RecordDelete(PosBalancer);
    StepBack(PosBalancer);
  end;
  return;
end;

updating procedure Delete_UserVc()
begin
  record UserVc Userr;
  
  ResetLoop(Userr);
  while (LoopMain(Userr,1,true)) begin
    RecordDelete(Userr);
    StepBack(Userr);
  end;
  return;
end;

updating procedure Delete_IVCashVc()
begin
  record IVCashVc IVCashr;
  
  ResetLoop(IVCashr);
  while (LoopMain(IVCashr,1,true)) begin
    RecordDelete(IVCashr);
    StepBack(IVCashr);
  end;
  return;
end;

updating procedure Delete_OPVc()
begin
  record OPVc OPr;
  
  ResetLoop(OPr);
  while (LoopMain(OPr,1,true)) begin
    RecordDelete(OPr);
    StepBack(OPr);
  end;
  return;
end;

updating procedure Delete_CashVc()
begin
  record CashVc Cashr;
  
  ResetLoop(Cashr);
  while (LoopMain(Cashr,1,true)) begin
    RecordDelete(Cashr);
    StepBack(Cashr);
  end;
  return;
end;

updating procedure Delete_RestBookingVc()
begin
  record RestBookingVc RestBookingr;
  
  ResetLoop(RestBookingr);
  while (LoopMain(RestBookingr,1,true)) begin
    RecordDelete(RestBookingr);
    StepBack(RestBookingr);
  end;
  return;
end;

updating procedure Delete_RestAccVc()
begin
  record RestAccVc RestAccr;
  
  ResetLoop(RestAccr);
  while (LoopMain(RestAccr,1,true)) begin
    RecordDelete(RestAccr);
    StepBack(RestAccr);
  end;
  return;
end;

updating procedure Delete_ObjVc()
begin
  record ObjVc Objr;
  
  ResetLoop(Objr);
  while (LoopMain(Objr,1,true)) begin
    RecordDelete(Objr);
    StepBack(Objr);
  end;
  return;
end;

updating procedure Delete_NormPhoneNumVc()
begin
  record NormPhoneNumVc NormPhoneNumr;
  
  ResetLoop(NormPhoneNumr);
  while (LoopMain(NormPhoneNumr,1,true)) begin
    RecordDelete(NormPhoneNumr);
    StepBack(NormPhoneNumr);
  end;
  return;
end;

updating procedure Delete_TRVc()
begin
  record TRVc TRr;

  ResetLoop(TRr);
  while (LoopMain(TRr,1,true)) begin
    RecordDelete(TRr);
    StepBack(TRr);
  end;
  return;
end;

updating procedure Delete_MinPerLOcVc()
begin
  record MinPerLOcVc MinPerLOcr;
  
  ResetLoop(MinPerLOcr);
  while (LoopMain(MinPerLOcr,1,true)) begin
    RecordDelete(MinPerLOcr);
    StepBack(MinPerLOcr);
  end;
  return;
end;

updating procedure Delete_ConfVc()
begin
  record ConfVc Confr;
  
  ResetLoop(Confr);
  while (LoopMain(Confr,1,true)) begin
    RecordDelete(Confr);
    StepBack(Confr);
  end;
  return;
end;

updating procedure Delete_LocationVc()
begin
  record LocationVc Locationr;
  
  ResetLoop(Locationr);
  while (LoopMain(Locationr,1,true)) begin
    RecordDelete(Locationr);
    StepBack(Locationr);
  end;
  return;
end;

updating procedure Delete_DiVc()
begin
  record DiVc Dir;
  
  ResetLoop(Dir);
  while (LoopMain(Dir,1,true)) begin
    RecordDelete(Dir);
    StepBack(Dir);
  end;
  return;
end;

updating procedure Delete_ItemStatusVc()
begin
  record ItemStatusVc ItemStatusr;
  
  ResetLoop(ItemStatusr);
  while (LoopMain(ItemStatusr,1,true)) begin
    RecordDelete(ItemStatusr);
    StepBack(ItemStatusr);
  end;
  return;
end;


updating procedure Delete_InTransferVc()
begin
  record InTransferVc InTransferr;
  
  ResetLoop(InTransferr);
  while (LoopMain(InTransferr,1,true)) begin
    RecordDelete(InTransferr);
    StepBack(InTransferr);
  end;
  return;
end;

updating procedure Delete_DocVc()
begin
  record DocVc Docr;
  
  ResetLoop(Docr);
  while (LoopMain(Docr,1,true)) begin
    RecordDelete(Docr);
    StepBack(Docr);
  end;
  return;
end;

updating procedure Delete_ERVc()
begin
  record ERVc ERVr;
  
  ResetLoop(ERVr);
  while (LoopMain(ERVr,1,true)) begin
    RecordDelete(ERVr);
    StepBack(ERVr);
  end;
  return;
end;

updating procedure Delete_DelAddrVc()
begin
  record DelAddrVc DelAddrr;
  
  ResetLoop(DelAddrr);
  while (LoopMain(DelAddrr,1,true)) begin
    RecordDelete(DelAddrr);
    StepBack(DelAddrr);
  end;
  return;
end;

updating procedure Delete_COVc()
begin
  record COVc COVr;
  
  ResetLoop(COVr);
  while (LoopMain(COVr,1,true)) begin
    RecordDelete(COVr);
    StepBack(COVr);
  end;
  return;
end;

updating procedure Delete_ContactRelVc()
begin
  record ContactRelVc ContactRelr;
  
  ResetLoop(ContactRelr);
  while (LoopMain(ContactRelr,1,true)) begin
    RecordDelete(ContactRelr);
    StepBack(ContactRelr);
  end;
  return;
end;

updating procedure Delete_BarcodeVc()
begin
  record BarcodeVc Barcoder;
  
  ResetLoop(Barcoder);
  while (LoopMain(Barcoder,1,true)) begin
    RecordDelete(Barcoder);
    StepBack(Barcoder);
  end;
  return;
end;

updating procedure Delete_Attach2Vc()
begin
  record Attach2Vc Attach2r;
  
  ResetLoop(Attach2r);
  while (LoopMain(Attach2r,1,true)) begin
    RecordDelete(Attach2r);
    StepBack(Attach2r);
  end;
  return;
end;

updating procedure Delete_ArchiveVc()
begin
  record ArchiveVc Archiver;
  
  ResetLoop(Archiver);
  while (LoopMain(Archiver,1,true)) begin
    RecordDelete(Archiver);
    StepBack(Archiver);
  end;
  return;
end;

updating procedure Delete_AccessVc()
begin
  record AccessVc Accessr;
  
  ResetLoop(Accessr);
  while (LoopMain(Accessr,1,true)) begin
    RecordDelete(Accessr);
    StepBack(Accessr);
  end;
  return;
end;

updating procedure Delete_ProdVc()
begin
  record ProdVc Prodr;
  
  ResetLoop(Prodr);
  while (LoopMain(Prodr,1,true)) begin
    RecordDelete(Prodr);
    StepBack(Prodr);
  end;
  return;
end;

updating procedure Delete_PIVc()
begin
  record PIVc PIr;
  
  ResetLoop(PIr);
  while (LoopMain(PIr,1,true)) begin
    RecordDelete(PIr);
    StepBack(PIr);
  end;
  return;
end;

updating procedure Delete_QTVc()
begin
  record QTVc QTr;
  
  ResetLoop(QTr);
  while (LoopMain(QTr,1,true)) begin
    RecordDelete(QTr);
    StepBack(QTr);
  end;
  return;
end;

updating procedure Delete_RecVc()
begin
  record RecVc Recr;
  
  ResetLoop(Recr);
  while (LoopMain(Recr,1,true)) begin
    RecordDelete(Recr);
    StepBack(Recr);
  end;
  return;
end;

updating procedure Delete_RLinkVc()
begin
  record RLinkVc RLinkr;
  
  ResetLoop(RLinkr);
  while (LoopMain(RLinkr,1,true)) begin
    RecordDelete(RLinkr);
    StepBack(RLinkr);
  end;
  return;
end;

updating procedure Delete_RentInVC()
begin
  record RentInVC RentInr;
  
  ResetLoop(RentInr);
  while (LoopMain(RentInr,1,true)) begin
    RecordDelete(RentInr);
    StepBack(RentInr);
  end;
  return;
end;

updating procedure Delete_SVOSerVc()
begin
  record SVOSerVc SVOSerr;
  
  ResetLoop(SVOSerr);
  while (LoopMain(SVOSerr,1,true)) begin
    RecordDelete(SVOSerr);
    StepBack(SVOSerr);
  end;
  return;
end;

updating procedure Delete_SMSVc()
begin
  record SMSVc SMSr;
  
  ResetLoop(SMSr);
  while (LoopMain(SMSr,1,true)) begin
    RecordDelete(SMSr);
    StepBack(SMSr);
  end;
  return;
end;

updating procedure Delete_StockTakeVc()
begin
  record StockTakeVc StockTaker;
  
  ResetLoop(StockTaker);
  while (LoopMain(StockTaker,1,true)) begin
    RecordDelete(StockTaker);
    StepBack(StockTaker);
  end;
  return;
end;

updating procedure Delete_VARVc()
begin
  record VARVc VARr;
  
  ResetLoop(VARr);
  while (LoopMain(VARr,1,true)) begin
    RecordDelete(VARr);
    StepBack(VARr);
  end;
  return;
end;

updating procedure Delete_ARVc()
begin
  record ARVc ARr;

  ResetLoop(ARr);
  while (LoopMain(ARr,1,true)) begin
    RecordDelete(ARr);
    StepBack(ARr);
  end;
  return;
end;


updating procedure Delete_VARGVc()
begin
  record VARGVc VARGr;
  
  ResetLoop(VARGr);
  while (LoopMain(VARGr,1,true)) begin
    RecordDelete(VARGr);
    StepBack(VARGr);
  end;
  return;
end;

updating procedure Delete_VARSubsetsVc()
begin
  record VARSubsetsVc VARSubsetsr;
  
  ResetLoop(VARSubsetsr);
  while (LoopMain(VARSubsetsr,1,true)) begin
    RecordDelete(VARSubsetsr);
    StepBack(VARSubsetsr);
  end;
  return;
end;

updating procedure Delete_UNOK_IVVC()
begin
  record IVVc Cur;      
  Boolean TrHs,testf;
  LongInt afr,ato;

  TrHs = true;
  Cur.OKFlag = 0;
  while (LoopKey("OKFlag",Cur,1,TrHs)) begin
    if (Cur.OKFlag!=0) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
        RecordDelete(Cur);
        StepBack(Cur);
    end;
  end; 

 return;
end;

updating procedure Delete_CUServiceEnabVc()
begin
  record CUServiceEnabVc CUServiceEnabr;
  
  ResetLoop(CUServiceEnabr);
  while (LoopMain(CUServiceEnabr,1,true)) begin
    RecordDelete(CUServiceEnabr);
    StepBack(CUServiceEnabr);
  end;
  return;
end;

updating procedure Delete_ConvItemBlock()
begin
  record ConvItemBlock ConvItemBlockr;      
  Integer rwcnt,i;

  BlockLoad(ConvItemBlockr);
  rwcnt = MatRowCnt(ConvItemBlockr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowDelete(ConvItemBlockr,i);
  end;
  BlockStore(ConvItemBlockr);

 return;
end;

updating procedure Delete_Bud1Vc()
begin
  record Bud1Vc Bud1r;
  
  ResetLoop(Bud1r);
  while (LoopMain(Bud1r,1,true)) begin
    RecordDelete(Bud1r);
    StepBack(Bud1r);
  end;
  return;
end;

updating procedure Delete_UserDefRepVc()
begin
  record UserDefRepVc UserDefRepr;
  
  ResetLoop(UserDefRepr);
  while (LoopMain(UserDefRepr,1,true)) begin
    RecordDelete(UserDefRepr);
    StepBack(UserDefRepr);
  end;
  return;
end;

updating procedure Delete_UserDefRepLinesVc()
begin
  record UserDefRepLinesVc UserDefRepLinesr;
  
  ResetLoop(UserDefRepLinesr);
  while (LoopMain(UserDefRepLinesr,1,true)) begin
    RecordDelete(UserDefRepLinesr);
    StepBack(UserDefRepLinesr);
  end;
  return;
end;

updating procedure Delete_UserDefRepColumnsVc()
begin
  record UserDefRepColumnsVc UserDefRepColumnsr;
  
  ResetLoop(UserDefRepColumnsr);
  while (LoopMain(UserDefRepColumnsr,1,true)) begin
    RecordDelete(UserDefRepColumnsr);
    StepBack(UserDefRepColumnsr);
  end;
  return;
end;

updating procedure Delete_CCatVc()
begin
  record CCatVc CCatr;
  
  ResetLoop(CCatr);
  while (LoopMain(CCatr,1,true)) begin
    RecordDelete(CCatr);
    StepBack(CCatr);
  end;
  return;
end;

updating procedure Delete_VGVc()
begin
  record VGVc VGr;
  
  ResetLoop(VGr);
  while (LoopMain(VGr,1,true)) begin
    RecordDelete(VGr);
    StepBack(VGr);
  end;
  return;
end;

updating procedure Delete_CheckVc()
begin
  record CheckVc CheckVcr;
  
  ResetLoop(CheckVcr);
  while (LoopMain(CheckVcr,1,true)) begin
    RecordDelete(CheckVcr);
    StepBack(CheckVcr);
  end;
  return;
end;

updating procedure Delete_POSButtonsVc()
begin
  record POSButtonsVc POSButtonsVcr;
  
  ResetLoop(POSButtonsVcr);
  while (LoopMain(POSButtonsVcr,1,true)) begin
    RecordDelete(POSButtonsVcr);
    StepBack(POSButtonsVcr);
  end;
  return;
end;

updating procedure Delete_ResTypeSupportVc()
begin
  record ResTypeSupportVc ResTypeSupportr;
  
  ResetLoop(ResTypeSupportr);
  while (LoopMain(ResTypeSupportr,1,true)) begin
    RecordDelete(ResTypeSupportr);
    StepBack(ResTypeSupportr);
  end;
  return;
end;

updating procedure Delete_WRVc()
begin
  record WRVc WRVr;
  
  ResetLoop(WRVr);
  while (LoopMain(WRVr,1,true)) begin
    RecordDelete(WRVr);
    StepBack(WRVr);
  end;
  return;
end;

// updating procedure Delete_ShopBaskVc()
// begin
//   record ShopBaskVc ShopBaskr;
  
//   ResetLoop(ShopBaskr);
//   while (LoopMain(ShopBaskr,1,true)) begin
//     RecordDelete(ShopBaskr);
//     StepBack(ShopBaskr);
//   end;
//   return;
// end;

// updating procedure Delete_APVc()
// begin
//   record APVc APVr;
  
//   ResetLoop(APVr);
//   while (LoopMain(APVr,1,true)) begin
//     RecordDelete(APVr);
//     StepBack(APVr);
//   end;
//   return;
// end;

updating procedure Delete_UserActionLogVc()
begin
  record UserActionLogVc UserActionLogr;

  ResetLoop(UserActionLogr);
  while (LoopMain(UserActionLogr,1,true)) begin
    RecordDelete(UserActionLogr);
    StepBack(UserActionLogr);
  end;
  return;
end;

updating procedure Delete_UserLoginVc()
begin
  record UserLoginVc UserLoginr;
  
  ResetLoop(UserLoginr);
  while (LoopMain(UserLoginr,1,true)) begin
    RecordDelete(UserLoginr);
    StepBack(UserLoginr);
  end;
  return;
end;

global
updating procedure HalDelAllRecordMnDCT(record RcVc RepSpec)
begin
  record RegDeleteDCTBlock RDDb; 
  Blockload(RDDb);
  if (RDDb.flags[1] == 1) then begin
    DeleteCashIns;
  end; 
 if(RDDb.flags[92] == 1) then begin
    Delete_TRVc;
  end;
 if (RDDb.flags[2] == 1) then begin
      DeleteCashOuts;
  end;
  if (RDDb.flags[3] == 1) then begin
      DeleteTargetTimes;
  end; 
  if (RDDb.flags[4] == 1) then begin
      DeleteTransaction;
  end;  
  if (RDDb.flags[5] == 1) then begin
      DeleteSimulations;
  end; 
   if (RDDb.flags[6] == 1) then begin
      DeletePurchaseInvoice;
  end;  
  if (RDDb.flags[7] == 1) then begin
      DeleteInvoices;
  end;  
  if (RDDb.flags[8] == 1) then begin
      DeleteOrders;
  end;  
  if (RDDb.flags[9] == 1) then begin
      DeleteReceipts;
  end;
  if (RDDb.flags[10] == 1) then begin
      DeleteActivities;
  end;  
  if (RDDb.flags[11] == 1) then begin
        DeleteWeightedAvarage;
  end;  
  if (RDDb.flags[12] == 1) then begin
        DeleteStockMovements;
  end;  
  if (RDDb.flags[13] == 1) then begin
        DeleteReturnedGoods;
  end;  
  if (RDDb.flags[14] == 1) then begin
        DeleteLoggingHistory;
  end;       
  if (RDDb.flags[15] == 1) then begin
        DeleteReturnedGoodsSuppliers;
  end;  
  if (RDDb.flags[16] == 1) then begin
        DeleteAccounts;
  end; 
  if (RDDb.flags[17] == 1) then begin
        Delete_Bud1Vc;
  end;     
  if (RDDb.flags[18] == 1) then begin
      DeleteContacts;
  end;  
  if (RDDb.flags[19] == 1) then begin
      DeletePrices;
  end;
  if (RDDb.flags[20] == 1) then begin
      DeletePurchaseOrders;
  end;    
  if (RDDb.flags[21] == 1) then begin
        DeleteItems;
  end;  
  if (RDDb.flags[22] == 1) then begin
        DeleteGoodsReceipts;
  end;  
  if (RDDb.flags[23] == 1) then begin
        DeleteItemHist;
  end;
  if (RDDb.flags[24] == 1) then begin
        DeleteDeliveries;
  end;  
  if (RDDb.flags[25] == 1) then begin
        DeleteStockDepreciations;
  end;  
  if (RDDb.flags[26] == 1) then begin
        DeleteItemGroups;
  end;  
  if (RDDb.flags[27] == 1) then begin
        DeletePRVc;
  end;  
  if (RDDb.flags[28] == 1) then begin
        DeleteTBBUVc;
  end;  
  if (RDDb.flags[30] == 1) then begin
        DeleteJobVc;
  end;     
  if (RDDb.flags[31] == 1) then begin
        DeleteResAvVc;
  end;     
  if (RDDb.flags[32] == 1) then begin
        DeleteResVc;
  end;  
  if (RDDb.flags[33] == 1) then begin
        DeletePOSEventVc;
  end; 
  if (RDDb.flags[34] == 1) then begin
        DeleteProdOrderVc;
  end;   
  if (RDDb.flags[35] == 1) then begin
        DeletePLDefVc;
  end;     
  if (RDDb.flags[36] == 1) then begin
        DeletePosBalanceVC;
  end;  
  if (RDDb.flags[37] == 1) then begin
        Delete_UserVc;
  end;   
  if (RDDb.flags[38] == 1) then begin
        Delete_IVCashVc;
  end;     
  if (RDDb.flags[39] == 1) then begin
        Delete_OPVc;
  end;     
  if (RDDb.flags[40] == 1) then begin
        Delete_CashVc;
  end;   
  if (RDDb.flags[41] == 1) then begin
        Delete_RestBookingVc;
  end; 
  if (RDDb.flags[42] == 1) then begin
        Delete_RestAccVc;
  end;         
  if (RDDb.flags[43] == 1) then begin
        Delete_ObjVc;
  end;        
  if (RDDb.flags[44] == 1) then begin
        Delete_NormPhoneNumVc;
  end; 
  if (RDDb.flags[45] == 1) then begin
        Delete_TrVc;
  end;
  if (RDDb.flags[46] == 1) then begin
        DeleteProfileVc;
  end;  
   if (RDDb.flags[50] == 1) then begin
        Delete_MinPerLOcVc;
  end;   
  if (RDDb.flags[51] == 1) then begin
        Delete_ConfVc;
  end;
  if (RDDb.flags[52] == 1) then begin
        Delete_LocationVc;
  end;
  if (RDDb.flags[53] == 1) then begin
        Delete_DiVc;
  end;
  if (RDDb.flags[54] == 1) then begin
        Delete_ItemStatusVc;
  end;  
  if (RDDb.flags[55] == 1) then begin
        Delete_InTransferVc;
  end; 
  if (RDDb.flags[56] == 1) then begin
        Delete_DocVc;
  end;
  if (RDDb.flags[57] == 1) then begin
        Delete_ERVc;
  end; 
  if (RDDb.flags[58] == 1) then begin
        Delete_DelAddrVc;
  end; 
  if (RDDb.flags[59] == 1) then begin
        Delete_COVc;
  end;      
  if (RDDb.flags[60] == 1) then begin
        Delete_ContactRelVc;
  end; 
  if (RDDb.flags[61] == 1) then begin
        Delete_BarcodeVc;
  end; 
  if (RDDb.flags[62] == 1) then begin
        Delete_Attach2Vc;
  end; 
  if (RDDb.flags[63] == 1) then begin
        Delete_ArchiveVc;
  end; 
  if (RDDb.flags[64] == 1) then begin
        Delete_AccessVc;
  end; 
  if (RDDb.flags[65] == 1) then begin
        Delete_ProdVc;
  end; 
  if (RDDb.flags[66] == 1) then begin
        Delete_PIVc;
  end;
  if (RDDb.flags[67] == 1) then begin
        Delete_QTVc;
  end;
  if (RDDb.flags[68] == 1) then begin
        Delete_RecVc;
  end;     
  if (RDDb.flags[69] == 1) then begin
        Delete_RLinkVc;
  end; 
  if (RDDb.flags[70] == 1) then begin
        Delete_RentInVC;
  end;
  if (RDDb.flags[71] == 1) then begin
        Delete_SVOSerVc;
  end;
  if (RDDb.flags[72] == 1) then begin
        Delete_SMSVc;
  end;
  if (RDDb.flags[73] == 1) then begin
        Delete_StockTakeVc;
  end; 
  if (RDDb.flags[74] == 1) then begin
        Delete_VARVc;
  end;
  if (RDDb.flags[91] == 1) then begin
        Delete_ARVc;
  end;
  if (RDDb.flags[75] == 1) then begin
        Delete_VARGVc;
  end;  
  if (RDDb.flags[76] == 1) then begin
        Delete_VARSubsetsVc;
  end; 
  if (RDDb.flags[77] == 1) then begin
        Delete_UNOK_IVVC;
  end;   
  if (RDDb.flags[78] == 1) then begin
        Delete_CUServiceEnabVc;
  end;   
  if (RDDb.flags[79] == 1) then begin
        Delete_ConvItemBlock;
  end;     
  if (RDDb.flags[80] == 1) then begin
        Delete_UserDefRepVc;
  end;
  if (RDDb.flags[81] == 1) then begin
        Delete_UserDefRepLinesVc;
  end;  
  if (RDDb.flags[82] == 1) then begin
        Delete_UserDefRepColumnsVc;
  end;  
  if (RDDb.flags[83] == 1) then begin
        Delete_CCatVc;
  end;        
  if (RDDb.flags[84] == 1) then begin
        Delete_VGVc;
  end;  
  if (RDDb.flags[85] == 1) then begin
        Delete_POSButtonsVc;
  end; 
  if (RDDb.flags[86] == 1) then begin
        Delete_CheckVc;
  end;   
  if (RDDb.flags[87] == 1) then begin
        Delete_ResTypeSupportVc;
  end;      
  if (RDDb.flags[88] == 1) then begin
        Delete_WRVc;
  end;    
  // if (RDDb.flags[89] == 1) then begin
  //       Delete_ShopBaskVc;
  // end; 
  // if (RDDb.flags[90] == 1) then begin
  //       Delete_APVc;
  // end;   
  if (RepSpec.f1 == "UserActionLogVc") then begin
        Delete_UserActionLogVc;
  end; 
  if (RepSpec.f1 == "UserLoginVc") then begin
        Delete_UserLoginVc;
  end;  
  return;
end;
