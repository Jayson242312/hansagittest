remote inner function Integer MailAcceptanceStatus(LongInt);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner function string 60 UserDefined(string,string);
// external outer function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
// remote inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc,var Integer);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote inner procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote inner procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote inner procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote inner function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();

external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions LAT
external inner function string 255 VATZoneEditFieldLabel_ENG(Integer);
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_ENG();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DisplayRecordDetailsRA_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string);
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccessGroups();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasCategories();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasObjects();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasProjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModNL();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean HasPrepayments();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasAged();
external inner function Boolean HasMailTags();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasYodlee();
external inner function Boolean HasAddFee();
external inner function Boolean IsStandardUnused();
external inner function Boolean HasIntegratedNL();
external inner function Boolean IsCloudControllerClient();
external inner function Boolean HasEbayIntegration();
external inner function Boolean HasAmazonIntegration();
external inner function Boolean HasAvalara();
external inner function Boolean HasNobbIntegration();
external inner function Boolean HasModLearn();
external inner function Boolean HasDownpayments(); //jh
external inner function Boolean HasSupplierStatus(); //jh
external inner function Integer OPDClassSelectSetToPaste(Integer,string);

// external inner function Boolean VATLawIsEU();
external inner function Boolean HasPayLinkTransactions();
external inner function Boolean IsFeeTypeCustomer();
external inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external inner procedure DrawPOSInterface2_ENG(string,string,record POSButtonsVc,string,Integer,Integer);
external inner function Boolean HasBankImport();
external inner function Boolean HasYapily();
external inner function Boolean AcceptanceStatusColumnTest(string);
//
external inner function Boolean HasReturnedGoods();

SetLangMode(LangEnglish,"ENG",2);	//##ii to support LAT special characters in GUI



// Custom 
window LocalMachineTClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs;
  string 255 label;
  Integer tilenr;

  WindowBegin("Local Machine",LocalMachineTClass,CGSbl,-);
  SetWRect(64,80,750,580);
  SetBlid(LocalMachineBlock);
  vs = 20; h = 190; v = 6;
  Tile(0,50,false,"",LocalMachineCode);
  EditField(h,v,60,"Code",Normal,LocalMachineCode,false,LocalMachineSClass);
  tilenr = 1;
  TileButton(tilenr,"Defaults"); tilenr = tilenr + 1;
  TileButton(tilenr,"Fonts"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    if (HasHotelInterface) then begin // Hotel
      TileButton(tilenr,"Hotel"); tilenr = tilenr + 1;
    end else begin
      TileButton(tilenr,"Res. Planning"); tilenr = tilenr + 1;
    end;
  end;
  TileButton(tilenr,"Integrations"); tilenr = tilenr + 1;
  TileButton(tilenr,"User Defined"); tilenr = tilenr + 1;
  TileButton(tilenr,"POS"); tilenr = tilenr + 1;
  TileButton(tilenr,"POS Appearance"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,515,false,tilenr,DefLocation); tilenr = tilenr + 1;
  h2=400;
  EditField(h,v,60,"Default Customer",Normal,DefCustCode,false,CUSClass);
  EditField(h2,v,60,"Branch",Normal,BranchID,false,CUBranchSClass);
  EditField(h,v+=vs,60,"Default Location",Normal,DefLocation,false,LocationSClass);
  EditField(h2,v,60,"Default Return Location",Normal,DefReturnLocation,false,LocationSClass);
  EditField(h,v+=vs,120,"Default Printer",Normal,DefPrinter,false,0);
  EditFieldTL(h,v+=vs,180,"Default Export Codepage",M4StrSet,Normal,89,DefExpCodepage,false,StrSetSClass);
//  EditField(h,v+=vs,100,"Printer",Normal,FiscalPrinter,false,SetSClass); used difrent way now afaik ,jj
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,60,"GMT Offset",Normal,GMTOffset,false,0);
  end;
  ButtonFrame(h2=30,vm=(v+=40),153,4,"Item Paste Special");
  RadioButton(h2,v,0,0,"System Default",ItemPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Without Classifications",ItemPasteSpecial);
  RadioButton(h2,v+=16,2,0,"With Classifications",ItemPasteSpecial);
  RadioButton(h2,v+=16,3,0,"No Coverflow",ItemPasteSpecial);

  ButtonFrame(h2=30,v+=40,153,3,"Acc. Class. Paste Special");
  RadioButton(h2,v,0,0,"System Default",AccClassPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Without Classifications",AccClassPasteSpecial);
  RadioButton(h2,v+=16,2,0,"With Classifications",AccClassPasteSpecial);

  ButtonFrame(h2=220,v=vm,153,4,"Mailbox Paste Special");
  RadioButton(h2,v,3,0,"Contact Relations",MailboxPasteSpecial);
  RadioButton(h2,v+=16,1,0,"Customers",MailboxPasteSpecial);
  RadioButton(h2,v+=16,2,0,"#Suppliers#",MailboxPasteSpecial);
  RadioButton(h2,v+=16,0,0,"Mailboxes/Conferences",MailboxPasteSpecial);

  if (StandardHansa==false) then begin
    ButtonFrame(h2,v+=40,153,3,"Activity Type Paste Special");
    RadioButton(h2,v,0,0,"System Default",ActTypePastePerClass);
    RadioButton(h2,v+=16,1,0,"Act. Type per Act. Class",ActTypePastePerClass);
    RadioButton(h2,v+=16,2,0,"#Favourite# Activity Types",ActTypePastePerClass);
  end;
  if (HasObjects) then begin
    ButtonFrame(h2=30,v+=40,153,3,"Tag/Object Paste Special");
    RadioButton(h2,v,0,0,"System Default",ObjectPasteSpecial);
    RadioButton(h2,v+=16,1,0,"Without Types",ObjectPasteSpecial);
    RadioButton(h2,v+=16,2,0,"With Types",ObjectPasteSpecial);
  end;

  CheckBox(h=400,v=vm,0,"Prompt when deleting",WarnOnDelete);
  CheckBox(h,v+=17,0,"Don't display Tool Tips",NoToolTips);
  CheckBox(h,v+=17,0,"Remove Background",NoBackGround);
  CheckBox(h,v+=17,0,"Wide Scroll Bars",WideScrollBars);
  CheckBox(h,v+=17,0,"No Server Mode when Idle",NoServerModeIdle);
  if (StandardHansa==false) then begin
    CheckBox(h,v+=17,0,"Enable offline Email",BackgroundMailSync);
    CheckBox(h,v+=17,0,"Enable offline Orders",BackgroundOrderSync);
    CheckBox(h,v+=17,0,"Auto Display Cust. Status on Incoming Calls",CustPSOnCall);
    //CheckBox(h,v+=17,0,"Approval Type Activity Window",ApprovalTypeActDClass);
  end;
  CheckBox(h,v+=16,0,"Chat Should Listen After Speech",ChatListenAfterSpeechFlag);

  if (GuiType==kGuiiPhone) then begin
    ButtonFrame(h2=30,v+=40,153,3,"Matrix Editing");
    RadioButton(h2,v,0,0,"Inline",MatEditing);
    RadioButton(h2,v+=16,1,0,"Expanding",MatEditing);
    //RadioButton(h2,v+=16,2,0,"New Window",MatEditing);
    EndFrame;
  end;

  Tile(tilenr,70,false,tilenr,entryFont); tilenr = tilenr + 1;
  v = 6; h = 210;
  EditField(h,v,-20,"Edit Font",Normal,entryFont,false,FontNameSClass);
  EditField(h,v+=vs,-20,"Report Font",Normal,reportFont,false,FontNameSClass);
  EditField(h,v+=vs,50,"Report Font Size",Normal,reportFontSize,false,0);
  if (GuiType==kGuiiPhone) then begin
    EditField(h,v+=vs,50,"Device Scale Factor",Normal,TabletScaleFactor,false,0);
  end;
  v = 6;
  if (StandardHansa==false) then begin
    if (HasHotelInterface) then begin // Hotel
      Tile(tilenr,100,false,tilenr,ResLoc); tilenr = tilenr + 1;
      EditField(h,v,60,"Room Location",Normal,ResLoc,false,ResLocSClass);
      EditField(h,v+=vs,150,"Room Classification",Normal,ResClass,false,ResClasSClass);
      EditField(h,v+=vs,60,"Locking System Encoder No.",Normal,LockSysEncoderNo,false,0);
    end else begin
      Tile(tilenr,50,false,tilenr,ResLoc); tilenr = tilenr + 1;
      EditField(h,v,60,"Resource Location",Normal,ResLoc,false,ResLocSClass);
      EditField(h,v+=vs,150,"Resource Classification",Normal,ResClass,false,ResClasSClass);
    end;
  end;
  Tile(tilenr,130,false,tilenr,SkypeInt); tilenr = tilenr + 1;
  // ButtonFrame(h,vm=(v=20),123,3,"Connect to Skype");
  // RadioButton(h,v,1,0,"Yes",SkypeInt);
  // RadioButton(h,v+=16,2,0,"No",SkypeInt);
  // RadioButton(h,v+=16,0,0,"Not decided yet",SkypeInt);

  ButtonFrame(h2=h,v,140,6,"Preferred Calling Method");
  RadioButton(h2,v,kPreferredCallingMethodNotDecided,0,"Not decided",PreferredCallingMethod);
  //RadioButton(h2,v+=16,kPreferredCallingMethodSkype,0,"Skype",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodAsterisk,0,"Asterisk",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethod3CX,0,"3CX",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodTAPI,0,"TAPI",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodSoftPhone,0,"Built-in",PreferredCallingMethod);
  RadioButton(h2,v+=16,kPreferredCallingMethodBria,0,"Bria",PreferredCallingMethod);
  ButtonFrame(h,v+=60,200,1,"Connect to GSX");
  EditField(h+100,v,80,"Ship-To Account",Normal,ShipToAccount,false,0);
  CheckBox(h,v+=30,0,"Beep fo_r each message",BeepOnMessage);
  if (HasItemClassification) then begin
    CheckBox(h,v+=16,0,"#Synchronise# Items and Prices for #Bar Tab#",SyncRecordforPOS);
    EditField(h,v+=vs,-40,"Item Class. for #Synchronising#",Normal,SyncINClass,false,DISClass);
  end;


  Tile(tilenr,300,false,tilenr,UserStr1); tilenr = tilenr + 1;
  v = 6;
  label = UserDefined("LocalMachineSetVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr1,false,0); v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr2,false,0); v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr3,false,0); v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr4,false,0); v = v + vs;
  end;
  label = UserDefined("LocalMachineSetVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v,-20,label,Normal,UserStr5,false,0); v = v + vs;
  end;
  Tile(tilenr,450,false,tilenr,Supervisor); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    EditField(h=220,v=6,60,"Supervisor",Normal,Supervisor,false,UserSClass);
    EditField(h,v+=20,60,"Bagger",Normal,Bagger,false,BaggerSClass);
    EditField(h,v+=vs,60,"Price List",Normal,PLCode,false,PLDefSClass);
  end else begin
    EditField(h=220,v=6,60,"Price List",Normal,PLCode,false,PLDefSClass);
  end;
  EditField(h,v+=vs,100,"Terminal ID",Normal,TerminalID,false,0);
  if (IsEnterprise or BuildProductCode=="PAYYAPERP") then begin    
    EditField(h,v+=vs,150,"#POS Button# Group",Normal,POSButtonGroup,false,POSButtonGroupsSClass);
    EditField(h+370,v,50,"Selected row Page",Normal,SelectRowPage,false,0);
  end;
  if (StandardHansa==false) then begin
    EditField(h,v+=20,150,"Fiscal Printer Elect. Journal Path",Normal,FiscalPrinterEJournalPath,false,0);
    EditField(h,v+=20,150,"Fiscal Printer Elect. Journal Path 2",Normal,FiscalPrinterEJournalPath2,false,0);
  end;
  if (HasModRest) then begin
    EditField(h,v+=20,150,"Table View",Normal,TableViewCode,false,TablesViewsSClass);
    EditField(h,v+=20,150,"#Bar Tab# Class",Normal,RestAccClass,false,RestAccClassSClass);
    if (HasItemClassification) then begin
      EditField(h,v+=vs,60,"Default #Restaurant# Item Class.",Normal,DefRestDisp,false,DISClass);
    end;
  end;
  if (HasModRest) then begin
    EditFieldTL(h,v+=vs,-20,"Kitchen Order Screen Department",M4Str,Normal,200,KitchenOrdScrDep,false,RestOrderDeptSClass);
    EditFieldTL(h,v+=vs,50,"Kitchen Order Screen Refresh Interval",M4Time,Normal,0,KitchenRefreshInt,false,PasteCurTime);  
    CheckBox(h,v+=20,0,"Detailed Kitchen Order Screen",KitchenOrdDetailed);  v = v - 4;
    CheckBox(h,v+=20,0,"One Active #Bar Tab#",OneBarTabWindow);
  end;
  EditField(h,v+=20,150,"Bluetooth Name",Normal,BluetoothName,false,0);
  EditField(h,v+=20,150,"Bluetooth MAC Addr",Normal,BluetoothMACAddr,false,0);
  EditField(h,v+=vs,150,"Set Codepage with ESC-POS Command",Normal,ESCPOSCodepage,false,0);
  CheckBox(h=30,vm=(v+=24),0,"Touch Screen Interface",TouchScreenLook);
//  CheckBox(h,v+=20,0,"iOS Vertical Touch Screen Interface",TouchScreenLook2);
  CheckBox(h=30,vm=(v+=24),0,"Item Pictures in POS Invoices",TouchScreenLookPicture);
  CheckBox(h,v+=16,0,"Use Cash Display",UseDisplay);
  CheckBox(h,v+=16,0,"Use Customer Display",UseCustomerDisplay);
  CheckBox(h,v+=16,0,"Open NumPad",UseNumPad);
  CheckBox(h,v+=16,0,"Paired",Paired);
  if (StandardHansa==false) then begin
    CheckBox(h=225,v=vm,0,"Default Bagger and Supervisor on POS Invoice",DefaulBaggerSupervisor);
    CheckBox(h,v+=16,0,"Show Bagger on POS Invoice",ShowBaggerSupervisor);
    CheckBox(h,v+=16,0,"Require #Authorisation# Code for Credit Card Payments",CCRequireAuthCode);
  end;
  CheckBox(h,v+=16,0,"Hide Quantity in POS Invoices and #Bar Tabs#",HideQty);
  CheckBox(h,v+=16,0,"Hide Item Code in POS Invoices and #Bar Tabs#",HideArtCode);
  CheckBox(h,v+=16,0,"Incremental Receipt Printing",IncrementalReceiptPrinting);
  if (HasLocalization("HRV")) then begin
    CheckBox(h,v+=16,0,"Send Fiscal Invoice (#S/L#)",SendFiscalInvoice);
  end;

  Tile(tilenr,490,false,tilenr,-); tilenr = tilenr + 1;

  StaticText(h=30,vm=(v=20),"POS Invoice",false);
  WindowLine(20,v+1,-20,v+1,kLineTypeGray);
  if (HasLocalization("ESP")) then begin
    ButtonFrame(h=30,vm=(v+=24),150,3,"Panel Size");
  end else begin 
    ButtonFrame(h=30,vm=(v+=24),100,3,"Panel Size");
  end;
  RadioButton(h,v,kPOSPanelSizeLarge,0,"Large",POSPanelSize);
  RadioButton(h,v+=16,kPOSPanelSizeMedium,0,"Medium",POSPanelSize);
  RadioButton(h,v+=16,kPOSPanelSizeSmall,0,"Small",POSPanelSize);
  ButtonFrame(h=225,v=vm,100,4,"Panel Font Size");
  RadioButton(h,v,0,0,"22",POSFontSize);
  RadioButton(h,v+=16,3,0,"30",POSFontSize);
  RadioButton(h,v+=16,1,0,"16",POSFontSize);
  RadioButton(h,v+=16,2,0,"11",POSFontSize);

  if(HasLocalization("ESP")) then begin
    EditField(h=150,v+=44,50,"Panel Font Size",Normal,PanelFontSize,true,0);
    EditField(h=350,v,50,"First Field Font Size",Normal,IVCashPOSDisplayFontSize1,true,0);
    EditField(h=550,v,50,"Second Field Font Size",Normal,IVCashPOSDisplayFontSize2,true,0);
  end else begin
    EditField(h=121,v+=44,50,"Panel Font Size",Normal,PanelFontSize,true,0);
    EditField(h=351,v,50,"First Field Font Size",Normal,IVCashPOSDisplayFontSize1,true,0);
    EditField(h=581,v,50,"Second Field Font Size",Normal,IVCashPOSDisplayFontSize2,true,0);
  end;
/*
  EditField(h,v+=30,50,"Font Size",Normal,PanelFontSize,true,0);
  EditField(h,v+=vs,50,"First Field Font Size",Normal,IVCashPOSDisplayFontSize1,true,0);
  EditField(h,v+=vs,50,"Second Field Font Size",Normal,IVCashPOSDisplayFontSize2,true,0);
*/
  ButtonFrame(h=360,v=vm,100,2,"Buttons Position");
  RadioButton(h,v,kPOSButtonsPositionLeft,0,"Left",POSButtonsPosition);
  RadioButton(h,v+=16,kPOSButtonsPositionRight,0,"Right",POSButtonsPosition);
  CheckBox(h,v+=54,0,"Enable Pictures on Buttons",POSShowButtonPictures);
  if (GuiType==kGuiAndroid) then begin
    CheckBox(h,v+=16,0,"Enable Matrix Header",EnableMatrixHeader);
  end;
  EditField(h=600,v=vm-10,50,"Button Width",Normal,POSButtonWidth,true,0);
  EditField(h,v+=vs,50,"Button Height",Normal,POSButtonHeight,true,0);
  EditField(h,v+=vs,50,"Label Font Size",Normal,POSLabelFontSize,true,0);
  EditField(h,v+=vs,50,"Label Font Size (WIN)",Normal,POSLabelFontSizeWIN,true,0);
  
  StaticText(h=30,v+=100,"Customer Display",false);
  WindowLine(20,v+1,-20,v+1,kLineTypeGray);
  if (HasLocalization("ESP")) then begin
    EditField(h=150,v+=44,50,"Panel Font Size",Normal,PanelFontSize,true,0);
    EditField(h=350,v,50,"First Field Font Size",Normal,IVCashPOSDisplayFontSize1,true,0);
    EditField(h=550,v,50,"Second Field Font Size",Normal,IVCashPOSDisplayFontSize2,true,0);
  end else begin
    EditField(h=121,v+=24,50,"Panel Font Size",Normal,CustomerDisplayFontSize,true,0);
    EditField(h=351,v,50,"First Field Font Size",Normal,CUDisplayFontSize1,true,0);
    EditField(h=581,v,50,"Second Field Font Size",Normal,CUDisplayFontSize2,true,0);
  end;
  if (HasLocalization("AUS,NZL")) then begin
    SpecialMenu("Pair with Smartpay",' ',1,"NZLSmartPayPairingTsm");
  end;
  if (HasLocalization("SVN")) then begin
//    SpecialMenu("Register Premise",' ',1,"SVNRegisterPremiseDsm");
  end;
  
  EndWindow;
end;

//
window INDClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  LongInt bm,lt,rt,tp;

  BlockLoad(CYb);
  WindowBegin("Item",INDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,950,400);
  end else begin
    SetWRect(20,80,830,400);
  end;
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  ActiveFieldOnNew("Name");
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Image");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
    Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433; h6 = -100;
  EditField(h,v, 150,"No.",Normal,Code,false,0);
  EditField(h2,v,80,"Group",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-120,"Description",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,310,"Alternative Code",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Basic info"); tilenr = tilenr + 1; //OBS
  TileButton(tilenr,"Pricing"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"#Jewellery#"); tilenr = tilenr + 1;
    TileButton(tilenr,"Watch"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"#Stock#"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Warehouse"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Recipe"); tilenr = tilenr + 1;
  TileButton(tilenr,"A/C"); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Image"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Varieties"); tilenr = tilenr + 1;
  TileButton(tilenr,"Texts"); tilenr = tilenr + 1;
  TileButton(tilenr,"Cost Model"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"User Values"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Notes"); tilenr = tilenr + 1;
  if (HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  if (HasEbayIntegration or HasAmazonIntegration or HasLocalization("NOR")) then begin
    TileButton(tilenr,"Web"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  CheckBox(h6,v=6,0,"Closed",Terminated);
  CheckBox(h6,v+=vs,0,"Not For Sales",NotForSales);
  CheckBox(h5+150,v,0,"Preparation of invoice",IVTemplatef);  //OBS
  //OBS--> 
  Tile(tilenr,209,false,tilenr,SeqOrderNr); tilenr = tilenr + 1;
  EditField(h,v=6,100,"Sequence No.",Normal,SeqOrderNr,false,0);
  EditField(h,v+=vs,100,"Premises field",Normal,FlatFieldCode,false,FlatFieldCodeSClass);
  EditField(h,v+=vs,100,"Erf field",Normal,BuildFieldCode,false,BuildFieldCodeSClass);
  EditFieldTL(h,v+=vs,100,"Period",M4Int,Normal,0,ServCycle,false,0);
  EditFieldTL(h,v+=vs,100,"Tariff",M4Int,Normal,10,Tariff,false,0);
  EditFieldTL(h,v+=vs,100,"Neg. item pay. prior.",M4Long,Normal,0,NegItemPayPr,false,INPayPrioritySClass);
  EditField(h,v+=vs,100,"Additional meter item",Normal,AdditCountersItem,false,INSClass); //OBS
  ButtonFrame(h1,v=24,160,4,"Service quant calculation");
  RadioButton(h1,v,0,0,"From premises",ServQuantInCalc);
  RadioButton(h1,v+=16,2,0,"From meter",ServQuantInCalc);
  
  CheckBox(h1,v+=26,0,"Levy charged on Toilet/Land/Improvement Value",CalcOnLandOrImp);
  // RadioButton(h1,v+=16,3,0,"Heat after load",ServQuantInCalc);
  // RadioButton(h1,v+=16,1,0,"Hot water after load",ServQuantInCalc);
//OBS<--
  
  if (GuiType==kGuiiPhone) then begin
    GetScreenSize(CurWindow,tp,lt,bm,rt);
    Pict_Field(5,v+=20,rt-10,bm-10,"");
  end;
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Unit",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Cost Price",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Base Price",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Base Price Change",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Price Factor",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100,"Item Formula",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Markup %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Bonus %",Normal,Bonus,true,0);
  EditField(h,v+=vs,310,"Tags/Objects",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
    EditField(h,v+=vs,310,"Classification",Normal,DispGroups,false,DISClass);
  end;
  if (HasAvalara) and (HasLocalization("BRA")) then begin
    EditField(h,v+=vs,100,"Taxable Unit Price",Normal,TaxableUnitPrice,true,0);
  end;
  if (StandardHansa==false) then begin
    ButtonFrame(h1,v=24,120,4,"Item Type");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Item Type");
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Plain",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"#Stocked#",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Structured",ItemType);
  if (StandardHansa==false) then begin
    RadioButton(h1,v+=16,kItemTypeService,0,"Service",ItemType);
  end;
  EndFrame;
  
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Add picture");
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1,v+=32,0,"Treat Item as Material on Project",ItemMaterial);
    vs = 16;
  end else begin
    vs = 32;
  end;
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    CheckBox(h1,v+=vs,0,"Split Payment Item",SplitPayment);
  end;
  vs = 20;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metal",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Weight",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Size",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Length",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Reference",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Major Stone Detail",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"#Colour#",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Clarity",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Certificate",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Minor Stone Detail",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Watch Brand",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Style Name",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Watch Metal",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Movement",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Bracelet/Strap",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Gender",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Other",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Other2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serial Number Tracking");
  RadioButton(h1,v,0,0,"None",SerNrf);
  RadioButton(h1,v+=16,1,0,"Unit Number",SerNrf);
  RadioButton(h1,v+=16,2,0,"Batch Number",SerNrf);
  CheckBox(h6=550,v,0,"Do not Require Batch No. on POS Invoice",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Minimum Level",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maximum Level",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Department",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Shelf Code",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Default Source",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Environment Tax per #Kilo#",Normal,RepaPricePerWeight,true,0);
  EditField(655,v ,80,"Default Order Type",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Hazard Level",Normal,HazLevCode,false,HazLevSClass);
    EditField(h5,v ,50,"Alcohol %",Normal,AlcPrc,true,0);
    if (HasLocalization("PRT")) then begin
      EditField(h6,v, 80,"Stock Item Type",Normal,StockItemType,false,SetSClass);
    end;
  end;
  EditField(h,v+=vs ,100,"Unit 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Conversion 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Unit Coefficient",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Conversion 2",Normal,Conversion2,true,0);
  if (HasAvalara) and (HasLocalization("BRA")) then begin
    EditField(h,v+=vs,100,"Use Type",Normal,UseType,false,StrSetSClass);
    CheckBox(h6,v,0,"Relevant Scale",RelevantScale);
    CheckBox(h6,v+=vs,0,"Transport ICMS Withheld",TransportICMSWithheld);
    EditField(h2,v,100,"Description",Normal,ScaleInfoForIcmsSt,false,0);
    EditField(h,v,100,"Product Type",Normal,ProductType,false,StrSetSClass);
    EditField(h2,v+=vs,100,"Merchandise Tax ID",Normal,MerchandiseTaxID,false,0);
    EditField(h,v,100,"Seal Code",Normal,SealCode,false,0);
    StaticText(305,v-30, "Scale Info",false);
  end;
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Tihedus",Normal,Density,true,0);
    EditField(h5,v ,50,"Weight",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
    Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6) ,100,"Default Pallet Item",Normal,DefPalletItem,true,INSClass);
    EditField(h5,v ,50,"Picking Area",Normal,PickArea,false,LocAreaSClass);
    EditField(h,v+=vs ,100,"Default Location Area",Normal,LocArea,false,LocAreaSClass);
    EditField(h5,v ,50,"Pallets In Picking Area",Normal,PalletsInPickArea,true,0);
    EditField(h,v+=vs ,50,"Max. Qty on Pallet",Normal,QtyonPallet,true,0);
    EditField(h4,v ,50,"Pallet Layers",Normal,PalletLayers,true,0);
    EditField(h5,v ,50,"Qty per Layer",Normal,QtyonPalletLayer,true,0);
    EditField(h,v+=vs ,50,"Full Pallet Width",Normal,PalletWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,PalletHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,PalletDepth,true,0);
    EditField(h,v+=vs ,50,"Default Position Width",Normal,DefPosWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,DefPosHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,DefPosDepth,true,0);
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Density",Normal,Density,true,0);
    EditField(h5,v ,50,"Net Weight",Normal,NetWeight,true,0);
    EditField(h5,v+=vs ,50,"Weight",Normal,Weight,true,0);
    if (HasAvalara) and (HasLocalization("BRA")) then begin
      EditField(h,v,50,"Fixed Insurance Amount",Normal,FixedInsuranceAmount,true,0);
    end;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6),100,"Cost Price",Normal,InPrice,true,0);
    if (StandardHansa==false) then begin
      EditField(h5,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
    end else begin
      EditField(h3,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
    end;
    if (StandardHansa==false) then begin
      EditField(h,v+=vs ,100,"Cost Price in Base 2",Normal,InPriceB2,true,0);
      ButtonFrame(h1,v+=24,200,4,"Upd. Cost Price at Goods Receipt");
    end else begin
      ButtonFrame(h1,v+=40,210,4,"Upd. Cost Price at Goods Receipt");
    end;
    RadioButton(h1,v,0,0,"No",UpdateCost);
    RadioButton(h1,v+=16,1,0,"Last Purchase Cost (incl. extras)",UpdateCost);
    RadioButton(h1,v+=16,2,0,"Weighted Average",UpdateCost);
    RadioButton(h1,v+=16,3,0,"Last Purchase Cost (excl. extras)",UpdateCost);
    ButtonFrame(h5=540,v=v-3*16,200,3,"Upd. Cost Price at #Stock# Revaluation");
    RadioButton(h5,v,0,0,"No",SRUpdateCost);
    RadioButton(h5,v+=16,1,0,"Last Revaluation Cost",SRUpdateCost);
    RadioButton(h5,v+=16,2,0,"Weighted Average",SRUpdateCost);
    if (StandardHansa==false) then begin
      EditField(h,v=vm+2*vs,100,"Extra Cost",Normal,ExtraCost,true,0);
    end else begin
      EditField(h,v=vm+vs,100,"Extra Cost",Normal,ExtraCost,true,0);
    end;
    EditField(h,v+=vs ,100,"Weighted Average",Normal,WeighedAvPrice,true,0);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs ,100,"Weighted Av., Base 2",Normal,WeighedAvPriceB2,true,0);
    end;
    EditField(h,v+=vs ,100,"Last Pur. Cost (incl. extras)",Normal,LastPurchPrice,true,0);
    EditField(h,v+=vs ,100,"Last Pur. Price (excl. extras)",Normal,LastPurchPrice2,true,0);
    EditField(h,v+=vs ,100,"Last Purchase Currency",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
    EditField(h,v+=vs ,100,"Fixed Freight",Normal,FixedFreight,true,0);
    CheckBox(h1,v,0,"Include Item Fixed Charge",InclItemFreight);
    CheckBox(h5,v,0,"Has Excise",HasExcise);
    if (HasAvalara) and (HasLocalization("BRA")) then begin
       EditField(h,v+=vs ,100,"Returned % Amount",Normal,ReturnedPercentageAmount,true,0);
    end;
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Recipe",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Paste Components during Entry",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Invoice Recipe",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Barcode",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Contract Item",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Commodity Code",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Rental Invoicing",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"EKN Code",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Classification of Products and Services",Normal,CPSCode,false,0);
  end;
  if (HasLocalization("LVA")) then begin
    EditField(h,v+=vs,55,"Fiscal Department",Normal,FiscalDep,false,0);
  end;
  EditField(h,v+=vs ,120,"Warranty Months",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"#Colour#",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Sort Code",Normal,SortCode,true,0);
  EditField(h,v+=vs,-40,"#Alternative Code#",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Warning",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"#Dom.# Sales A/C",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,55,"Serv. Invble Sales A/C",Normal,SVOInvbleSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Components Usage",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. Materials Usage A/C",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  if (HasAvalara) and (HasLocalization("BRA")) then begin
    EditField(h,v+=vs,55,"HS Code",Normal,HSCode,false,0);
    EditField(h,v+=vs,55,"HS Code EX",Normal,HSCodeEX,false,0);
    EditField(h,v+=vs,55,"Tax Sub Code ",Normal,TaxSubCode,false,0);
    EditField(h,v+=vs,55,"GTIN Number",Normal,GTINNumber,false,0);
    EditField(h,v+=vs,55,"GTIN Number(Tax)",Normal,GTINNumberTax,false,0);
    EditField(h,v+=vs,55,"NCM Ext. Code",Normal,NCMExtCode,false,0);
    EditField(h,v+=vs,55,"Unit IPI Factor",Normal,UnitIPIFactor,false,0);
    EditField(h,v+=vs,55,"Unit ICMS Factor",Normal,UnitICMSFactor,false,0);
    EditField(h,v+=vs,55,"Unit ICMS St. Factor",Normal,UnitICMSStFactor,false,0);
    EditField(h,v+=vs,55,"Unit PISCOFINS Factor",Normal,UnitPISCOFINSFactor,false,0);
    EditField(h,v+=vs,55,"Comex Tax Unit Factor",Normal,ComexTaxUnitFactor,false,0);
    EditField(h,v+=vs,55,"IIEX Tax Code",Normal,IIEXTaxCode,false,0);
    EditField(h,v+=vs,55,"Taxable Unit Qty",Normal,TaxableUnitQty,false,0);
    EditField(h,v+=vs,55,"Service Code",Normal,ServiceCode,false,0);
    EditField(h,v+=vs,55,"Service Code Origin",Normal,ServiceCodeOrigin,false,0);
    EditField(h,v+=vs,55,"AFRMM Value",Normal,AFRMMValue,false,0);
    EditField(h,v+=vs,55,"Avalara Tax Code",Normal,AvalaraTaxCode,false,0);
    EditField(h,v+=vs,55,"ISS Retain",Normal,ISSRetain,false,StrSetSClass);
    EditField(h,v+=vs,55,"CNAE",Normal,CNAE,false,0);
    CheckBox(h+150,v,0,"Item Value Does Not Compose Invoice Total Value",ItemValNotComposeInvTotalVal);
    CheckBox(h+150,v+=vs,0,"Labour outsourcing",LaborAssignment);
    CheckBox(h+150,v+=vs,0,"Manufacturer Equivalent",ManufactorerEquivalent);
  end;
  if (HasNobbIntegration) then begin
    EditField(h,v+=vs,55,"GTIN Number",Normal,GTINNumber,false,0);
  end;
  EditField(h2=360,v=vm,55,"#Dom.# Cost A/C",Normal,CostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,VATZoneNameENG & "Cost A/C",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Export Cost A/C",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,55,"Serv. Invble Cost A/C",Normal,SVOInvbleCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Warranty Cost A/C",Normal,SVOWarrantyCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Contract Cost A/C",Normal,SVOContractCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Goodwill Cost A/C",Normal,SVOGoodwillCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Hotel WIP A/C",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=540,v=vm,45,"#Dom.# #VAT# Code",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,45,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,45,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
  if (HasExtTax) then begin
    CheckBox(h2,v+=20,0,"Calculate Perception Taxes",Perceptions);
  end;
  if (StandardHansa==false) then begin
    if (HasWithholdingTax) then begin
      CheckBox(h2,v+=16,0,"Calculate Withholding Taxes",Withholdings);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      EditField(h2=715,v=vm,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabel_ENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    v = vm; h2=700;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(h2+14,v+60,45,"Reverse #VAT# Code",Normal,RvrsVATCode,false,VATCodeSClass); v = v + vs;
    end;
    if (HasLocalization("SWE")) then begin
      EditField(h2,v,45,"Chemical Tax Code",Normal,ChemicalTaxCode,false,ChemicalTaxCodeSClass); v = v + vs;
    end;
    if (HasLocalization("ITA")) then begin
      EditField(h2,v=vm,55,"Fiscal Department",Normal,FiscalDep,false,0);
    end;
  end;
  if (HasLocalization("POL")) then begin
    EditField(h2,v,45,"#VAT# Group",Normal,VATGroup,false,VATGroupSClass); v = v + vs;
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Variety Mask",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Report Order",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Subsets",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Language",0,LangCode,false,LangSClass);
  MatCol(1,94,"Text",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Primary Cost Model");
  RadioButton(h,v,0,0,"Default",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Cost Price",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _of Base Price",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Weighted Average",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Queued",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"None",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Queued Cost Model");
  RadioButton(h,v,0,0,"Default",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO Price",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO Price",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Cost Price for Serial Number");
  RadioButton(h2,v,0,0,"Default",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Cost Price not for Serial Number",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Cost Price for Serial Number",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Queued Cost Model per Location");
  RadioButton(h2,v,0,0,"Default",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Queued Cost not per Location",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Queued Cost per Location",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"WA per Location");
  RadioButton(h2,v,0,0,"Default",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"WA not per Location",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"WA per Location",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Cost Price per Location");
  RadioButton(h2,v,0,0,"Default",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Cost Price not per Location",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Cost Price per Location",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
    h = 180; v = 6;
    label = UserDefined("INVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("INVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("INVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("INVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("INVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("INVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
    end;
    label = UserDefined("INVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
    end;
    label = UserDefined("INVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
    end;
    label = UserDefined("INVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
    end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Notes",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,430,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
    ColourPushButton(17,400,300,420,"LaunchFlexBI","Try flex.bi for more detailed analytics",kButtonColourBabyBlue);
  end;
  if (HasNobbIntegration or HasEbayIntegration or HasAmazonIntegration or HasLocalization("NOR")) then begin
    Tile(tilenr,430,false,tilenr,-); tilenr = tilenr + 1;
    h = 155; v = 6;
    if (HasEbayIntegration) then begin
      EditField(h,v,100,"eBay Location",Normal,EbayLocation,false,LocationSClass); v = v + vs;
      //CheckBox(h1,v,0,"Sell on eBay",SyncToEbay); v = v + vs;
    end;
    if (HasAmazonIntegration) then begin
      EditField(h,v,100,"Amazon SKU",ViewOnly,AmazonSKU,false,0); v = v + vs;
      CheckBox(h,v,0,"Listed on Amazon",SyncToAmazon); v = v + vs;
    end;
    if (HasNobbIntegration) then begin
    EditField(h,v,100,"NOBB Module",Normal,NobbModule,false,NobbModuleSClass); v = v + vs;
      EditField(h,v,100,"NOBB Number",ViewOnly,NobbNumber,false,0); v = v + vs;
    end;
  end;
  if (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status Report",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Recalculate Price List",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    SpecialMenu("Item History",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Item Location Status",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status per Alternative Code",'S',5,"ItemStatusAltINDsm");
  end;
  if (HasAmazonIntegration) then begin
    SpecialMenu("Register Item on Amazon",' ',0,"AmazonMWSSendItemLsm");
    SpecialMenu("Update Stock on Amazon",' ',0,"AmazonMWSUpdateStockSingleItemDsm");
    SpecialMenu("Update Price on Amazon",' ',0,"AmazonMWSUpdatePriceSingleItemDsm");
  end;
  if (HasEbayIntegration) then begin
    SpecialMenu("Register Item on eBay",' ',6,"EbayCreateOrReplaceInventoryItemLsm");
    SpecialMenu("Delete Item from eBay",' ',6,"EbayDeleteInventoryItemLsm");
    SpecialMenu("List of eBay Offers",' ',7,"EbayGetOffersDsm");
  end;
  if (HasNobbIntegration) then begin
    SpecialMenu("Register NOBB Item",' ',6,"RegisterNobbItemLsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Purchase Item",' ',1,"PIFromINDsm");
  SpecialMenu("Recipe",' ',2,"RecFromINDsm");
  if (HasModIN) then begin
    SpecialMenu("Goods Receipt",' ',0,"PUFromINsm");
    SpecialMenu("Stocktaking",' ',0,"StockTakeFromINsm");
  end;
  EndWindow;
end;

window CUDClass:14
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,h5,h6,l,v,vm,vm2,vs,h7;
  string 255 label;
  record CUVc CUr;
  Integer wn,tilenr;
  record ModuleBlock Modb;

  BlockLoad(Modb);
  WindowBegin("Contact",CUDClass,CGview,-);
  DynamicWindow;
  SetWRect(20,80,850,441);
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  FormName(PrintCUD);

  wn = CurWindow;
  if (wn>0) then begin
    if (GetWindowClass(wn)=="CUDClass") then begin
      GetWindowRecord(wn,CUr);
    end;
  end;

  if (HasLocalization("EST,GBR,LTU,LVA,NOR,POL,FIN")) then begin
    ActiveFieldOnNew("Code"); // dont change, otherwise automatic address lookup helper window wont show automatically //wns
                              // this should not be based on localization, but rather on if the
                              // address lookup is enabled, erik
  end else begin
    ActiveFieldOnNew("Name");
  end;
  if (HasMetroTestFeatures or GUIType!=kGUIMetro) then begin
    CommunicateButton;
  end;
  if (HasJewelleryInterface) then begin
    Tile(0,155,false,"",Code);
  end else begin
    Tile(0,95,false,"",Code);
  end;
  v = 6; h = 130; l=223; vs = 20; h1=410; h2 = 355; h3 = 430; h4 = 580; h5 = 460;
  // EditField(h,v ,   95,"No.",Normal,Code,false,TSerSClass);
  EditField(h,v ,   95,"No.",Normal,Code,false,0);
  EditField(h1,v,50,"Customer Category",Normal,CustCat,false,CCatSClass);
  EditField(h,v+=vs,95,"Short",Normal,SearchKey,false,0);
  EditField(h1,v,50,"#Supplier# Category",Normal,VECat,false,VGSClass);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,95,"Title",Normal,Salutation1,false,0);
    EditField(h1,v,50,"Suffix",Normal,ANACode,false,0);
    EditField(h,v+=vs,h1-h+50,"First Name",Normal,Salutation2,false,0);
    EditField(h,v+=vs,h1-h+50,"Last Name",Normal,Salutation3,false,0);
    EditField(h,v+=vs,h1-h+50,"Display Name",Normal,Name,false,0);
  end else begin
    EditField(h,v+=vs,h1-h+50,"Name",Normal,Name,false,0);
    if (HasLocalization("BRA")) then begin
      EditField(h,v+=vs,h1-h+50,"Business Name",Normal,BusinessName,false,0);
    end;
  end;

  CheckBox(h1+80,v=6,0,"C_ustomer",CUType);
  CheckBox(h1+80,v+=16,0,"#Supplier#",VEType);
  if (HasModHotel) then begin
    CheckBox(h1+80,v+=16,0,"Guest",GuestType);
  end;
  if (HasJewelleryInterface) then begin
    CheckBox(h1+80,v+=16,0,"No Mass Letters",NoLetterPosting);
    CheckBox(h1+80,v+=16,0,"No Mass Emailing",NoMailPosting);
    EditField(h1+120,v+=20,100,"Salesman",Normal,SalesMan,false,UserSClass);
  end;
  v=6;
  if (HasModHRM or IsEnterprise) then begin
    CheckBox(h1+180,v,0,"Employee",EmployeeType); v = v + 16;
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1+180,v,0,"Dealer",DealerType);
  end;
  CheckBox(h1+180,v+=16,0,"Lead",LeadType);
  CheckBox(h1+280,v=6,0,"Branch",BranchType);
  if (HasLocalization("POL")) then begin
    CheckBox(h1+280,v+=16,0,"Connected Company",ConnectedCompType);
    CheckBox(h1+280,v+=16,0,"Farmer",FarmerType);
  end;
  if (HasModLearn) then begin
    CheckBox(h1+280,v+=16,0,"Student",StudentType);
    CheckBox(h1+280,v+=16,0,"Teacher",TeacherType);
  end;
  if (HasLocalization("EST")) then begin
    CheckBox(h1+280,v+=16,0,"E-Invoice Receiver",EInvReceiverFlag);
  end;

//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"CreditInfoCUDsm","Credit Info");
//  HalPushButton(h1+170,v=10,h1+170+100,v+20,"UpdCustomerAddressCUDsm","Update Address");
  tilenr = 1;
  TileButton(tilenr,"Co_ntact"); tilenr = tilenr + 1;
  TileButton(tilenr,"Delivery"); tilenr = tilenr + 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Pricing"); tilenr = tilenr + 1;
  TileButton(tilenr,"Compan_y"); tilenr = tilenr + 1;
  TileButton(tilenr,"Accounts"); tilenr = tilenr + 1;
  TileButton(tilenr,"E-Records"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Web"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"C_omments"); tilenr = tilenr + 1;
  if (true) then begin//HasModHotel
    TileButton(tilenr,"Personal"); tilenr = tilenr + 1;
  end;
  if (StandardHansa==false) then begin
    if (GuiType==kGuiMetro) then begin//UGLY
      TileButton(tilenr,"Other"); tilenr = tilenr + 1;
    end else begin
      TileButton(tilenr,"User Defined"); tilenr = tilenr + 1;
    end;
  end;
  TileButton(tilenr,"Notes"); tilenr = tilenr + 1;
  if (CUr.CUType!=0 and HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,290,true,tilenr,InvAddr0); tilenr = tilenr + 1;
  v=6;
  h6 = h+120;
  HalPushButton(h6,v,h6+100,v+20,"UpdCustomerAddressCUDsm","Update Address");
  h6 = h6 + 130;
  // if (VATLawIsEU) then begin
    // HalPushButton(h6,v,h6+150,v+20,"CheckEUVATNumberCUDsm","Check EU #VAT# Number ");
  // end;
  if (HasLocalization("FIN")) then begin
    h6 = h6 + 180;
    HalPushButton(h6,v,h6+180,v+20,"UpdCUPrepRegDateDsm","Check Prepayment Reg. Status");
  end;
  v=v+10;
  StaticText(h,v+13,"Invoice Address",false);
  label = UserDefined("CUVc","InvAddr0");
  EditField(h,v+=vs,-20,label,Normal,InvAddr0,false,0);
  label = UserDefined("CUVc","InvAddr1");
  EditField(h,v+=vs,-20,label,Normal,InvAddr1,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs,-20,label,Normal,InvAddr2,false,0);
  label = UserDefined("CUVc","InvAddr3");
  if (HasLocalization("BRA") and HasAvalara) or (HasLocalization("PRY")) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr3,false,0);
    EditField(h1,v,-20,"City Code",Normal,AvalaraCityCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,InvAddr3,false,0);
  end;
  label = UserDefined("CUVc","InvAddr4");
  if (HasLocalization("BRA") and HasAvalara) or (HasLocalization("PRY")) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr4,false,0);
    EditField(h1,v,-20,"State Code",Normal,AvalaraStateCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,InvAddr4,false,0);
  end;
  EditField(h,v+=vs,50,"Country",Normal,CountryCode,false,CountrySClass);
  if (HasLocalization("BRA") and HasAvalara) or (HasLocalization("PRY")) then begin
    EditField(h1,v,-20,"Country Code",Normal,AvalaraCountryCode,false,0);
  end;
  if (HasLocalization("BRA")) or (HasLocalization("PRY")) then begin 
    EditField(h2-159,v,85,"",ViewOnly,InvCountryName,false,0);
    v = v + vs;
  end;  
  EditField(h1,v,-20,"Department",Normal,Department,false,0);
  EditField(h,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h1,v,-20,"Fax",Normal,Fax,false,0);
  EditField(h,v+=vs,150,"Alt Phone",Normal,AltPhone,false,0);
  EditField(h1,v,-20,"#Mobile#",Normal,Mobile,false,0);
  EditField(h,v+=vs,150,"Skype Name",Normal,SkypeName,false,0);
  EditField(h1,v,-20,"SIP",Normal,SIPCode,false,0);
  EditField(h,v+=vs,150,"Email",Normal,eMail,false,0);
  EditField(h1,v,-20,"Extension",Normal,Extension,false,0);
  EditField(h,v+=vs,150,"Primary Contact",Normal,Person,false,ContactSClass);
  EditField(h1,v,-20,"Website",Normal,wwwAddr,false,0);  
  EditField(h,v+=vs,-20,"Classification",Normal,Classification,false,CClassSClass);
  if (HasLocalization("CHN")) then begin
    EditField(h,v+=vs,150,"QQ Account Number",Normal,QQName,false,0);
    EditField(h1,v,-20,"Weibo Account Number",Normal,WeiboName,false,0);
  end;
  RecordList2(10,v+=40,-30,-39,"ContactRelVc");
  RlColKey(4,4,"Code",ContactCode,false,ActCustContactCode);
  RlCol(70,70,"Title",ContactTitle,false);
  RlColKey(115,115,"Name",ContactName,false,ActCustContactName);
  RlCol(245,245,"Phone",ContactPhone,false);
  RlCol(345,345,"#Mobile#",ContactMobile,false);
  RlCol(445,445,"Job Title",JobTitle,false);
  RlCol(535,535,"Email",ContacteMail,false);
//  RlCol(-1,-1,"",Invalid,true);
  Tile(tilenr,240,false,tilenr,DelAddr0); tilenr = tilenr + 1;
  v=6;
  if (HasLocalization("CAN,GBR,LVA,EST,SWE,USA")) then begin
    HalPushButton(h+120,v,h+120+100,v+20,"UpdDeliveryAddressCUDsm","Update Address");
  end;
  v=v+12;
  StaticText(h,v+13,"Delivery Address",false);
  label = UserDefined("CUVc","DelAddr0");
  EditField(h,v+=vs,-20,label,Normal,DelAddr0,false,0);
  label = UserDefined("CUVc","DelAddr1");
  EditField(h,v+=vs,-20,label,Normal,DelAddr1,false,0);
  label = UserDefined("CUVc","DelAddr2");
  EditField(h,v+=vs,-20,label,Normal,DelAddr2,false,0);
  label = UserDefined("CUVc","DelAddr3");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,245,label,Normal,DelAddr3,false,0);
    EditField(h3+50,v,-20,"City Code",Normal,DelAvalaraCityCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,DelAddr3,false,0);
  end;
  label = UserDefined("CUVc","DelAddr4");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,245,label,Normal,DelAddr4,false,0);
    EditField(h3+50,v,-20,"State code",Normal,DelAvalaraStateCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,DelAddr4,false,0);
  end;
  EditField(h,v+=vs,50,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h3+50,v,-20,"Country Code",Normal,DelAvalaraCountryCode,false,0);
  end;
  if (HasLocalization("BRA")) then begin 
    EditField(h2-159,v,180,"",ViewOnly,DelCountryName,false,0);
    if (HasAvalara) then begin
      EditField(h,v+=vs,200,"Phone",Normal,DelPhone,false,0);
      EditField(h3+50,v,-20,"Email",Normal,DelEmail,false,0);
    end;
    v = v + vs;
  end;    
  EditField(h2+50,v,-20,"Order Comment",Normal,OrderComment,false,0);
  EditField(h,v+=vs,120,"Freight No.",Normal,FreightNr,false,0);
  EditField(h2+50,v,70,"Region",Normal,Region,false,RegionSClass);
  EditField(h,vm=(v+=vs),120,"Sales Del. Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h2+50,v,70,"Purchase Del. Terms",Normal,VEShipDeal,false,ShipDealSClass);
  EditField(h,v+=vs,120,"Sales Del. Mode",Normal,ShipMode,false,DMSClass);
  EditField(h2+50,v,70,"Purchase Del. Mode",Normal,VEShipMode,false,DMSClass);
  EditField(h,v+=vs,120,"Route",Normal,Sorting,false,DelRouteSClass);
/* these fields were used for securities trading, this module doesnt exist in hansa anymore */
/* Two of these fields are used in Russia and Ukraine */
//  EditField(h,vm=(v+=vs),120,"Securities Acc.",Normal,SecAccount,false,0);
//  EditField(h,v+=vs,120,"Bank Account",Normal,BankAccount,false,0);//xx
//  EditField(h,v+=vs,120,"Account Operator",Normal,AccOperator,false,BankSClass);//xx
//##  EditField(h,v+=vs ,70, "Com. Matrix",Normal,ComCode,false,ComSClass);
  ButtonFrame(h5+30,v=vm,150,2,"Delivery Date Based On");
  RadioButton(h5+30,v,0,0,"Current Date",DeliveryBasedOn);
  RadioButton(h5+30,v+=16,1,0,"Planned Delivery Date",DeliveryBasedOn);
  Tile(tilenr,190,false,tilenr,PayDeal); tilenr = tilenr + 1;
  EditField(h,v=6,80,"Sales Pay. Terms",Normal,PayDeal,false,PDSClass);
  EditField(h,v+=vs,80,"Sales Credit Limit",Normal,CreditLimit,true,0);
  EditField(h,v+=vs,80,"Sales Credit Limit Days",Normal,CreditLimitDays,false,0);
  EditField(h,v+=vs,80,"Their #Supp.# Code",Normal,TheirCode,false,0);
  EditField(h,v+=vs,80,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
//  EditField(h,v+=vs,80,"E-Invoice Address",Normal,ANACode,false,0);
  EditField(h,v+=vs,80,"Expected Late Payment",Normal,ExpLatePayment,false,0); //
  
  EditField(h,v+=vs,80,"Interest Rate",Normal,IntRate,false,0);
  EditField(h,v+=vs,80,"Creation Date",ViewOnly,DateCreated,false,0);
  EditField(h,v+=vs,80,"Main Partner",Normal,MainPartner,false,CUSClass);
  EditField(h2,v=6,80,"Purch. Pay. Terms",Normal,VEPayDeal,false,PDSClass);
  EditField(h2,v+=vs,80,"Purch. Credit Limit",Normal,VECreditLimit,true,0);
  EditField(h2,v+=vs,80,"Purch. Credit Limit Days",Normal,VECreditLimitDays,false,0);
  EditField(h2,v+=vs,80,"Their Customer Code",Normal,VECustID,false,0);
  EditField(h2,v+=vs,80,"Purch. Invoice From",Normal,VEInvoiceToCode,false,VESClass);
  EditField(h2,v+=vs,80,"Factoring",Normal,VEFactoring,false,VESClass);
  EditField(h2,v+=vs,80,"Min. Order Sum",Normal,MinOrdSum,false,0);
  EditField(h2,v+=vs,80,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,80,"Last Changed",Normal,DateChanged,false,0);
  if ((HasLocalization("BRA") and HasAvalara)) then begin
    EditField(h,v+=vs,80,"COFINS",Normal,COFINS,false,StrSetSClass);
    EditField(h2,v,80,"CSLL",Normal,CSLL,false,StrSetSClass);
    EditField(h,v+=vs,80,"PIS",Normal,PIS,false,StrSetSClass);
    EditField(h2,v,80,"Simples Regime RF Rate",Normal,SimplRegimeRFRate,false,0);
    EditField(h2,v+=vs,80,"ICMS Rate for Simplified Tax Regime",Normal,ICMSRateSimplTaxRegime,false,0);
    EditField(h2,v+=vs,80,"Entity ICMS St Substitute",Normal,EntityICMSSubstitute,false,StrSetSClass);
  end;
  CheckBox(h5,v=12,0,"Closed",blockedFlag);
  CheckBox(h5,v+=16,0,"On Hold",OnHoldFlag);
  CheckBox(h5,v+=16,0,"Reminders",RemndrFlag);
//  CheckBox(h5,v+=16,0,"Collection",ColectionFlag);
  CheckBox(h5,v+=16,0,"Interest",InterestFlag);
  CheckBox(h5,v+=16,0,"On Account",OnAccount);
  if (HasPayLinkTransactions) then begin
    CheckBox(h5,v+=16,0,"Enable PayLink",PayLinkFlag);
  end;
  if (StandardHansa==false) then begin
    CheckBox(h5,v+=16,0,"No Factoring",NoFactoringFlag);
    CheckBox(h5,v+=16,0,"No Extra Tax",NoTax1);
    CheckBox(h5,v+=16,0,"Group Inv. Only",GroupInv);
    CheckBox(h5,v+=16,0,"Self Billing",SelfBilling);
    CheckBox(h5,v+=16,0,"Invoice in e-mail",BBSPDFPrint); //OBS
    if ((HasLocalization("BRA") and HasAvalara)) then begin
      CheckBox(h5,v+=16,0,"Is ICMS St Substitute",IsICMSSubstitute);
      CheckBox(h5,v+=16,0,"ICMS Tax Payer",ICMETaxPayer);
      CheckBox(h5,v+=16,0,"Calculate INSS CPRB",CalculateINSSCPRB);
      CheckBox(h5,v+=16,0,"PIS on Payroll",PISOnPayroll);
      CheckBox(h5,v+=16,0,"Subject to Payroll Tax Relief",PayrollTaxRelief); 
      CheckBox(h5,v+=16,0,"Purchase on Free Zones PISCOFINS non cumulative rate",PurchPISCOFINSNonCumRate);
      CheckBox(h5,v+=16,0,"Apply tax relief for outbound to Free Zone",TaxRelief);
      CheckBox(h5,v+=16,0,"Use INSS CPRB to calculate gross value",UseINSSCPRB);
      CheckBox(h5,v+=16,0,"Withhold Payments from Federal Public Agency",WithholdPayments);
      CheckBox(h5,v+=16,0,"Force Withholding of ICMS on Transport Amount",WithholdICMSOnTransport);
      CheckBox(h5,v+=16,0,"Reduce the ICMS tax amount from PIS and COFINS",ICMSTaxAmtReduction);
      CheckBox(h5,v+=16,0,"Support Buyer Tax Liability for Federal Withholdings of CSLL",SBTXLFedWithholdingsCSLL);
      CheckBox(h5,v+=16,0,"Support Buyer tax Liability for Federal Withholdings of COFINS",SBTXLFedWithholdingsCOFINS);
      CheckBox(h5,v+=16,0,"Support Buyer Tax Liability for Federal Withholdings of PIS",SBTXLFedWithholdingsPIS);
      CheckBox(h5,v+=16,0,"Support Buyer Tax Liability for Federal Withholdings of IRRF",SBTXLFedWithholdingsIRRF);
      CheckBox(h5,v+=16,0,"Support Buyer Tax Liability for Federal Withholdings of INSS",SBTXLFedWithholdingsINSS);
      CheckBox(h5,v+=16,0,"Support Buyer Tax Liability for Federal Withholdings of ISS",SBTXLFedWithholdingsISS);
    end;
    if (HasLocalization("SWE")) then begin
      CheckBox(h5,v+=16,0,"Approved for Chemical Storage",ChemicalStorageApproved);
    end;
    if (HasLocalization("DEN")) then begin
      v = 16;
      CheckBox(h4,v,0,"EGO Customer",EGOFlag); v =v + 16;
    end else begin
      v = 16;
    end;
    CheckBox(h4,v=12,0,"EDI Customer",EDIFlag);
    CheckBox(h4,v+=16,0,"Allow Login",AllowLogin);
//  CheckBox(h4,v+=16,0,"Allow FTP Access",FTPLogin);
    if (HasLocalization("POL")) then begin
      CheckBox(h4,v+=16,0,"Fiscal Receipts Only",FiscalFlag);
    end else begin
      CheckBox(h4,v+=16,0,"Fiscal Invoices Only",FiscalFlag);
    end;
    CheckBox(h4,v+=16,0,"No Mass Letters",NoLetterPosting);
  end else begin
    CheckBox(h4,v=12,0,"No Mass Letters",NoLetterPosting);
  end;
  CheckBox(h4,v+=16,0,"No Mass Emailing",NoMailPosting);
  CheckBox(h4,v+=16,0,"No Environment Tax",NoRepa);
  if (HasLocalization("GBR,LTU,POL,LVA")) then begin
    CheckBox(h4,v,0,"Reverse #VAT#",RvrsVAT);
  end;
  if ((HasExtTax) and (HasLocalization("ARG"))) then begin
    CheckBox(h4,v+=16,0,"No Region Perceptions",NoTax2);
  end;
  if (HasLocalization("NOR")) then begin
    CheckBox(h4,v+=16,0,"Invoice with KID",InvoiceWithKID);
  end;
  CheckBox(h4,v+=16,0,"Dont print invoices",DoNotPrintDoc); //OBS
  Tile(tilenr,110,false,tilenr,PLCode); tilenr = tilenr + 1;
  EditField(h,v=6,  80,"Sales Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,80, "Price List",Normal,PLCode,false,PLDefSClass);
  EditField(h,v+=vs ,80, "Discount Matrix",Normal,RebCode,false,RebSClass);
  if (HasSalesman or HasSalesmanBonus) then begin
    EditField(h,v+=vs,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  end;
  EditField(h,v+=vs,80,"Default Items",Normal,CompItemCode,false,CompItemSClass);
  EditField(h2,v=6,80,"Purch. Currency",Normal,VECurncyCode,false,CurncyCodeSClass);
  EditField(h2,v+=2*vs ,80, "#Supp.# Disc. Matrix",Normal,VERebCode,false,RebSClass);
  if (HasSalesGroup) then begin
    EditField(h2,v+=vs,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
  end;
  ButtonFrame(h5,v=24,150,3,"Price Based On");
  RadioButton(h5,v,0,0,"Order Date",PriceBasedOn);
  RadioButton(h5,v+=16,1,0,"Planned Del. Date",PriceBasedOn);
  RadioButton(h5,v+=16,2,0,"#Despatch# Dates",PriceBasedOn);
  Tile(tilenr,180,false,tilenr,Comment); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs,-20,"Warning on Sales",Normal,WarnText1,false,0);
  EditField(h,v+=vs,-20,"Warning on Purchase",Normal,VEWarnText1,false,0);
  EditField(h,v+=vs,-20,"Payment Note",Normal,PaymentNote,false,0);
  EditField(h,v+=vs,120,"#VAT Reg. No.#",Normal,VATNr,false,0);
  if (!HasLocalization("MYS")) then begin
    EditField(h2-20,v,120,"#Reg. No.# 1",Normal,RegNr1,false,0);
  end else begin
    h7 = h2-5;
    EditField(h7,v,120,"Service Tax No.",Normal,RegNr1,false,0);
  end;
  ButtonFrame(h5+30,v+18,143,1,"Type");
  RadioButton(h5+30,v+18,0,0,"Company",CustType);
  RadioButton(h5+110,v+18,1,0,"Person",CustType);
  HalPushButton(h5+110+110,v+15,h5+110+110+100,v+15+20,"UpdCustomerAddressCUDsm","Update Address");

  v = v + vs;
  EditField(h,v,120,"#Country VAT Reg. No.#",Normal,CountryVATNr,false,0);
  if (!HasLocalization("MYS")) then begin
    EditField(h2-20,v,120,"#Reg. No. 2#",Normal,RegNr2,false,RegDefSClass);
  end else begin
    EditField(h7,v,120,"#Sales Tax No.#",Normal,RegNr2,false,RegDefSClass);
  end;
  EditField(h,v+=vs,60,"#VAT No.# Check Date",Normal,VATNrCheckDate,false,PasteCurDate);
  if (HasLocalization("FIN")) then begin
    EditField(h,v+=vs,120,"Prep. Reg. Check Date",ViewOnly,PrepayRegCheckDate,false,0);
  end;
  if (!HasLocalization("MYS")) then begin
    EditField(h2-20,v,120,"GLN",Normal,RecipientGLN,false,0);
  end else begin
    EditField(h7,v,120,"GLN",Normal,RecipientGLN,false,0);
  end;
  if (HasLocalization("HRV,SVN")) then begin 
    EditField(h,v+=vs,120,"Legal Form",Normal,LegalForm,false,CULegalFormSClass);
  end;
  EditField(h,v+=vs,60,"Sales #VAT# Code",Normal,VATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h2-20,v,50,"Sales Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
  end;
  if (HasLocalization("SAU")) then begin
    EditField(h2-20,v,120,"Scheme ID",Normal,SchemeID,false,0);
  end;
  EditField(h,v+=vs,60,"Purch. #VAT# Code",Normal,VEVATCode,false,VATCodeSClass);
  if (HasTaxMatrix) then begin
    EditField(h2-20,v,50,"Purch. Tax Temp.",Normal,VETaxTemplateCode,false,TaxTemplateSClass);
  end;
  EditField(h,v+=vs,60,"Language",Normal,LangCode,false,LangSClass);
  EditField(h2-20, v,60,"Business Nature",Normal,BusinessNature,false,BNSClass);
  EditField(h,v+=vs,265,"Business Entity",Normal,BusinessEntity,false,SetSClass);
  if (HasLocalization("TUR")) then begin
    EditField(h,v+=vs,265,"Tax Office",Normal,CEICode,false,0);
  end;
  if (HasLocalization("POL")) then begin
    EditField(h,v+=vs,265,"EORI No.",Normal,EORINumber,false,0);
  end;
  if (HasLocalization("ARG")) then begin
    ButtonFrame(h+125,v+=20,177,4,"Tax Condition ");
    RadioButton(h+125,v,2,0,"Unscripted",TaxCondition);
    RadioButton(h+125,v+=16,0,0,"Local",TaxCondition);
    RadioButton(h+125,v+=16,1,0,"Multilateral Agreement",TaxCondition);
    RadioButton(h+125,v+=16,3,0,"Simplified Taxpaying Regimen",TaxCondition);
  end;  
  if (HasLocalization("BRA")) then begin
    EditField(h,v+=vs,120,"SUFRAMA Reg. No.",Normal,SuframaRegNr,false,0);
    if (HasAvalara) then begin
      EditField(h,v+=vs,120,"Admin Process No",Normal,AdminProcessNo,false,0);
      EditField(h2-20,v,120,"CEI Code",Normal,CEICode,false,0);
      EditField(h,v+=vs,120,"Construction Reg. No.",Normal,ConstrRegNo,false,0);
      EditField(h2-20,v,120,"CNAE",Normal,CNAE,false,0);
     //EditField(h,v+=vs,120,"Tax Region",Normal,TaxRegion,false,0);    
      EditField(h2-20,v+=vs,120,"Tax Regime",Normal,TaxRegime,false,SetSClass);
      EditField(h,v,120,"Business Code",Normal,BusinessCode,false,0); 
      EditField(h,v+=vs,120,"Activity Sector",Normal,ActivitySector,false,StrSetSClass);
      EditField(h,v+=vs,325,"CNAE Segment Code",Normal,CNAESegmentCode,false,StrSetSClass);
    end;
    EditField(h2-20,v+=vs,120,"Systax Services Receiver Profile",Normal,SystaxReceiverProfile,false,SystaxReceiverProfSClass);
    EditField(h2-20,v+=vs,120,"Systax Services Sender Profile",Normal,SystaxSenderProfile,false,SystaxSenderProfSClass);
  end;
//  EditField(h,v+=vs,120,"Channel",Normal,WebServiceChannel,false,SetSClass);
  v = 150;
  v = VATZoneButtonsLabelsENG(h5+30,v,170,16);
  Tile(tilenr,130,false,tilenr,AccAP); tilenr = tilenr + 1;
  EditField(h,v=6,50,"Creditor A/C",Normal,AccAP,false,AccSClass);
  EditField(h,v+=vs,50,"Cost A/C",Normal,AccCost,false,AccSClass);
  EditField(h,v+=vs,50,"Cred. On Acc. A/C",Normal,OnAccAccAP,false,AccSClass);
  EditField(h,v+=vs,50,"Payment Code",Normal,PaymentCode,false,PaymentCodeSClass);
  EditField(h,v+=vs,120,"Sales Tags/Objects",Normal,Objects,false,ObjSClass);
  EditField(h,v+=vs,120,"Purch. Tags/Objects",Normal,VEObjects,false,ObjSClass);
  if (HasLocalization("PRT,USA")) then begin
    EditField(h,v+=vs,50,"Tax Exemption",Normal,TaxExemption,false,TaxExemptionsSClass);
  end;  
  if (HasLocalization("HRV,HUN,POL,SRB,SLV,SVN")) then begin
    ButtonFrame(h,v+=40,150,3,"Post Receipt #VAT#");
    RadioButton(h,v,0,0,"Default",IPBookVAT);
    RadioButton(h,v+=16,1,0,"Post #VAT#",IPBookVAT);
    RadioButton(h,v+=16,2,0,"Do not post #VAT#",IPBookVAT);
  end;
  EditField(h1,v=6,-20,"IBAN Code",Normal,IBANCode,false,0);
  EditField(h1,v+=vs,-20,"BIC (SWIFT)",Normal,SWIFT,false,0);
  EditField(h1,v+=vs,-20,"Account Operator",Normal,AccOperator,false,BankSClass);
  EditField(h1,v+=vs,-20,"Bank Account",Normal,BankAccount,false,0);
  EditField(h1,v+=vs,-20,"Bank Account 2",Normal,Bank,false,0);
  EditField(h1,v+=vs,50,"#Sort Code#",Normal,SortCode,false,0);
  if (HasWithholdingTax) then begin
    EditField(h1,v+=vs,120,"Withholding Payment Modes",Normal,WithPayMode,false,PMSClass);
  end;
  if (HasLocalization("FIN")) then begin
    EditField(h1,v+=vs,120,"Contract",Normal,ContractNr,false,0);
  end;
  if (HasLocalization("HRV,HUN,POL,SRB,SLV,SVN")) then begin
    ButtonFrame(h1,v+=60,150,3,"Post Payment #VAT#");
    RadioButton(h1,v,0,0,"Default",OPBookVAT);
    RadioButton(h1,v+=16,1,0,"Post #VAT#",OPBookVAT);
    RadioButton(h1,v+=16,2,0,"Do not post #VAT#",OPBookVAT);
  end;  
  if (HasLocalization("SWE")) then begin
    ButtonFrame(h1,v+=60,150,5,"Payment Channel");
    RadioButton(h1,v,kPaymentChannelSWEBankgiro,0,"Bankgiro",PayChannel);
    RadioButton(h1,v+=16,kPaymentChannelSWEPlusgiro,0,"Plusgiro",PayChannel);
    RadioButton(h1,v+=16,kPaymentChannelSWEOtherDomestic,0,"Other Domestic",PayChannel);
    RadioButton(h1,v+=16,kPaymentChannelSWESEPA,0,"SEPA Foreign",PayChannel);
    RadioButton(h1,v+=16,kPaymentChannelSWEForeign,0,"Foreign",PayChannel);
  end;
  if (HasLocalization("NOR")) then begin
    ButtonFrame(h1,v+=60,150,3,"Payment Channel");
    RadioButton(h1,v,kPaymentChannelNORDomestic,0,"Domestic",PayChannel);
    RadioButton(h1,v+=16,kPaymentChannelNORSEPA,0,"SEPA",PayChannel);
    RadioButton(h1,v+=16,kPaymentChannelNORForeign,0,"Foreign",PayChannel);
  end;
  Tile(tilenr,170,false,tilenr,ANACode); tilenr = tilenr + 1;
  StaticText(h,v=20,"E-Invoices",true);
  EditField(h,vm=(v+=10),120,"E-Invoice Account",Normal,ANACode,false,0);
  EditField(h,v+=vs,120,"Alt. E-Invoice Account",Normal,eInvAlternativeAccount,false,0);
  if (HasLocalization("FIN")) then begin
    EditField(h,v+=vs,120,"E-Invoice Operator",Normal,EInvoiceOperator,false,0);
  end;
  if (HasLocalization("TUR")) then begin
    EditField(h,v+=vs,120,"Sender Alias",ViewOnly,SenderAlias,false,0);
    EditField(h,v+=vs,120,"Receiver Alias",ViewOnly,ReceiverAlias,false,0);
  end;
  ButtonFrame(h,v+=40,163,1,"Receiving Preference");
  RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Default",eInvRcvPref);
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"Electronic Invoice",eInvRcvPref);
  if (HasLocalization("LVA")) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"Email",eInvRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paper Invoice",eInvRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Internet Bank",eInvRcvPref);
  end else begin
    if (HasLocalization("FIN,NOR,SWE")) then begin
      RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"Email",eInvRcvPref);
    end else begin
      RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paper Invoice",eInvRcvPref);
    end;
  end;
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternal,0,"Internal Company",eInvRcvPref);
    EditField(h+100,v,35,"",Normal,eInvRcvToCompanyCode,false,Companies2SClass);
  end;
  RadioButton(h,v+=16,kEInvoiceRcvPreferenceNone,0,"No Receiving",eInvRcvPref);
  EndFrame;
  if (HasLocalization("EST,LTU")) then begin
    ButtonFrame(h,v+=40,143,1,"Alternative Channel");
    RadioButton(h,v,kEInvoiceRcvPreferenceDefault,0,"Not used",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceElectronic,0,"Electronic Invoice",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferencePaper,0,"Paper Invoice",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceEMail,0,"Email",eInvAltRcvPref);
    RadioButton(h,v+=16,kEInvoiceRcvPreferenceInternetBank,0,"Internet Bank",eInvAltRcvPref);
    EndFrame;
  end;
  vm2 = v;

  CheckBox(h1,v=vm,0,"Don't Send Electronic Invoices",eInvStop);
  if (HasLocalization("FIN")==false) then begin
    CheckBox(h1,v+=16,0,"Electronic Invoices with pdf files",eInvAttachPDF);
    ButtonFrame(h1,v+=44,160,3,"Postage for Paper Invoice");
  end else begin
    ButtonFrame(h1,v+=60,143,3,"Postage for Paper Invoice");
  end;
  RadioButton(h1,v,2,0,"Default",eInvPostage);
  RadioButton(h1,v+=16,0,0,"Priority",eInvPostage);
  RadioButton(h1,v+=16,1,0,"Economy",eInvPostage);
  if (HasLocalization("EST,LTU")) then begin
    CheckBox(h1,v+=84,0,"Electronic Invoices in short notes",eInvShortNote);
  end;
  StaticText(h,v=(vm2+40),"E-Purchase Orders",true);
  ButtonFrame(h,v+=20,163,3,"Receiving Preference");
  RadioButton(h,v,kPORcvPreferenceNone,0,"None",ePORcvPref);
  RadioButton(h,v+=16,kPORcvPreferenceDefault,0,"Default",ePORcvPref);
  if (Modb.InterCompany) then begin
    RadioButton(h,v+=16,kPORcvPreferenceInternal,0,"Internal Company",ePORcvPref);
    EditField(h+100,v,35,"",Normal,ePORcvToCompanyCode,false,Companies2SClass);
  end;
  EndFrame;

  if (StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,WebConf); tilenr = tilenr + 1;
    EditField(h,vm=(v=6),120,"Web Conference",Normal,WebConf,true,0);
    EditField(h1,v,150,"Parent Product Category",Normal,MainDispGroup,false,WebNGProductCatSClass);
    EditField(h,v+=vs,120,"Web Start Page",Normal,WebStartPage,false,0);
    EditField(h1,v,150,"Display on the Web",Normal,WebDisplays,false,WebDisplaySClass);
    EditField(h,v+=vs,120,"Freight Code",Normal,FreightCode,false,WebFreightSClass);
    EditField(h1,v,150,"Web Tag/Object Type",Normal,WebOTCode,false,OTSClass);
  end;
  Tile(tilenr,170,false,tilenr,Comment0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Comment",Normal,Comment0,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"Courtesy Title",Normal,Title,false,CourtesyTitlesSClass);
  EditField(h,v+=vs,-20,"Job Title",Normal,JobDesc,false,JobTitleDescSClass);
  EditField(h,v+=vs,-20,"Salutation 1",Normal,Salutation1,false,0);
  EditField(h,v+=vs,-20,"Salutation 2",Normal,Salutation2,false,0);
  EditField(h,v+=vs,-20,"Salutation 3",Normal,Salutation3,false,0);
  //OBS--> 
  EditField(h,v+=vs,200,"Additional e-mail 1",Normal,OBS_eMail1,false,0); //OBS
  EditField(h+350,v,-20,"Additional e-mail 2",Normal,OBS_eMail2,false,0); //OBS
  EditField(h,v+=vs,200,"Additional e-mail 3",Normal,OBS_eMail3,false,0); //OBS
  EditField(h+350,v,-20,"Additional e-mail 4",Normal,OBS_eMail4,false,0); //OBS
  EditField(h,v+=vs,200,"Additional e-mail 5",Normal,OBS_eMail5,false,0); //OBS
  //OBS<--
  if (true) then begin//HasModHotel
    Tile(tilenr,250,false,tilenr,DocType); tilenr = tilenr + 1;
    EditField(h,v=6,100,"Doc. Type",Normal,DocType,false,CUDocTypeSClass);
    EditField(h,v+=vs,100,"First Name",Normal,FirstName,false,0);
    EditField(h2,vm,-20,"ID",Normal,PassportNr,false,0);
    EditField(h2,vm+=vs,-20,"Name in Document",Normal,NameinDocument,false,0);
//  EditFieldTL(h,vm=(v+=20),100,"Nationality",M4StrSet,Normal,423,Nationality,false,StrSetSClass);
    EditField(h,v+=vs,100,"Nationality",Normal,Nationality,false,CountrySClass);
    EditField(h,v+=20,100,"Birthday",Normal,BirthDate,false,PasteCurDate);
    EditField(h,v+=20,100,"Place of Birth",Normal,BirthPlace,false,0);
    EditField(h,v+=20,100,"Country of Birth",Normal,BirthCountry,false,CountrySClass);
    EditField(h,v+=20,100,"Profession",Normal,Profesion,false,0);
    EditField(h,v+=20,100,"Newspaper",Normal,Newspaper,false,NewspaperSClass);
    EditField(h,v+=20,100,"Passphrase",Normal,Passphrase,false,0);
    EditField(h,v+=vs,100,"Tour Operator",Normal,TourOperator,false,CUSClass);
    EditField(h,v+=vs,100,"Agent",Normal,Agent,false,CUSClass);
    EditField(h,v+=vs,100,"Def. Pay. Mode",Normal,DefGuestPayMode,false,PMSClass);
    EditField(h,v+=vs,100,"Def. Booking Org.",Normal,BookOrigin,false,BookOrgSClass);
    EditField(h,v+=vs,300,"Diet Remarks",Normal,DietRemarks,false,0);
    EditField(h,v+=vs,300,"Req. Remarks",Normal,RequirementRemarks,false,0);

    ButtonFrame(h2,v=vm+20+vs,100,2,"Sex");
    RadioButton(h2,v,0,0,"Male",Gender);
    RadioButton(h2,v+=17,1,0,"Female",Gender);

    CheckBox(h2+130,v=vm+20+vs,0,"Smoker",Smoking);
    CheckBox(h2+130,v+=17,0,"Blacklisted",Blacklist);

    ButtonFrame(h2,vm=(v+=40),100,4,"Marital Status");
    RadioButton(h2,v,0,0,"Single",MarStatus);
    RadioButton(h2,v+=17,1,0,"Married",MarStatus);
    RadioButton(h2,v+=17,2,0,"Divorced",MarStatus);
    RadioButton(h2,v+=17,3,0,"Widowed",MarStatus);

    ButtonFrame(h2=h2+130,v=vm,100,3,"Age Status");
    RadioButton(h2,v,1,0,"Child",AgeStatus);
    RadioButton(h2,v+=17,0,0,"Adult",AgeStatus);
    RadioButton(h2,v+=17,2,0,"Pensioner",AgeStatus);
  end;

  if (StandardHansa==false) then begin
    Tile(tilenr,270,false,tilenr,UserStr1); tilenr = tilenr + 1;
    v=6;h=180;
    label = UserDefined("CUVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v,-20,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("CUVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("CUVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("CUVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("CUVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("CUVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserVal1,false,0);
    end;
    label = UserDefined("CUVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserVal2,false,0);
    end;
    label = UserDefined("CUVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-20,label,Normal,UserVal3,false,0);
    end;
    label = UserDefined("CUVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,false,PasteCurDate);
    end;
    label = UserDefined("CUVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,false,PasteCurDate);
    end;
    label = UserDefined("CUVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,false,PasteCurDate);
    end;

    EditField(h,v+=vs,-20,"Address Books",Normal,AddressBooks,false,0);
  end;

  Tile(tilenr,500,false,tilenr,Math2); tilenr = tilenr + 1;
  //CheckBox(50,v=6,0,"HTML",HtmlFlag);
  StaticText(50,v=6,"Notes",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (CUr.CUType!=0 and HasCharts) then begin
    Tile(tilenr,430,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$CUDCLass_BIChart");
    ColourPushButton(17,400,300,420,"LaunchFlexBI","Try flex.bi for more detailed analytics",kButtonColourBabyBlue);
  end;

  SpecialMenu("Create Erf Master",' ',6,"CreateErfDsm");// ea custom
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    if (UserCanReport("CustPSRn","",true) and HasCustomerStatusReport) then begin
      SpecialMenu("Customer Status",'e',0,"CUStatusCUDsm");
    end;
    if (UserCanReport("VEPSRn","",true)) then begin
      SpecialMenu("#Supplier# Status",'u',4,"VEStatusVEDsm");
    end;
    SpecialMenu("Link Existing Contact",' ',1,"AddContactCUDsm");
    SpecialMenu("Create Linked Contact Person",' ',1,"NewContactCUDsm");
    SpecialMenu("Activity",'c',2,"NewActCUDsm");
  end else begin
    if (UserCanReport("CustPSRn","",true) and HasCustomerStatusReport) then begin
      SpecialMenu("Customer Status",'e',0,"CUStatusCUDsm");
    end;
    if (UserCanReport("VEPSRn","",true)) then begin
      SpecialMenu("#Supplier# Status",'u',4,"VEStatusVEDsm");
    end;
    SpecialMenu("Link Existing Contact",' ',1,"AddContactCUDsm");
    SpecialMenu("Remove Linked Contact",' ',1,"DelContactCUDsm");
    SpecialMenu("Edit Linked Contact Data",' ',1,"EditContactCUDsm");
    SpecialMenu("Update Contact Persons",' ',6,"UpdContactAddrCUDsm");

    if (HasLocalization("ARG")) then begin
      SpecialMenu("Open Regional Perceptions",' ',1,"RPCUTaxDsm");
    end;
    if (HasLocalization("ARG,BRA,ITA,KEN,MEX,PRT,SGP,ZAF")) then begin
      SpecialMenu("Open #Supplier# Withholdings",' ',1,"WHVEDsm");
    end; //EMZ
    if (GuiType==kGuiCocoa) then begin
      SpecialMenu("Copy to local address book",' ',7,"CopyToLocalAddressBookDsm");
    end;
    if (GuiType==kGuiiPhone) then begin
      SpecialMenu("Change Password",' ',1,"ChangePasswdCUDsm");
    end;
    
    SpecialMenu("(-",' ',10,"");
//    SpecialMenu("Analyze with AI",' ',8,"OpenAI_AnalyzeCustomerSm");
    SpecialMenu("Research Contact with AI",' ',8,"OpenAI_ResearchContactSm");
    SpecialMenu("Research Industry with AI",' ',8,"OpenAI_ResearchIndustrySm");
    SpecialMenu("Research Competitors with AI",' ',8,"OpenAI_ResearchCompetitorsSm");
    SpecialMenu("Renew name in active contracts",' ',8,"UpdateNAContractCustNameCUDsm"); //OBS
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//    SpecialMenu("Activity",'c',2,"NewActCUDsm");
    SpecialMenu("Linked Contact Person",' ',1,"NewContactCUDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Email",'m',5,"NewMailCUDsm");
    end;
    SpecialMenu("Tags/Objects",' ',1,"CreateObjectCUDsm");
    SpecialMenu("Random Password Mail",' ',3,"RandomPassMailCUDsm");
  end;
  EndWindow;
end;

window IVDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  string 255 label;
  Integer rn,wn;
  record IVVc IVr;
  record AtradiusBlock AtradiusBl;
  record TaxRateIntrfcBlock TRIb; 

  WindowBegin("Invoice",IVDClass,CGview,-);
  SetWRect(20,80,720,460);
  Sizeable(-1,-1,0,0);
  UseView(IVVc);
  // if (HasTouchScreenLook==true) then begin  //no more TS interface in SL , Karls' order
  if (true) then begin
  ActiveFieldOnNew("Contract"); //OBS edit 
  CommunicateButton;
  DynamicWindow;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",St_i,SerNr,false,TSerSClass);
  //OBS-->
  EditField(75,v+=20,95,"Contract",Normal,Contract,false,NAContractSClass);
  EnterSkip(PayDeal);
  EditField(255,v,95,"Premise",Normal,FlatCode,false,0);
  EditField(415,v,95,"Erf",Normal,BuildCode,false,0);
  //OBS<--
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  // Jh Added Fields . Prev Reading . Curr Reading , Consumption and readingType //  
  EditField(90,v+=20,95,"Meter Number",ViewOnly,MeterNo,false,0);
  EditField(280,v,95,"Previous Reading",ViewOnly,PrevReading,false,0);
  EditField(470,v,95,"Current Reading",ViewOnly,CurrReading,false,0);
  EditField(90,v+=20,95,"Consumption",ViewOnly,Consumption,false,0);
  EditField(280,v,95,"Date Of Reading",ViewOnly,DateOfReading,false,0);
  EditField(470,v,95,"Reading Type",ViewOnly,ReadingType,false,0);
  /////////////////////////////////////////////////////////////////////////////////////
  EditField(h=255,v=vm,-105,"Name",Normal,Addr0,false,0);

  if (StandardHansa==false) then begin
    if (HasLocalization("FIN")) then begin
      EditField(h,vm=(v+=20),180,"Payment Ref",ViewOnly,CalcFinRef,false,0);
    end else begin
      EditField(h,vm=(v+=40),135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass); //OBS edit pos
      if (HasLocalization("BRA")) and (HasAvalara) then begin
        EditField(h+300,vm,50,"RPS Document No.",Normal,RPSDocNo,false,0);
      end;
    end;
    if (HasLocalization("EST")) then begin
      CheckBox(h+170,v,0,"E-invoice receiver",EInvReceiverFlag);
    end;
    if (HasLocalization("RUS")) then begin
      EditField(500,v,20,"Operation Code",Normal,OperationCode,false,OperationCodesSLSClass);
    end;
    if (HasLocalization("BRA")) then begin
      EditField(h,vm=(v+=20),135,"Bank Receipt No.",ViewOnly,BankReceiptNr,false,0);
      if (HasAvalara) then begin
        EditField(h+300,vm,50,"Replace RPS Document No.",Normal,RPSDocNoCopy,false,0);
        EditField(75,vm,80,"Process No.",Normal,ProcessNo,false,0);
      end;
    end;
  end else begin
    v = v + 20;
    vm = v;
  end;
    h4=-90;
  CheckBox(h4,v=6,0,"OK",OKFlag);
  CheckBox(h4,v+=16,0,"Disputed",DisputedFlag);
  if (StandardHansa) then begin 
    CheckBox(h4,v+=16,0,"Update #Stock#",UpdStockFlag);
  end;
  CheckBox(h4,v+=16,0,"Merged inv.",MergedInvFlag);  //OBS
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Currency");
  TileButton(4,"Del. Terms");
  TileButton(5,"Identifiers");
  TileButton(6,"Price List");
  TileButton(7,"Inv. Address");
  TileButton(8,"Del. Address");
  if (HasLocalization("POL")) then begin
    TileButton(9,"#VAT# Identifiers");
  end;
  if (HasLocalization("BOL")) then begin
    TileButton(9,"Inv. Classification");
  end;
  if (HasLocalization("BRA")) then begin
    TileButton(9,"Additional Info");
  end;
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 540; h4 = -100;
  EditField(h1,vm=(v=6),82,"Invoice Date",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Payment Terms",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Due Date",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Exp. Clearing Date",Normal,ExpectedClearingDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  if (HasLocalization("SAU")) then begin
     EditField(h2,v+=vs,300,"Official Ser. No.",ViewOnly,SauOfficialSerNr,false,0);
  end;
  if ((HasLocalization("BRA") and HasAvalara)) then begin
    EditField(h2,v+=vs,135,"Process Origin",Normal,ProcessOrigin,false,SetSClass);
    EditField(h3,v,80,"Withholding Mode",Normal,WithholdingMode,false,StrSetSClass);
  end;
  EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  if (StandardHansa) then begin
    EditField(h3,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
  end else begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,0);
  end;  
  EditField(h3,v+=vs,80,"#Credit Reason#",Normal,Reason,false,StandProblemsSClass);
  EditField(h3,v+=vs,80,"Serv. period",Normal,ServPeriod,false,0);  //OBS
  EditField(h3,v+=vs,80,"Additional inv. date",Normal,AdditInvDate,false,PasteCurDate);  //OBS
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"Payment Mode",Normal,PMCode,false,PMSClass);
  end;
  if (HasLocalization("BOL,BRA,MEX,PRY,TUR")) then begin
    EditField(h3,v+=vs,80,"#Invoice Type#",Normal,BrazilEInvType,false,EInvTypeSClass);
  end;
  if (HasLocalization("ITA")) then begin
    EditField(h3,v+=vs,80,"PA Contract",Normal,PubAdmContract,false,0);
  end;
  if (HasLocalization("BOL,BRA,HRV,ITA")) then begin
    EditField(h3,v+=vs,80,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
  end;
  if (HasLocalization("ITA")) then begin
    EditField(h3,v+=vs,80,"Receipt No.",ViewOnly,TaxAdminReceiptNr,false,0);
  end;
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"#No. Pay. Acc.#",Normal,PayAccNo,false,StrSetSClass);
  end;
  if (HasLocalization("RUS")) then begin
    EditField(h3,v+=vs,80,"Receipt Info",Normal,ReceiptInfo,false,0);
  end;
  if (HasLocalization("ITA")) then begin
    EditField(h3,v+=vs,80,"PA Project",Normal,PubAdmProject,false,0);
  end;
  if (HasLocalization("FIN")) then begin
    EditField(h3,v+=vs,80,"Contract",Normal,ContractNr,false,0);
  end;
  EnterSkip(Math);

  wn = CurWindow;
  if (wn>0) then begin
    if (GetWindowClass(wn)=="IVDClass") then begin
      GetWindowRecord(wn,IVr);
    end;
  end;

  Tile(2,220,true,"2",Math);
  //  CheckBox(20,-20,0,"OK",OKFlag);
  if (CompileType!=ctiPhone) then begin
    EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (IVr.PayLinkFlag and IsFeeTypeCustomer) then begin
      EditField(55,-21,50,"Credit Card Fee",ViewOnly,ConvenienceFee,true,0);
    end;
    if (UseTaxTemplatesforTaxCalc==false) then begin
      if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(165,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(165,-21,70,"Total GP",ViewOnly,TotGP,true,0);
      end;
      if (HasLocalization("GBR,LTU,POL,LVA")) then begin
        EditField(320,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
        EditField(320,-21,50,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end else begin
        EditField(290,-41,70,"Tax2",ViewOnly,TAX2Sum,true,0);
        EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end;
      EditField(420,-41,95,"#VAT#",ViewOnly ,Sum3,true,0);
    end else begin
      if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(290,-21,70,"Total GP",ViewOnly,TotGP,true,0);
      end;
      EditField(420,-41,95,"Tax",ViewOnly ,Sum3,true,0);
    end;
    EditField(420,-21,95,"Base",ViewOnly,BaseSum4,true,0);
    if (HasLocalization("BRA") and HasAvalara) then begin
      EditField(55,-21,50,"With.Tax",Normal,WithholdingTax,true,0);
    end;
    EditField(-140,-41,95,"Subtotal",ViewOnly ,Sum1,true,0);
    EditField(-140,-21,95,"TOTAL",ViewOnly ,Sum4,true,0);
  end else begin
    EditField(55,-41,80,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(55,-21,80,"#VAT#",ViewOnly ,Sum3,true,0);
    EditField(-120,-41,80,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    EditField(-120,-21,80,"TOTAL",ViewOnly ,Sum4,true,0);
  end;
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Item",0,ArtCode,false,ForSaleINSClass);
  //  MatCol(t,94,"Var",0,VARList,true,VARSClass);
  //  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  MatCol(t,144,"Coef.",0,QtyCoef,true,0); //OBS
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Credit of Invoice",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeDebit,32,"Debit of Invoice",true);
  MatCol(t,208,"",0,OrdRow,false,0);
  MatCol(t,-216,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeInterest,32,"Interest",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Down Payment",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0);
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
  MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
  MatColTL(t,-145,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-80,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Prepayment Number",true);
  MatCol(t,208,"",0,CUPNr,false,ARPay3SClass);
  MatCol(t,-216,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the #VAT# sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Loan",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"Loan Int.",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Signature",false);
  MatColTL(t,94,"Sign",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,144,"Description",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeVoid,32,"Void",false);
  MatColTL(t,65,"Sign",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,150,"Qty.",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Qty.",0,Quant,true,0);
  end;
  MatCol(t,190,"Price",0,Price,true,0);
  MatCol(t,250,"Description",0,Spec,false,0);
  MatCol(t,-195,"Ser. No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Sum",0,-1,ViewOnly,0,Sum,true,0);
  //  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"This row and all rows below it will be hidden on printout",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Item",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Qty",0,Quant,true,0);
  MatText(t=kInvoiceRowTypeRetention,32,"Retention",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"SalesAcc",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Sum",0,-1,0,0,Sum,true,0);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"GV",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Sum",0,Sum,true,0);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Sum",0,Sum,true,0);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"CASH",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCashWithdrawal,32,"CW",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Sum",0,Sum,true,0);
  MatCol(t,108,"Points",0,Points,true,0);
  MatCol(t,148,"Currency",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Points",0,Points,true,0);
  MatCol(t,141,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"#Authorisation#",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeSwishPayment,32,"Swish",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"#Authorisation#",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeMPesaPayment,32,"M-Pesa",true);
  MatCol(t,68,"Sum",0,Sum,true,0);
  MatCol(t,141,"P. Mode",0,PayMode,true,PMSClass);
  MatText(t=kInvoiceRowTypeQRPayment,32,"QR",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"#Authorisation#",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType18,28,"Reserved",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Reserved",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Withholding Tax",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Multi-buy Discount",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec",0,Spec,false,0);
  MatCol(t,-235,"Debtors A/C",0,SalesAcc,false,0);
  MatCol(t,-150,"Sum",0,Sum,true,0);
  MatCol(t,-45,"#V-Cd#",0,VATCode,false,0);
  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0);
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */
  //t = 21 kInvoiceRowTypeChequePayment
  MatText(t=kInvoiceRowTypeActivationDate,32,"Activation Date",true);
  MatCol(t,130,"",0,ServiceDelDate,false,PasteCurDate);
  Flip(1);
  //  MatCol(t=kInvoiceRowTypeNormal,194,"Description",0,Spec,false,0);
  t=kInvoiceRowTypeNormal;
  MatCol(t,184,"Description",0,Spec,false,0); //OBS edit
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,184,"Description",0,Spec,false,0); //OBS edit
  MatCol(t,-380,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-330,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-275,"Location",0,Location,false,LocationSClass);
  MatCol(t,-210,"Position",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-160,"Tags/Objects",0,Objects,false,ObjSClass);
    if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
      MatCol(t,-90,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-45,"R. #V-Cd#",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-360,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-310,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-180,"Position",0,PosCode,false,UsedPosSClass);
  end;
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  //  MatCol(t=kInvoiceRowTypePrepayment,-224,"",0,SalesAcc,false,AccSClass);
  //  MatCol(t,-45,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-250,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-170,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-104,"Tags/Objects",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
  MatCol(t,184,"Description",0,Spec,false,0); //OBS edit
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Unit Price",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Cost B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Unit Price",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Cost B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Unit Price",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,184,"Description",0,Spec,false,0); //OBS edit
  MatCol(t,-370,"#Salesmen#",0,Salesmen,false,UserSClass);
  MatCol(t,-300,"Serial No",0,SerialNr,false,SerialNrSClass);
//  MatCol(t,-240,"Main Serial No.",0,MotherNr,true,0);
  MatCol(t,-220,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-170,"Recipe",0,Recepy,false,RecSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-310,"Serial No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-180,"Recipe",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-310,"Serial No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-180,"Recipe",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
  //  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,184,"Description",0,Spec,false,0); //OBS edit
  MatCol(t,-380,"Meter ID.",0,CounterSerNr,false,0); //OBS edit;
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr. of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr. of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Units Unit Price",0,UnitFactPrice,true,0);
  Flip(6);
  t = kInvoiceRowTypeNormal;
  MatCol(t,184,"Description",0,Spec,false,0); //OBS edit
  MatCol(t,-390,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Coeff.",0,Coefficient,true,0);
  MatCol(t,-260,"P.Factor",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"Serv. Co. Hist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Cred. Row",0,CreditedRow,false,0);
  MatCol(t,-70,"Environ. Tax",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-390,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Coeff.",0,Coefficient,true,0);
  MatCol(t,-260,"P.Factor",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"Serv. Co. Hist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Cred. Row",0,CreditedRow,false,0);
  MatCol(t,-70,"Environ. Tax",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-80,"Environ. Tax",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,184,"Description",0,Spec,false,0); //OBS edit
  end;
  MatCol(t,-340,"Unit price 2",0,PriceWORound,true,0); //OBS edit
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  //OBS -->
  Flip(8);
  MatCol(t=kInvoiceRowTypeNormal,184,"Description",0,Spec,false,0);
  // MatColTL(t,-410,"Piedz.statuss",0,M4Set,ViewOnly,1071,CredInvDebtColStat,false,0);
  MatCol(t,-300,"Contract no.",0,ContractNr,false,NAContractSClass);
  MatColTL(t,-220,"Source",0,M4Set,ViewOnly,1037,SourceType,false,0);
  MatColTL(t,-140,"Number",0,M4Str,ViewOnly,20,SourceTransNr,false,0);
  MatColTL(t,-70,"Per.rec.no.",0,M4Long,ViewOnly,0,PerServRecSerNr,false,0);
  //OBS <-- 
  if (HasLocalization("BRA") and HasAvalara) then begin
    Flip(9); //OBS edit
    t = kInvoiceRowTypeNormal;
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-320,"Other Cost",0,OtherCost,false,0);
    MatCol(t,-250,"Freight Cost",0,FreightCost,false,0);
    MatCol(t,-180,"Insurance",0,Insurance,false,0);
    MatCol(t,-110,"Untaxed Other Cost",0,UntaxedOtherCost,false,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusIVDsm");
  RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"IVLastSPrsm");
  RowMenuItem(0,"Add Header Line",' ',' ',0,"HeaderLineIVDsm");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"HiddenLineIVDsm");
  if (HasLocalization("SVN")==false) then begin
    RowMenuItem(0,"Add Cash Line",' ',' ',0,"CashLineIVDsm");
    RowMenuItem(0,"Add Credit Card Line",' ',' ',0,"CreditCardLineIVDsm");
  end;
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Add Retention",' ',' ',0,"RetentionLineIVDsm");
  end;
  RowMenuItem(0,"Add Subtotal",' ',' ',0,"SubTotalLineIVDsm");
  RowMenuItem(0,"Apple Warranty Status Check",'w',' ',0,"WarrantyStatusIVDsm");
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ? 
    RowMenuItem(0,"Add #licence# start date",' ',' ',0,"LicStartIVDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,8,"H"); //OBS
  if (HasLocalization("BRA") and HasAvalara) then begin
    v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,9,"I"); //OBS edit
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);  
  EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);    
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
    EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
    EditField(h1,v+=vs,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
    EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
  end;
  EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
    EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
    EditField(h2,v+=vs,80,"Freight Comp.",Normal,FreightCode,false,FreightCompanySClass);
    CheckBox(h3,v=vm,0,"Update #Stock#",UpdStockFlag);
    EditField(h3,v+=2*vs,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
    EditField(h3,v+=vs,80,"Intrastat Trans. Code",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
    EditField(h3,v+=vs,80,"Global Transport No.",Normal,GlobalTransportNr,false,0);
    EditField(h3,v+=vs,80,"Global Transport Date",Normal,GlobalTransportDate,false,PasteCurDate);
    if (HasLocalization("BRA") and HasAvalara) then begin
      EditField(h3,v+=vs,80,"Target Place",Normal,TargetPlace,false,StrSetSClass);
    end;
  end;
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Order No.",ViewOnly,OrderNr,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Service Order No.",ViewOnly,SVONr,false,0);
    EditField(h1,v+=vs,80,"Cred. Man. No.",ViewOnly,CredManNr,false,0);
  end;
  EditField(h1,v+=vs,135,"#Official No. 2#",Normal,OfficialSerNr2,false,0);
  if (HasLocalization("FIN")) then begin
    EditField(h1,v+=vs,135,"Delivery Site Code",Normal,DeliverySiteCode,false,0);
    EditField(h1,v+=vs,135,"Work Site Number",Normal,WorkSiteNumber,false,0);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h1,v+=vs,80,"Federal Service",Normal,FedServCode,false,FederalSerSClass);
    if (HasAvalara) then begin
      EditFieldTL(h1,v+=vs,80,"NFS-e No",M4Str,Normal,25,NFSeNo,false,0);
      EditField(h2=350,v,80,"NFS-e Issue Date",Normal,NFSeIssueDate,false,PasteCurDate);
      EditField(h1,v+=vs,80,"Spec. Situation",Normal,SpecSituation,false,StrSetSClass);
      EditField(h2,v,80,"Referenced Inv. No.",Normal,RefInvNo,false,ARSClass);
      EditFieldTL(h1,v+=vs,80,"Admin Process No.",M4Str,Normal,30,AdminProcessNo,false,0);
      EditField(h2,v,80,"Presence Indicator",Normal,PresenceIndicator,false,StrSetSClass);
    end;
    EditField(h1,v+=vs,-85,"QR Code URL",Normal,QRCodeURL,false,0);
  end;
  if (HasLocalization("ARG,BOL,PAN,URY,POL")) then begin
    if (HasLocalization("POL")==false) then begin
      EditField(h1,v+=vs,135,"#CAE/CAEA#",Normal,CAE,false,0);
    end else begin
      EditFieldTL(h1,v+=vs,320,"#CAE/CAEA#",M4Str,Normal,100,CAE,false,0);
    end;
    if (HasLocalization("URY,POL")==false) then begin
      EditField(h1,v+=vs,135,"#CAE Expiry#",Normal,CAEExpiry,false,0);
      EditField(h1,v+=vs,135,"#CAEA Start#",ViewOnly,CAEAStartDate,false,0);
    end;
  end;
  EditField(h2=350,v=vm,80,"Stat. Value",Normal,StatVal,true,0);
  EditField(h2,v+=vs,80,"Trans. Time",Normal,TransTime,false,SetSClass);
  EditField(h2,v+=vs,80,"Print Date",ViewOnly,PrintDate,false,0);
  EditField(h2,v+=vs,80,"Oprt. Comment",ViewOnly,OYDescription,false,0);
  if (HasLocalization("FIN")) then begin
    EditField(h2,v+=vs,80,"Acc. Dimension",Normal,AccountDimension,false,0);
    EditField(h2,v+=vs,80,"Tender Ref.",Normal,TenderReference,false,0);
  end;
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ? 
    EditField(h2,v+=vs,80,"ToBe Inv.Nr",ViewOnly,ToBeIVNr,false,0);
  end;
  //  ColourPushButton(-100,v,-20,v+60,"TestIVDClassCardData","Test" & chr(10) & "CardData",4);
  //  SoftEditField(h3+50,v,100,"Control Code"  ,ViewOnly ,"TaxAuthIDCC",false,0,M4Str,60);
  if (StandardHansa==false) then begin
    if (HasLocalization("ARG,BOL,PAN,PRY,URY")) then begin
      if (HasLocalization("PRY")==false) then begin
        EditField(h2,v+=vs,80,"#Tax Auth. ID#",Normal,TaxAuthID,false,0);
      end else begin
        EditField(h1,v+=vs,135,"#Control Code#",ViewOnly,TaxAuthIDCC,false,0);
      end;
      if (HasLocalization("URY")==false) then begin
        if (HasLocalization("PRY")) then begin
          EditField(h2,v,80,"#Tax Auth. ID#",Normal,TaxAuthID,false,0);
        end else begin
          EditField(h2,v+=vs,80,"#Control Code#",ViewOnly,TaxAuthIDCC,false,0);
        end;
      end;
    end;
    if (HasLocalization("PRT")) then begin
      EditField(h2,v+=vs,80,"Status",Normal,Status,false,SetSClass);
    end;
    if (HasLocalization("ARG,PRT")) then begin
      EditField(h2,v+=vs,80,"Tax Type",Normal,TaxInvType,false,SetSClass);
    end;
    if (HasLocalization("ARG")) then begin
      EditField(h,v+=vs,80,"#CAEA Expiry#",ViewOnly,CAEAExpiryDate,false,0);
    end;
    if (HasLocalization("SVN")) then begin
      EditField(h2,v+=vs,180,"E-Inv. Conf. No.",ViewOnly,TaxAdminReceiptNr,false,0);
      EditField(h2,v+=vs,180,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
    end;
    if (HasLocalization("BOL")) then begin
      EditField(h1,v+=vs+vs,-85,"QR Code URL",Normal,QRCodeURL,false,0);
    end else begin
      if (!HasLocalization("BRA")) then begin 
        if (HasLocalization("PAN")) then begin
          EditField(h,v+=vs+vs,350,"QR Code URL",Normal,QRCodeURL,false,0);
        end else begin
          if (HasLocalization("PRY")==false) then begin
            if (HasLocalization("POL"))then begin
              EditField(h,v+=vs,135,"#CAE/CAEA#",Normal,CAE,false,0);
            end;
            EditField(h,v+=vs,320,"QR Code URL",Normal,QRCodeURL,false,0);
          end else begin
            EditField(h,v+=vs,-40,"QR Code URL",Normal,QRCodeURL,false,0);
          end;
        end;
      end;
    end;
  end;
  if (HasLocalization("TUR")) then begin
    EditField(h,v+=vs,320,"#Control Code#",ViewOnly,TaxAuthIDCC,false,0);
    EditField(h,v+=vs,135,"#CAE/CAEA#",Normal,CAE,false,0);
  end;
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Date",ViewOnly,EInvExpDate,false,0);//Tx server
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Qty",ViewOnly,EInvExpQty,false,0);
  CheckBox(h3=450,v=vm,0,"No Reminder",NoRemndrFlag);
  CheckBox(h3,v+=vs,0,"No Interest",NoInterestFlag);
  CheckBox(h3,v+=vs,0,"No Collection",NoColectionFlag);
  CheckBox(h3,v+=vs,0,"Rēķins no līguma",ServInvf);  //OBS
  if (HasLocalization("POL")) then begin
    CheckBox(h3,v+=vs,0,"Fiscal Receipt",FiscalFlag);
  end else begin
    CheckBox(h3,v+=vs,0,"Fiscal Invoice",FiscalFlag);
  end;
  if (HasLocalization("BRA") and HasAvalara) then begin
    CheckBox(h3,v+=vs,0,"Public Highway Service",PubHighwayServ);
    CheckBox(h3,v+=vs,0,"Third Party Website",ThirdPartyWeb);
  end;
  if (HasPayLinkTransactions) then begin
    CheckBox(h3,v+=vs,0,"Enable PayLink",PayLinkFlag);
  end;
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    CheckBox(h3,v+=vs,0,"Split VAT Invoice",SplitVATFlag);
  end;
  CheckBox(h3+130,v=vm,0,"Cust. _Info on Trans.",ARonTR);
  CheckBox(h3+130,v+=vs,0,"Don't send as E-Invoice",NoEInvoice);
  CheckBox(h3+130,v+=vs,0,"Self Billing",SelfBilling);
  CheckBox(h3+130,v+=vs,0,"Post Receipt #VAT#",IPBookVAT);
  if (HasLocalization("LTU")) then begin
    CheckBox(h3+130,v+=vs,0,"Exclude from Exports",ExcludeFromExports);
  end;
  BlockLoad(AtradiusBl);
  if (AtradiusBl.Enable) then begin
    CheckBox(h3,v+=vs,0,"Sent to Atradius",DebtCollectionFlag);
  end;
//    CheckBox(h3,v+=16,0,"Including VAT",InclVAT);
  //  CheckBox(h3,v+=16,0,"E-Invoice Exported",EInvExpFlag);
  Tile(6,150,false,"6",PriceList); vs = 20; h3=550;
  EditField(h1,v=vm,80,"Price List",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Discount Matrix",Normal,RebCode,false,0);
  //  EditField(h1,v+=vs,80,"Disc. %",ViewOnly,DiscPerc,false,0);
  //  EditField(h1,v+=vs,80,"Disc. Amount",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Original Customer",ViewOnly,OrgCust,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Credit Card",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"#Authorisation#",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,80,"Debtors",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-85,"Comment",Normal,InvComment,false,0);
  if ((HasLocalization("BRA") and HasAvalara)) or (Haslocalization("PAN,PRY")) then begin
    EditField(h1,v+=vs,-85,"Add. Fiscal Info",Normal,AddFiscalInfo,false,0);
  end;  
  if (HasLocalization("BRA")) then begin  //Systax integration fields
    EditField(h1,v+=vs,80,"Importing Tax",Normal,ImportingTax,false,0);
    EditField(h3,v,80,"Base Calc. for Importing Taxes",Normal,BaseCalcImportingTax,false,0);
    EditField(h1,v+=vs,80,"Customs Expenses",Normal,CustomsExpense,false,0);
    EditField(310,v,80,"IOF",Normal,IOF,false,0);
    EditField(h3,v,80,"Exchange Taxes",Normal,ExchangeTax,false,0);
  end;
  if (HasSalesGroup) then begin
    EditField(h2=310,v=vm,80,"Sales Group",ViewOnly,SalesGroup,true,0);
    EditField(h2,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end else begin
    EditField(h2,v=vm,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  EditField(h2,v+=vs,80,"Commission",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Total Incl. Com.",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Interest",Normal,IntCode,true,IntSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Orig. No.",Normal,CredInv,false,0);
    EditField(h3,v=vm,80,"Reminder Level",Normal,LastRemndr,false,0);
  end else begin
    EditField(h3,v=vm,80,"Orig. No.",Normal,CredInv,false,0);
    EditField(h3,v+=vs,80,"Reminder Level",Normal,LastRemndr,false,0);
  end;
  EditField(h3,v+=vs,80,"Last Reminder Date",Normal,LastRemDate,false,PasteCurDate);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Loyalty Card",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  end;
  EnterSkip(Math);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Membership Level",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
    EditField(h3,v+=vs,80,"Loyalty Points",ViewOnly,Points,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v+=vs,80,"TREO No.",Normal,TREONr,false,0);
  end;
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");

  if (HasLocalization("BRA,PRY") and HasAvalara) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr3,false,0);
    EditField(h2+80,v,-20,"City Code",Normal,AvalaraCityCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,InvAddr3,false,0);
  end;
    label = UserDefined("CUVc","InvAddr4");
  if (HasLocalization("BRA,PRY") and HasAvalara) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr4,false,0);
    EditField(h2+80,v,-20,"State Code",Normal,AvalaraStateCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,InvAddr4,false,0);
  end;
    EditField(h,vm=(v+=vs),80,"Country",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA,PRY") and HasAvalara) then begin
    EditField(h2+80,v,100,"Country Code",Normal,AvalaraCountryCode,false,0);
  end;
  if (HasLocalization("BRA,PRY")) then begin 
    EditField(h2-105,v,100,"",ViewOnly,InvCountryName,false,0);
    h5 = -140;
    width = -20;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Account Op.",Normal,BankCode,false,BankSClass);
  if (StandardHansa==false) then begin
    if (HasApprovals) then begin
      SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
/*
//oldapprovals    
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/    
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm+40,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"#Reg. No.# 1",Normal,RegNr1,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Name",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Name",Normal,ShipAddr0,false,0);
  end;
  if (HasLocalization("BRA") and HasAvalara) then begin
    h1 = h1+20;
    EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
    EditField(h1,v+=vs,-20,"House-Complement",Normal,ShipAddr2,false,0);
    EditField(h1,v+=vs,-20,"Neighbourh.",Normal,ShipAddr3,false,0);
    EditField(h1,v+=vs,200,"City",Normal,DelAddr3,false,0);
    EditField(h1+290,v,-20,"City Code",Normal,DelAvalaraCityCode,false,0);
    EditField(h1,v+=vs,200,"Postcode",Normal,DelAddr4,false,0);
    EditField(h1+290,v,-20,"State code",Normal,DelAvalaraStateCode,false,0);
  end else begin
    EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
    EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
    EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  end;
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+90,v,110,"",ViewOnly,DelCountryName,false,0);
    if (HasAvalara) then begin
      EditField(h1+290,v,-20,"Country Code",Normal,DelAvalaraCountryCode,false,0);
      EditField(h1,v+=vs,200,"Phone",Normal,DelPhone,false,0);//adr 5postcode
      EditField(h1+290,v,-20,"Email",Normal,DelEmail,false,0);//adr 5postcode
      v = v+vs;
    end;
  end;
  EditField(h2,v,150,"Delivery GLN",ViewOnly,DelRecipientGLN,false,0);
  EnterSkip(InvDate);
  if (HasLocalization("POL")) then begin
    Tile(9,170,false,"9",-); vs = 20;
    EditField(h1=h1+20,v=6,150,"#VAT# Exp. Doc. Type",Normal,POLVATExpDocType,false,SetSClass);
    StaticText(h1,v+=vs*2,"#VAT# Export Transaction Types",false);
    //CheckBox(h1,v+=6,0,"Mail Order (Out of the Country)",POLVATExpMailOrder);//to be removed after testing
    //CheckBox(h1,v+=16,0,"Telecommunication Services",POLVATExpTelServices);
    //CheckBox(h1,v+=16,0,"Sales to Connected Company",POLVATExpConnectedComp);
    //CheckBox(h1,v+=16,0,"Tripartite Goods Delivery by Second Party",POLVATExpTripartiteGoods);
    //CheckBox(h1,v+=16,0,"Touristic Services (GP)",POLVATExpTouristServicesGP);
    //CheckBox(h1,v+=16,0,"Antiques and Used Goods (GP)",POLVATExpUsedGoodsGP);
    //CheckBox(h1+250,v=(vs*2)+6,0,"Inside EU Goods (after import 42)",POLVATExpInsideEU42);
    //CheckBox(h1+250,v+=16,0,"Inside EU Goods (after import 63)",POLVATExpInsideEU63);
    //CheckBox(h1+250,v+=16,0,"Gift Voucher",POLVATExpGiftVoucher);
    //CheckBox(h1+250,v+=16,0,"Gift Voucher Payment",POLVATExpGiftVoucherPayment);
    //CheckBox(h1+250,v+=16,0,"Gift Voucher (GP)",POLVATExpGiftVoucherGP);
    //CheckBox(h1+250,v+=16,0,"Split VAT Invoice",SplitVATFlag);
    //CheckBox(h1+250,v+=16,0,"Facilitating Sale of Goods",FacilitateGoodsSale);//TRV:awaits Karls approval
    EditField(h1,v+=30,-40,"Invoice Classification",Normal,VATClassification,false,VATClassSClass);
  end;
  if (HasLocalization("BRA")) then begin
    Tile(9,200,false,"9",AdditionalInfo);
    StaticText(50,v=40,"Notes",true);
    TextField(60,50,-20,320,AdditionalInfo,0);
  end;
    if (HasLocalization("BOL")) then begin
    Tile(9,170,false,"9",-); vs = 20;
    EditField(h1=h1+20,v=6,-40,"Invoice Classification",Normal,VATClassification,false,VATClassSClass);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Invoice Status",'r',2,"IVInfoIVDsm");
    SpecialMenu("Item Status",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Open #NL# Transaction",'t',8,"OpenTRFromIV");
    SpecialMenu("Create #Credit Note#",' ',20,"CreateCreditNoteIVDsm");
    SpecialMenu("Add Subtotal",' ',12,"SubTotalLineIVDsm");
    SpecialMenu("Connect to Prepayment",' ',4,"ConnectToPrepayIVDsm");
/*not working yet
    SpecialMenu("Create Email",'m',23,"CreateMailFromIVDsm");
*/
  end else begin
//    SpecialMenu("Item Status",'I',0,"ItemStatusIVDsm");
    if (HasCustomerStatusReport) then begin 
      SpecialMenu("Customer Status",'e',0,"CUStatusIVDsm");
    end;
    SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
    SpecialMenu("Invoice Status",'r',2,"IVInfoIVDsm");
    SpecialMenu("Add Environment Tax",' ',19,"RepaIVsm");
    if (GuiType==kGuiiPhone) then begin
//      SpecialMenu("Sign",' ',10,"SignIVDsm");//what is that ? 
    end;
    /* TO REMOVE AFTER TESTING */
    //SpecialMenu("attach inv",' ',14,"AttachInvDsm");
    /* TO REMOVE AFTER TESTING */
    SpecialMenu("Change to Base 1",' ',14,"SwitchToBase1IVDsm");
    SpecialMenu("Connect to Prepayment",' ',4,"ConnectToPrepayIVDsm");
    SpecialMenu("Recalculate Discount",' ',11,"RecalcDiscountIVDsm");
    SpecialMenu("Recalculate Weight and Volume",' ',10,"RecalcWeightIVDsm");
    SpecialMenu("Update Currency Price List Items",' ',5,"UpdatePricesIVDsm");
    SpecialMenu("Print Cash IN-OUT",' ',7,"PrintCashInOutIVDsm");
    if (HasLocalization("PRT")==false) then begin 
      SpecialMenu("Print Proforma Invoice",' ',3,"PrintProformaIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("Send to Fiscal Device",' ',19,"PrintToFiscPrntIVDsm");
      SpecialMenu("Credit Card Payment",' ',22,"CCPayIVDsm");
      SpecialMenu("Edit #Instalments#",' ',24,"EditInstalmentIVDsm");
    end;
    if (HasLocalization("EST,LTU")) then begin
      SpecialMenu("Resend E-Invoice",' ',21,"ResendEstEIVDsm");
    end else begin
      if (HasLocalization("BOL,URY,PAN,PRY,POL")) then begin
        SpecialMenu("Resend E-Invoice",'n',19,"ResetEInvoiceQueueStatusDsm");
      end else begin
        SpecialMenu("Resend E-Invoice",' ',21,"ResendEIVDsm");
      end;
    end;
    if (HasLocalization("ARG")) then begin
      SpecialMenu("Send Argentinean E-Invoice",'n',17,"SendArgEInvIVDsm");
      SpecialMenu("Retrieve CAE/CAEA",'',17,"RetriveCAEArgEInvIVDsm");
    end;
    if (HasLocalization("URY")) then begin
      SpecialMenu("Send Uruguayan E-Invoice",'n',17,"SendUryEInvIVDsm");
    end;
    if (HasLocalization("PRY")) then begin
      SpecialMenu("Send Paraguayan E-Invoice",'n',17,"SendPryEInvIVDsm");
      SpecialMenu("Check Paraguayan E-Invoice Status",'',18,"GetStatusPryEInvIVDsm");   
      SpecialMenu("Invalidate Paraguayan E-Invoice",'',20,"PryInvalidateIVDsm");
    end;
    if (HasLocalization("TUR")) then begin
      //SpecialMenu("Get Turkish List - TEST",'n',17,"CreateTURExportXMLDsm");
      SpecialMenu("Send Turkish E-Invoice",'n',17,"SendTurEInvIVDsm");
    end;
    
    if (HasLocalization("BOL")) then begin
      SpecialMenu("Send Bolivian E-Invoice",'n',17,"SendBolEInvIVDsm");
      SpecialMenu("Generate Bolivian E-Invoice PDF",' ',18, "GenerateBOLDescargaPDFIVDsm");
    end;
    if (HasLocalization("PAN")) then begin
      SpecialMenu("Send Panamanian E-Invoice",'n',17,"SendPANEInvIVDsm");
      SpecialMenu("Generate Panamanian E-Invoice PDF",' ',18, "GenerateDescargaPDFIVDsm");
    end;
    if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican E-Invoice",'i',17,"SendMexEInvIVDsm");
    end;
    if (HasLocalization("POL")) then begin
      SpecialMenu("Send Polish E-Invoice",'n',17,"SendPOLEInvIVDsm");
    end;
    if (HasLocalization("BRA")) then begin
      SpecialMenu("Send Brazilian E-Invoice",' ',27,"SendBraEInvIVDsm");
      SpecialMenu("Get Bank Receipt",' ',28,"GetBankReceiptDsm");
      SpecialMenu("Generate Boleto",' ',29,"GenerateBoletoIVDsm"); 
    end;
    if (HasLocalization("FIN")) then begin
      SpecialMenu("Export Finvoice",' ',28,"ExportFinvoiceIVDsm");
    end;
    if (HasLocalization("CAN,USA")) then begin
      SpecialMenu("Get Tax Rates",' ',0,"IVGetTaxRates2Dsm");
    end;
    if (HasLocalization("SAU")) then begin
      SpecialMenu("ZATCA Export Invoice XML",' ',0,"ZatcaExportIVDsm");
    end;
    
    SpecialMenu("Open #NL# Transaction",'t',8,"OpenTRFromIV");
    if (StandardHansa==false) then begin
      SpecialMenu("Manager's Discount Override",' ',24,"MgrsDiscOverrideIVDsm");
      if (HasTaxMatrix) then begin
        SpecialMenu("Open Tax Matrix",' ',25,"TestVatMatrixIVDsm");
      end;
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"IVSendforAcceptanceIVDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    if (HasLocalization("BRA") and HasAvalara) then begin
      BlockLoad(TRIb);
      if (TRIb.Enable==1) then begin 
        SpecialMenu("Calculate Taxes - Brazil (Avalara)",'',17,"BrazilAvalaraJsonFileForSendingIVDsm");
        //SpecialMenu("Generate RPS Document No.",' ',2,"GenRPSDocNoDsm");
        SpecialMenu("Retrieve NF PDF",' ',2,"RetrieveNFPDFDsm");
        SpecialMenu("Cancel Nota Fiscal",' ',2,"CancelNFPDFDsm");
      end;
      if (TRIb.SystaxEnable==1) then begin 
        SpecialMenu("Calculate Taxes - Brazil (Systax)",'',17,"BrazilSystaxCalculateTaxesIVDsm");
      end;  
    end;
    if (AtradiusBl.Enable) then begin
      SpecialMenu("Send for Atradius Debt Collection",' ',2,"SendCaseToAtradiusWebRequestDsm");
    end;
    SpecialMenu("Renew PDF attachment",' ',12,"UpdatePDFIVDsm");  //OBS
    SpecialMenu("Penalty calculation",' ',29,"CalculateMSIntSumRnsm"); //OBS
    SpecialMenu("Cancel invoice",' ',30,"MSUndoInvSm"); //OBS
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM) then begin
//      SpecialMenu("Activity",'c',9,"CreateActFromIVDsm");
    end;
    SpecialMenu("Cash In",' ',1,"DoCLInFromIVD");
    SpecialMenu("#Credit Note#",' ',20,"CreateCreditNoteIVDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Credit Agreement",' ',25,"CreateCredManIVsm");
    end;
    SpecialMenu("Contract",' ',13,"COFromIVDsm");
    if (StandardHansa==false) then begin
      if (HasLocalization("PRT")==false) then begin
        SpecialMenu("Correction Invoice",' ',16,"CorrectionIVsm");
      end;
      SpecialMenu("Debit Note",' ',20,"CreateDebitNoteIVDsm");
      SpecialMenu("EDI Invoice",' ',9,"DoEDIInvFromIVD");
    end;
    SpecialMenu("Email",'m',23,"CreateMailFromIVDsm");
    if (HasLocalization("UKR")) then begin
      SpecialMenu("First Event",' ',18,"FirstEventIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("#Instalment# Receipts",' ',6,"CreateInstalmentsIVDsm");
      if (HasLocalization("HRV,POL,RUS,SRB,SLV,SVN,UKR")) then begin
        SpecialMenu("#VAT# Correction #S/L#",' ',17,"VATCorrectionIVsm");
      end;

    //  SpecialMenu("GSXAutoEnrollmentIVDsm",'w',26,"GSXAutoEnrollmentIVDsm");

    //  SpecialMenu("TESTSendArgEInvoiceFECAESolicitar",' ',25,"TESTSendArgEInvoiceFECAESolicitar");
    //  SpecialMenu("Test Mex E-Invoices",'1',0,"TestMexEInvoices");
    end;
    SpecialMenu("Add Customer",' ',0,"AddCustomerIVDsm");
    SpecialMenu("Add Item",' ',0,"AddItemIVDsm");
    SpecialMenu("Receipt",' ',0,"ReceiptFromIVDsm");
  end;
  
end else begin
  date td;
  integer wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v;
  record IVVc IVr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;

  BlockLoad(LMb);

  //StopAlert(LMb.POSButtonGroup);

  wn = CurWindow;
  GetScreenSize(wn,tp,lt,bm,rt);
  switch (GuiType) begin
    case kGuiCocoa:
      bm = bm - 80;
    case kGuiWindowsDesktop:
      tp = tp + 30;
      bm = bm - 40;
      rt = rt - 55;
      lt = lt - 45;
    case kGuiGDI:
      tp = tp + 30;
      bm = bm - 40;
      rt = rt - 55;
      lt = lt - 45;
    case kGuiWPF:
      tp = tp + 30;
      bm = bm - 40;
      rt = rt - 55;
      lt = lt - 45;
  end;

  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  if (page<1) then begin
    page = 1;
  end;
  // stopalert("about to call ReadPOSButtons, page:" & page);
  ReadPOSButtons("IVDClass",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr);
  SetWRect(lt,tp,rt,bm);
    AbsoluteWindowSize;
  if (TestEnablerFile("EnNoFullscreenWindow")==false) then begin
    FullscreenWindow;
  end;
  BrowseButtons(false);
  BrowseButtons(false);
  DynamicWindow;
  UseView(IVVc);
  ActiveFieldOnNew("ivcashcommand");
  if (GuiType!=kGuiiPhone) then begin
    ToolBar;
//      PushButton(-340,5,-340 + 34,5+18,ToolPasteSpec,"v");
    EndToolBar;
  end;

  v = 20;
  h = -300; h2 = -150; h3 = -70; h4 = -10;

  wn = CurWindow;
  if (wn>0) then begin
    switch (GetWindowClass(wn)) begin
      case "IVDClass":
        GetWindowRecord(wn,IVr);
    end;
  end;
  if (GuiType==kGuiiPhone) then begin
    if (TouchScreenLookVertical) then begin
      v = 20;
      h = -300; h2 = -150; h3 = -70; h4 = -10;

      td = IVr.TransDate;
      if (blankdate(td)) then begin td = CurrentDate; end;
      tt = IVr.TransTime;
      if (blanktime(tt)) then begin tt = CurrentTime; end;
      lmc = IVr.MachineName;
      if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
      sm = IVr.SalesMan;
      if (blank(sm)) then begin sm = CurrentUser; end;
      nr = "Invoice: ";
      if (IVr.SerNr>0) then begin
        nr = nr & IVr.SerNr;
      end;

      if (IsEnterprise) then begin
        if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
          sessdesc = "POS Session opened";
        end else begin
          sessdesc = "*** POS Session closed ***";
        end;
      end;

      DisplayRecordDetails_ENG(10,-100,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
        IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
        IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",
        "",blankval,sessdesc,true,IVr.OfficialSerNr,
        IVr.TaxAdminServSeal);

      SoftEditFieldTLX(360,-120,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(360,-80,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);

      SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

      DrawPOSInterface2_ENG(bc1,bc2,POSBr,"",100,bm);
    end else begin

      v = 20;
      h = -300; h2 = -150; h3 = -70; h4 = -10;

      td = IVr.TransDate;
      if (blankdate(td)) then begin td = CurrentDate; end;
      tt = IVr.TransTime;
      if (blanktime(tt)) then begin tt = CurrentTime; end;
      lmc = IVr.MachineName;
      if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
      sm = IVr.SalesMan;
      if (blank(sm)) then begin sm = CurrentUser; end;
      nr = "Invoice: ";
      if (IVr.SerNr>0) then begin
        nr = nr & IVr.SerNr;
      end;

      if (IsEnterprise) then begin
        if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
          sessdesc = "POS Session opened";
        end else begin
          sessdesc = "*** POS Session closed ***";
        end;
      end;

      DisplayRecordDetails_ENG(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,
        IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,
        IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","",
        "",blankval,sessdesc,true,IVr.OfficialSerNr,
        IVr.TaxAdminServSeal);


      if (bm<650) then begin
        SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
        SoftEditFieldTLX(360,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);
      end else begin
        SoftEditFieldTLX(360,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
        SoftEditFieldTLX(360,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);
      end;

      SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

      DrawPOSInterface2_ENG(bc1,bc2,POSBr,"",100,bm);
    end;
    BottomBar;
  end else begin
    td = IVr.TransDate;
    if (blankdate(td)) then begin td = CurrentDate; end;
    tt = IVr.TransTime;
    if (blanktime(tt)) then begin tt = CurrentTime; end;
    lmc = IVr.MachineName;
    if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
    sm = IVr.SalesMan;
    if (blank(sm)) then begin sm = CurrentUser; end;
    nr = "Invoice: ";
    if (IVr.SerNr>0) then begin
      nr = nr & IVr.SerNr;
    end;

    if (IsSessionOpen(IVr.MachineName,IVr.DrawerCode,CurrentDate,CurrentTime)) then begin
      sessdesc = "POS Session opened";
    end else begin
      sessdesc = "*** POS Session closed ***";
    end;

    // StopAlert("IsSessionOpen(" & IVr.MachineName & "," & IVr.DrawerCode & "," & IVr.TransDate & "," & IVr.TransTime & "); -> " & sessdesc);

    DisplayRecordDetails_ENG(10,26,compname,td,tt,lmc,sm,nr,IVr.CustCode,IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.Phone,IVr.Objects,IVr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,"","","",blankval,sessdesc,true,IVr.OfficialSerNr,IVr.TaxAdminServSeal);

    if (bm<650) then begin
      SoftEditFieldTLX(420,6,h4,"",M4Str,ViewOnly,100,20,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(420,36,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line2",true,0);
    end else begin
      SoftEditFieldTLX(520,6,h4,"",M4Str,ViewOnly,100,30,patM4black,"CustomerDisplayData_Line1",true,0);
      SoftEditFieldTLX(520,46,h4,"",M4Str,ViewOnly,100,50,patM4black,"CustomerDisplayData_Line2",true,0);
    end;

    switch (LMb.POSButtonsPosition) begin
      case kPOSButtonsPositionLeft:
        SoftEditField(110,-22,200,"Item/Command"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
      case kPOSButtonsPositionRight:
        SoftEditField(-260,-22,200,"Item/Command"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
    end;
    SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);
    DrawPOSInterface2_ENG(bc1,bc2,POSBr,"",100,bm);
    BottomBar;
  end;
end;
  EndWindow;
end;


window PMTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  Integer f,flipnr,pos;

  WindowBegin("Payment Modes",PMTClass,CGHbl,HBlRecType);
  SetBlid(PMBlock);
  if (HasLocalization("AUS") or HasLocalization("POL")) then begin 
    SetWRect(20,80,810,291);
  end else begin
    SetWRect(20,80,710,291);
  end;
  Sizeable(-1,-1,0,0);
  h = 20; v = 27;
  MatrixBegin(h,v,-50,-20,-,99);
  Flip(0);
  MatCol(1,25,"Code",0,Code,false,0);
  if (HasModNL) then begin
    MatCol(1,70,"Account",0,AccNr,false,AccSClass);
  end else begin
    MatCol(1,70,"Comment",0,Comment,false,0);
  end;
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasModNL) then begin
    MatCol(1,150,"Comment",0,Comment,false,0);
  end;
  if ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("AUS,FIN") or HasBankImport) then begin
    MatCol(1,-420,"#Sort Code#",0,SortCode,false,0);
    MatCol(1,-340,"Bank A/C No.",0,BankNr,false,0);
    MatCol(1,-170,"Bank Name",0,BankName,false,0);
    MatCol(1,-80,"Bank",0,BankCode,false,BankSClass);
  end else begin
    MatCol(1,-280,"Bank A/C No",0,BankNr,false,0);
    if (IsEnterprise) then begin
      MatCol(1,-180,"#Sort Code#",0,SortCode,false,0);
    end;
    MatCol(1,-80,"Bank Name",0,BankName,false,0);
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,150,"Form Template",0,DocName,false,DocSClass);
    MatCol(1,230,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(1,-100,"Type",0,CheckType,false,SetSClass);
  end else begin
    if ((HasModSL and HasLocalization("PRT")) or HasLocalization("HRV") or HasModCheck) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-100,"Type",0,CheckType,false,SetSClass);
    end;
  end;
  if (HasNumberSeries) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,150,"Comment",0,Comment,false,0);
    MatCol(1,280,"From",0,TSerStartIn,false,0);
    MatCol(1,320,"To",0,TSerEndIn,false,0);
    MatCol(1,360,"From",0,TSerStartOut,false,0);
    MatCol(1,400,"To",0,TSerEndOut,false,0);
    MatCol(1,-95,"#N/L#",0,DonotGenTrans,false,SetSClass);
  end;
/*
I think no one uses it anymore, cheques are used insted of
  Flip(4);
  MatCol(1,150,"Tags/Objects",0,Objects,false,ObjSClass);
  MatCol(1,-200,"Prel.Acc.In",0,PrelAccIn,false,AccSClass);
  MatCol(1,-100,"Prel.Acc.Out",0,PrelAccOut,false,AccSClass);
*/
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,150,"Bank",0,BankCode,false,BankSClass);
    MatCol(1,-245,"Tax %",0,TAX,true,0);
    MatCol(1,-185,"Cash A/C",0,TAXAccIn,false,AccSClass);
    MatCol(1,-120,"Tax A/C",0,TAXAccOut,false,AccSClass);
    MatCol(1,-50,"Force",0,ForceBankVals,false,SetSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,120,"POS Change A/C",0,ChangeAcc,false,AccSClass);
    //OBS-->
    /*
    pos = -300;
    MatCol(1,pos,"Cash A/C",0,TAXAccIn,false,AccSClass); pos = pos + 95;
    MatCol(1,pos,"Back Office A/C",0,BackOfficeAcc,false,AccSClass); pos = pos + 95;
    MatCol(1,pos,"Difference A/C",0,DiffrenceAcc,false,AccSClass); pos = pos + 95;
    */
    MatCol(1,-265,"Cash A/C",0,TAXAccIn,false,AccSClass); //OBS edit
    MatCol(1,-185,"Pay.pr.",0,INPayPriority,false,INPayPrioritySClass); //OBS added
    MatCol(1,-115,"Back Office A/C",0,BackOfficeAcc,false,AccSClass); //OBS Changed pos
    MatCol(1,-60,"Difference A/C",0,DiffrenceAcc,false,AccSClass); //OBS changed pos
    //OBS<--
    if (HasYapily) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatColTL(1,120,"Yapily Status",0,M4Set,ViewOnly,746,YapilyStatus,false,SetSClass);
      MatColTL(1,190,"Valid Until",0,M4Date,ViewOnly,0,YapilyValidUntilDate,false,0);
      MatCol(1,250,"Time",ViewOnly,EBValidUntilTime,false,0);
      MatCol(1,-200,"EB Account UId",ViewOnly,EBAccountUId,false,0);
      //MatCol(1,-200,"EB Auth. Code",ViewOnly,EBAuthCode,false,0);
      MatCol(1,-100,"EB Session Id",ViewOnly,EBSessionId,false,0);
    end;

    if (HasLocalization("ITA")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      pos = -260;
      MatCol(1,pos,"PA Code",0,PubAdmCode,false,0);
    end;
    // if (HasLocalization("ARE,AUS,BRA,CAN,CHN,COL,FIN,GBR,JOR,KEN,LBN,MEX,USA,ZAF,ZWE")) then begin
    //   Flip(flipnr); flipnr = flipnr + 1;
    //   pos = -260;
    //   MatCol(1,pos,"Account Id",0,YodleeaccountId,false,YodleeAccountIdSClass); pos = pos + 95;
    // end;
  end else begin
    // if (HasYodlee) then begin
    //   Flip(flipnr); flipnr = flipnr + 1;
    //   pos = -260;
    //   MatCol(1,pos,"Account Id",0,YodleeaccountId,false,YodleeAccountIdSClass); pos = pos + 95;
    // end;
  end;
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    MatCol(1,-150,"Split VAT A/C",0,SplitVATAcc,false,AccSClass); pos = pos + 95;
  end;
  if (HasYapily) then begin
    RowMenuBegin("");
    RowMenuItem(0,"Yapily - Authorise Bank Account(s)",'','',0,"YapilyAuthBankDsm");
    RowMenuItem(1,"Yapily - Revoke Authorisation",'','',0,"YapilyRevokeAuthDsm");
    RowMenuItem(1,"Yapily - Authorisation History Report",'','',0,"YapilyAuthHistRepDsm");
    RowMenuItem(1,"EnableBanking - Authorise Bank Account(s)",'','',0,"EnableBankingAuthBankDsm");
    EndRowMenu;
  end;

  EndMatrix;
  vs=20;
//  v=28;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  EndWindow;
end;

//TMK:: START OF RECEIPT POS 

window IPPOSLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real hoff,pos;
  WindowBegin("Receipts POS",IPPOSLClass,CGmlist,-);
  SetWRect(20,80,669,291);
  Sizeable(-1,-1,0,0);
  SpawnClass(POSIPDClass);
  UseView(IPVc);
  if (GuiType==kGuiiPhone) then begin
    hoff = 50;
  end;
  RecordList(4,17,-21,-39);
  if (HasOfficialSerNr and HasLocalization("AGO,ARG,BRA,HRV,PRT,RUS,SVN,SRB")) then begin
    RlColKey(4,4,"No.",SerNr,false,SerNr); pos = 76;
    RlColKey(pos,pos,"Official No.",OfficialSerNr,false,OfficialSerNr); pos = pos + 110;
  end else begin
    RlColKey(4,4,"No.",SerNr,false,SerNr); pos = 76;
  end;
  RlColKey(pos,pos,  "OK",OKMark,false,OKMark); pos = pos + 35;
  RlColKey(pos,pos,"Trans. Date",TransDate,false,TransDate); pos = pos + 74;
  RlColKey(pos+hoff,pos+hoff,"Reference",RecNumber,false,RecNumber); pos = pos + 90;
  if (IsEnterprise) then begin
    RlCol   (pos+hoff,pos+hoff,"Comment",Comment,false);  pos = pos + 100;
  end else begin
    RlCol   (pos+hoff,pos+hoff,"Comment",Comment,false);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    RlColKey(-121,-121,"Sum",CurPayVal,true,CurPayVal);
    RlCol   (-30,-30,"Cur.",PayCurCode,true);
  end else begin
    RlColKey   (-90,-90,"Sum",CurPayVal,true,CurPayVal);
  end;
  SearchField("Search");

  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    RowMenuItem(0,"OK",'G','G',4312,"OKIPLsm");
    EndRowMenu;
    if (IsEnterprise) then begin
      SpecMenuGroup("",kSpecMenuGroupTypeButtonsInBottomBarRight,0);
      SpecialMenuWithIcon("Create Receipts Suggestion",' ',4313,1,"IPFromIPLsm");
      SpecialMenuWithIcon("Export Direct Debit",' ',4313,2,"IPDDExpIPLsm");
    end;
  end else begin
    SpecialMenu("OK",'G',0,"OKIPLsm");
    if (IsEnterprise) then begin
      SpecialMenu("Export Direct Debit",' ',2,"IPDDExpIPLsm");
    end;
    if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican E-Receipts",'n',3,"SendMexEIPLsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (IsEnterprise) then begin
      SpecialMenu("Receipts Suggestion",' ',1,"IPFromIPLsm");
    end;
  end;
  EndWindow;
end;


window POSIPDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,t,v,vm,vs,fl,v2;
  record CYBlock CYb;
  Integer f,flipnr;

  BlockLoad(CYb);
  WindowBegin("Receipt POS",POSIPDClass,CGview,-);
  if (HasLocalization("POL")) then begin
    SetWRect(20,80,830,380);
  end else begin
    SetWRect(20,80,730,380);
  end;
  Sizeable(-1,-1,0,0);
  UseView(IPVc);
  FormName(ReceiptPOSForm);
  ActiveFieldOnNew("TransDate");
  h = 100; h2 = 262; h3 = 470;v = 6; vs = 20;
  if (HasNumberSeries) then begin
    EditField(h,v,80,"No.",ViewOnly,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"No.",ViewOnly,SerNr,false,0);
  end;
  EditField(h2,v,82,"Trans. Date",ViewOnly,TransDate,false,PasteCurDate);
  EditField(h3-60,v,100,"Time",ViewOnly,RegTime,false,0);
  EditField(h3+100,v,50,"Sign",ViewOnly,SalesMan,false,0);
  EnterSkip(PayMode);

  CheckBox(h4=-100,v,0,"OK",OKFlag);
  EditField(h,v+=20,80,"#Payment Mode#",Normal,PayMode,false,PMSClass);

  EditField(h2-20,v,140,"Mode",Normal,Comment,false,0);
  EditField(h2+200,v,70,"Machine",ViewOnly,MachineName,false,0);
  EditField(h2+330,v,100,"Drawer",ViewOnly,DrawerCode,false,0);
  h4 = h3 + 130;
  
  SoftEditField(h,v+=vs,100,"Customer",Normal ,"POSIPDClassCustomer",false,CUSClass,M4Code,255);
  EditField(h2,v,100,"Recieved",Normal,PayVal,false,0);
  EditField(h3,v,100,"Change",ViewOnly,ChangeVal,false,0);
  EditField(h3,v+20,100,"Credit",ViewOnly,CreditVal,false,0); //jh 
  CheckBox(h4,v,0,"Keep change",KeepChange);
  CheckBox(h4,v+20,0,"Use Credit",UseCredit);

  v=v+vs;
  HalPushButton(h2,v,h2+150,v+10,"POSIPDClassDistribute","Distribute amount"); // POSIPDClassDistribute
  EnterSkip(Math);
  if (HasMultiCurrency) then begin
    fl = 40;
    if (WindowsMode) then begin
      EditField(-267,-25,fl,"Currency",Normal,PayCurCode,false,CurncyCodeSClass);
    end else begin
      EditField(-267,-19,fl,"Currency",Normal,PayCurCode,false,CurncyCodeSClass);
    end;
  end;
  if (WindowsMode) then begin
    EditField(-142,-25,-40,"Deposited",Normal,CurPayVal,true,0);
  end else begin
    EditField(-142,-19,-40,"Deposited",Normal,CurPayVal,true,0);
  end;
  h=20;
  v=v+50;
  if (HasModCheck or HasMultiCurrency or HasPrepayments or (HasLocalization("RUS") and HasModSL) or HasLocalization("AUS,LTU,LVA")) then begin
    MatrixBegin(h,v,-50,-20,-,299);
  end else begin
    MatrixBegin(h,v,-40,-20,-,99);
  end;
  vm = v;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  if (HasPreferedOfficialSerNr) then begin
    if (HasLocalization("POL,RUS")) then begin
      MatCol(t=kReceiptRowTypeNormal,30,"#Invoice# No.",0,InvoiceOfficialSerNr,false,ARSClass);
    end else begin
      MatCol(t=kReceiptRowTypeNormal,30,"#Invoice# No.",0,InvoiceNr,false,ARSClass);
    end;
  end else begin
    MatCol(t=kReceiptRowTypeNormal,30,"#Invoice# No.",0,InvoiceNr,false,ARSClass);
  end;
  EnterSkip(RecVal);
  MatCol(t,125,"Customer",0,CustCode,false,CUSClass);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kReceiptRowTypeNormal,190,"Text",0,CustName,false,0);
  //MatCol(t,-350,"#I.# Cur.",0,InvCurncy,true,0);
  //MatCol(t,-310,"Open #Inv.# Value",0,InvOutstand,true,0);
  //MatCol(t,-220,"#Invoice# Value",0,InvVal,true,0);

  MatCol(t,-350,"Item",0,rkRecNumber,true,0); //TMK::Changed ArtCode to rkRecNumber
  MatCol(t,-250,"Description",0,ArtCodeName,true,0); //TMK::Changed Spec to ArtCodeName
  //MatCol(t,-130,"R. Cur.",0,RecCurncy,true,0);
  MatCol(t,-90,"Received Value",0,RecVal,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=kReceiptRowTypeNormal,190,"Text",0,CustName,false,0);
  MatCol(t,-320,"Order No.",0,OrderNr,false,0);

  MatCol(t,-230,"Prepayment No.",0,CUPNr,false,0);
  MatCol(t,-130,"R. Cur.",0,RecCurncy,true,0);
  MatCol(t,-90,"Received Value",0,RecVal,true,0);
  InsertRowTest;
  DeleteRowTest;
  EndMatrix;
  vs = 22;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  vs = 20;
  
  EndWindow;
end;

//::TMK END OF RECEIPT POS
window IPDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,t,v,vm,vs,fl,v2;
  record CYBlock CYb;
  Integer f,flipnr;

  BlockLoad(CYb);
  WindowBegin("Receipt",IPDClass,CGview,-);
  if (HasLocalization("POL")) then begin
    SetWRect(20,80,830,380);
  end else begin
    SetWRect(20,80,800,380); //OBS edit
  end;
  Sizeable(-1,-1,0,0);
  UseView(IPVc);
  ActiveFieldOnNew("TransDate");
  h = 100; h2 = 262; h3 = 470;v = 6; vs = 20;
  if (HasNumberSeries) then begin
    EditField(h,v,80,"No.",St_i,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"No.",St_i,SerNr,false,0);
  end;
  EditField(h2,v,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  EnterSkip(PayMode);
  if (IsEnterprise) then begin
    EditField(h3,v,-40,"Reference",Normal,RecNumber,false,0);
  end else begin
    CheckBox(h4=-100,v,0,"OK",OKFlag);
  end;
  EditField(h,v+=20,80,"#Payment Mode#",Normal,PayMode,false,PMSClass);
  EnterSkip(Math);
  EditField(h2,v,-40,"Comment",Normal,Comment,false,0);
  if (IsEnterprise) then begin
    EditField(h,v+=20,80,"Auth. Code",ViewOnly,AuthorizationCode,false,0);
    EditField(h2,v,82,"Trans. Time",Normal,TransTime,false,PasteCurTime);
    CheckBox(-300,v,0,"Cust. Info on #N/L# Transaction",ARonTR);
    CheckBox(-300,v+16,0,"OK payment VAT",IPBookVAT);   //OBS
    CheckBox(h4=-100,v,0,"OK",OKFlag); 
  end else begin
    EditField(h2,v+=vs,150,"Reference",Normal,RecNumber,false,0);
  end;
  if (HasLocalization("ARG,MEX,PRT,MOZ")) then begin  
    v = v + vs;
    if (HasOfficialSerNr) then begin
      EditField(h,v,135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
      v2 = 20; 
    end;
  end;
  if (HasLocalization("PRT")) then begin  
    if (HasNumberSeries) then begin
      EditField(h2+104,v,100,"Recovered Official No.",Normal,OfficialSerNr2,false,0);
      EditField(h3+90,v,135,"Status",Normal,Status,false,SetSClass);  v = v + vs;
    end;
  end;
  EditField(h,v+=vs,80,"Pay. prior.",Normal,INPayPriority,false,INPayPrioritySClass); //OBS
  // EditField(h2,v,82,"T/V numurs",Normal,DebtRepAgreeNr,false,0); //OBS
  // EditField(h3,v,80,"Priekš. apm. prioritāte",Normal,PrePayPriority,false,INPayPriority2SClass); //OBS
  EnterSkip(Math);
  if (HasMultiCurrency) then begin
    fl = 40;
//    if (GuiType==kGuiiPhone) then begin fl = 70; end;
    if (WindowsMode) then begin
      EditField(-267,-25,fl,"Currency",Normal,PayCurCode,false,CurncyCodeSClass);
    end else begin
      EditField(-267,-19,fl,"Currency",Normal,PayCurCode,false,CurncyCodeSClass);
    end;
  end;
  if (WindowsMode) then begin
    EditField(-142,-25,-40,"Deposited",Normal,CurPayVal,true,0);
  end else begin
    EditField(-142,-19,-40,"Deposited",Normal,CurPayVal,true,0);
  end;
  h=20; v = 91 + v2 + 16; //OBS edit
  if (HasModCheck or HasMultiCurrency or HasPrepayments or (HasLocalization("RUS") and HasModSL) or HasLocalization("AUS,LTU,LVA")) then begin
    MatrixBegin(h,v,-50,-20,-,299);
  end else begin
    MatrixBegin(h,v,-40,-20,-,99);
  end;
  vm = v;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  if (HasPreferedOfficialSerNr) then begin
    if (HasLocalization("POL,RUS")) then begin
      MatCol(t=kReceiptRowTypeNormal,30,"#Invoice# No.",0,InvoiceOfficialSerNr,false,ARSClass);
    end else begin 
      MatCol(t=kReceiptRowTypeNormal,30,"#Invoice# No.",0,InvoiceNr,false,ARSClass);
    end;
  end else begin
    MatCol(t=kReceiptRowTypeNormal,30,"#Invoice# No.",0,InvoiceNr,false,ARSClass);
  end;
  EnterSkip(RecVal);
  MatCol(t,100,"Contract",0,ContractNr,false,NAContractSClass); //OBS
  MatCol(t,155,"Customer",0,CustCode,false,CUSClass); //OBS edit
  if (HasPreferedOfficialSerNr) then begin
    MatCol(t=kReceiptRowTypeSettlementDiscount,30,"",0,InvoiceOfficialSerNr,false,ARSClass);
  end else begin
    MatCol(t=kReceiptRowTypeSettlementDiscount,30,"",0,InvoiceNr,false,ARSClass);
  end;
  MatText(t,125,"Set. Disc.",false);
  if (HasObjects) then begin
    MatCol(t,190,"Tag/Object",0,Objects,false,ObjSClass);
  end;
  MatCol(t,-390,"I.Cur",0,InvCurncy,true,0);
  MatCol(t,-350,"#Invoice# Val",0,InvVal,true,0);
  MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
  MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Received Value",0,RecVal,true,0);
  if (HasPreferedOfficialSerNr) then begin
    EnterSkip(InvoiceOfficialSerNr);
    MatCol(t=kReceiptRowTypeWriteoff,30,"",0,InvoiceOfficialSerNr,false,ARSClass);
  end else begin
    EnterSkip(InvoiceNr);
    MatCol(t=kReceiptRowTypeWriteoff,30,"",0,InvoiceNr,false,ARSClass);
  end;
  MatText(t,125,"Writeoff",false);
  MatCol(t,-460,"",0,WriteOffAcc,false,AccSClass);
  if (HasObjects) then begin
    MatCol(t,-360,"Tag/Object",0,Objects,false,ObjSClass);
  end;
  MatCol(t=kReceiptRowTypeBankFee,30,"",0,InvoiceNr,false,ARSClass);
  MatText(t,125,"Fee",false);
  MatCol(t,-390,"I.Cur",0,InvCurncy,true,0);
  MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
  MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
  MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Received Value",0,RecVal,true,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  EnterSkip(PayDate);
  MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);
  /* //OBS
  if (HasObjects and IsEnterprise==false) then begin
    MatCol(t,270,"Tag/Object",0,Objects,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
    vm = -380;
  end else begin
    vm = -320;
  end;
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    MatCol(t,vm,"Split VAT",0,SplitVAT,true,0);
  end;
  if (IsEnterprise) then begin
    MatCol(t,-325,"Pay. Date",0,PayDate,false,0);
  end;
  */ //OBS 
  MatCol(t,-450,"Item",0,rkRecNumber,false,INSClass); //OBS
  MatColTL(t,-380,"Name",0,-1,ViewOnly,-1,ArtCodeName,false,0); //OBS
  MatColTL(t,-260,"Address",0,-1,ViewOnly,-1,CustAddress,false,0); //OBS
  EnterSkip(RecVal);
  if (HasMultiCurrency) then begin
    // MatCol(t,-255,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass); //OBS
    // MatCol(t,-215,"Bank Amount",0,BankVal,true,0); //OBS
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"I.Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
  end else begin
  if (HasLocalization("LTU,LVA")) then begin
    MatCol(t,-180,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);  //OBS edit
    MatCol(t,-270,"Open #Inv.# Value",0,InvOutstand,false,0);
    MatCol(t,-180,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
  end else begin
    MatCol(t,-200,"Open #Inv.# Value",0,InvOutstand,false,0); //OBS edit
    MatCol(t,-135,"#Invoice# Value",0,InvVal,true,0); //OBS edit
    MatCol(t,-80,"Received Value",0,RecVal,true,0); //OBS edit
  end;
  MatCol(t=kReceiptRowTypeWriteoff,-270,"Open #Inv.# Value",0,InvOutstand,false,0);
  MatCol(t,-180,"#Invoice# Value",0,InvVal,true,0);
  MatCol(t,-90,"Received Value",0,RecVal,true,0);
  end;
  if (HasMultiCurrency) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);  //OBS edit
    MatCol(t,-350,"#I.# Cur.",0,InvCurncy,true,0);
    MatCol(t,-310,"Open #Inv.# Value",0,InvOutstand,true,0);
    MatCol(t,-220,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"I.Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    if (HasLocalization("POL")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);  //OBS edit
      MatCol(t,-340,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
      MatCol(t,-290,"Bank Amount",0,BankVal,true,0);
      MatCol(t,-220,"To B. 1",0,ToRateB1BankVal,true,0);
      MatCol(t,-160,"Bank in B. 1",0,B1BankVal,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);  //OBS edit
    MatCol(t,-350,"Pay.date",0,PayDate,false,0); //OBS moved here
    MatCol(t,-270,"#P. Mode#",0,PayMode,false,PMSClass);
    if (StandardHansa==false) then begin
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
    end;
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"#I.#Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);  //OBS edit
    MatCol(t,-320,"Order No.",0,OrderNr,false,ORSClass);
    MatCol(t,-230,"Prepayment No.",0,CUPNr,false,ARPaySClass);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"#I.#Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);  //OBS edit
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      MatCol(1,-310,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      MatCol(1,-310,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
    MatCol(t,-270,"#VAT# Value",0,VATVal,false,0);
    MatCol(t,-200,"Extra Tax",0,TAX1Sum,false,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"#I.#Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Text",0,CustName,false,0);  //OBS edit
    MatCol(t,-260,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"I.Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Round Off A/C",0,RoundOffAcc,false,AccSClass);  //OBs edit
    MatCol(t,-360,"Round Off",0,RoundOff,true,0);
    if (StandardHansa==false) then begin
      MatCol(t,-300,"#Instalment#",0,InstNr,false,ARInstallSClass);
    end;
    MatCol(t,-170,"Reference Number",0,rkRecNumber,false,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"#I.#Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"Debtors A/C",0,ARAcc,false,AccSClass);  //OBS edit
    if (StandardHansa==false) then begin
      MatCol(t,-320,"Cred. Man. No.",0,CredManNr,false,CredManSClass);
    end;
    MatCol(t,-220,"Comment",0,Comment,false,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"#I.#Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kReceiptRowTypeNormal,200,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-410,"Bank Amt.",0,BankVal,true,0);
  //  MatCol(t,-340,"Bank Fee",0,BankFeeVal,true,0);
    MatCol(t,-280,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-210,"Bank Amt. in Cur. 1",0,B1BankVal,true,0);
    MatCol(t,-105,"Bank Amt. in Cur. 2",0,B2BankVal,true,0);
  //  MatCol(t,-200,"Fee %",0,BankFeePrc,true,0); /* What was this ?? */
  //  MatCol(t,-70,"Coef. Value",0,Coef,true,0);
    MatCol(t=kReceiptRowTypeWriteoff,-390,"#I.#Cur",0,InvCurncy,true,0);
    MatCol(t,-350,"#Invoice# Value",0,InvVal,true,0);
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Received Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,-470,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-430,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-350,"Rate",0,FrRateBankVal,true,0);
    MatCol(t,-310,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-240,"To B. Cur. 2",0,ToRateB2BankVal,true,0);
    MatCol(t,-170,"Base Rate 1",0,BaseRate1BankVal,true,0);
    MatCol(t,-90,"Base Rate 2",0,BaseRate2BankVal,true,0);
//    MatCol(t,-10,"Received Value",0,RecVal,true,0);
  end else begin
    if (HasLocalization("AUS")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kReceiptRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    end else begin
      if (HasModCheck) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kReceiptRowTypeNormal,190,"Text",0,Comment,false,0);
        MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
        MatCol(t,-100,"#Cheque# No.",0,ChequeNr,false,0);
      end;
    end;
    if (HasRussianPrepayment) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kReceiptRowTypeNormal,190,"Text",0,CustName,false,0);
      MatCol(1,-265,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-230,"#VAT# Value",0,VATVal,false,0);
      MatCol(t,-170,"Order No.",0,OrderNr,false,ORSClass);
      MatCol(t,-85,"Prepayment No.",0,CUPNr,false,ARPaySClass);
    end else begin
      if (IsBooks and IsStandardProduct==false) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kReceiptRowTypeNormal,-265,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        MatCol(t,-230,"#VAT# Value",0,VATVal,false,0);
        MatCol(t,-170,"Pay. Date",0,PayDate,false,0);
        MatCol(t,1,"Reference Number",0,rkRecNumber,false,0);
      end else begin
        if (HasPrepayments) then begin
          Flip(flipnr); flipnr = flipnr + 1;
          MatCol(t=kReceiptRowTypeNormal,200,"Prepayment No.",0,CUPNr,false,ARPaySClass);
          if (HasLocalization("LVA")) then begin
            MatCol(t,-265,"#V-Cd#",0,VATCode,false,VATCodeSClass);
            MatCol(t,-230,"#VAT# Value",0,VATVal,false,0);
          end;
          if (HasModSO) then begin
            MatCol(t,-170,"Order No.",0,OrderNr,false,ORSClass);
          end;
          MatCol(t,-130,"R. Cur.",0,RecCurncy,true,CurncyCodeSClass);
          MatCol(t,-90,"Received Value",0,RecVal,true,0);
        end;
      end;
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (HasAddFee) then begin
    RowMenuItem(0,"Add Fee",' ',' ',0,"NewFeeIPDsm");
  end;
  if (HasSettlementDiscount) then begin
    RowMenuItem(0,"Add Settlement Discount",' ',' ',0,"CashDiscountIPDsm");
  end;
  RowMenuItem(0,"Add Write-off",' ',' ',0,"NewWriteoffIPDsm");
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      RowMenuItem(0,"Distribute #Cheques#",' ',' ',0,"DistributeChequesIPDsm");
    end;
    if (IsEnterprise or (IsBooks and IsStandardProduct==false) or IsStandardUnused) then begin
      RowMenuItem(0,"Distribute Receipt",' ',' ',0,"IPExpandIPDsm");
    end;
    if (IsEnterprise) then begin
      RowMenuItem(0,"Calculate Amount",'=','=',0,"CalculateFieldIPDsm");
      RowMenuItem(0,"Write-off Prepayment",' ',' ',0,"WriteofPrepayIPDsm");
    end;
  end;
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    RowMenuItem(0,"Fill Split VAT",' ',' ',0,"FillSplitVATIPDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  vs = 20;

  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    if (HasAddFee) then begin
      SpecialMenu("Add Fee",' ',2,"NewFeeIPDsm");
    end;
    SpecialMenu("Check Receipt Amounts",' ',6,"IPInfoIPDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',9,"OpenTRFromIP");
    end;
    SpecialMenu("Down Payment",' ',7,"DownPayFromIPDsm");
  end else begin
    SpecialMenu("Check Receipt Amounts",' ',6,"IPInfoIPDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',9,"OpenTRFromIP");
    end;
    if (HasTaxMatrix) then begin
      SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixIPDsm");
    end;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        SpecialMenu("Credit Card Payment",' ',15,"CCPayIPDsm");
      end;
      SpecialMenu("Bank Statement",' ',16,"BankStIPDsm");
      SpecialMenu("Print Cash IN-OUT",' ',8,"PrintCashInOutIPDsm");
    end;
    if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican e-Receipt",'e',17,"SendMexEIPDsm");
    end;
    if (HasLocalization("PRT")) then begin
      SpecialMenu("Reprint Receipt",' ',8,"ReprintIPDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM or HasStandardCRM) then begin
//      SpecialMenu("Activity",'c',14,"ActFromIPDsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Cash In",' ',11,"CLInFromIPDsm");
      if (StandardHansa==false) then begin
        SpecialMenu("#Cheque#",'e',9,"CreateCheckIPDsm");
        if (HasLocalization("HRV,SRB,SVN,UKR")) then begin
          SpecialMenu("#VAT# Correction #S/L#",' ',17,"VATCorrectionIPDsm");
        end;
      end;
      SpecialMenu("Down Payment",' ',7,"DownPayFromIPDsm");
    end else begin
      if (HasLocalization("HRV,SRB,SVN,UKR")) then begin
        SpecialMenu("#VAT# Correction #S/L#",' ',17,"VATCorrectionIPDsm");
      end;
    end;
    if (HaseMail) then begin
//      SpecialMenu("Email",'m',18,"CreateMailFromIPDsm");
    end;
    if (HasRussianPrepayment) then begin
      SpecialMenu("Prepayment Invoice",' ',10,"IVFromPrepIPDsm");
    end;
  end;
  EndWindow;
end;

window IVLClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real pos;
  Boolean acptf;
  record EInvoiceBlock EIb;
  record AtradiusBlock AtradiusBl;
  
  WindowBegin("Invoices",IVLClass,CGmlist,-);
  pos = 820;
  if (HasHotelInterface) then begin
    pos = pos + 80;
  end;
  acptf = AcceptanceStatusColumnTest("IVVc");
  if (acptf) then begin
    pos = pos + 40;
  end;
  SetWRect(20,80,pos,298);
  Sizeable(-1,-1,0,0);
  SpawnClass(IVDClass);
  UseView(IVVc);
  BlockLoad(AtradiusBl);
  FormName(PrintIVL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Invoice Date",InvDate,false,InvDate);
  /* //OBS
  if (StandardHansa==false) then begin
    RlColKey(191,191,"Official No.",OfficialSerNr,false,OfficialSerNr);
  end;
  if (HasLocalization("MEX")) then begin
    RlColKey(270,270,"Order No.",OrderNr,false,OrderNr);
  end else begin
    RlColKey(301,301,"Order No.",OrderNr,false,OrderNr);
  end;
  pos = 381;
  if (HasHotelInterface) then begin
    RlColKey(pos,pos,"Rsrv. No.",JobNr,false,JobNr); pos = pos + 80;
  end;
  */ //OBS
  //OBs-->
  RlColKey(191,191,"Premises",FlatCode,false,FlatCode);
  RlColKey(300,300,"Contract",Contract,false,Contract);
  RlColKey(360,360,"Erf",BuildCode,false,BuildCode);
  RlColKey(469,469,"Invoice address",Addr1,false,Addr1)
  pos = 651;
  //OBS<--
  if (HasLocalization("MEX")) then begin
    RlColKey(pos-50,pos-50,"Customer",CustCode,false,CustCode);
  end else begin
    RlColKey(pos,pos,"Customer",CustCode,false,CustCode); pos = pos + 60;
  end;
  RlColKey(pos,pos,"Name",Addr0,false,Name);
  if (HasLocalization("ARG,BOL,EST,HRV,HUN,ITA,MEX,URY,PAN,TUR")) or (HasEInvoicing) then begin  
    if (acptf) then begin
      CalculatedColumn(-210,-210,"Appr.","IVLClassAcceptanceStatus",false);
    end;
    if (HasLocalization("MEX")) then begin
      RlColKey(-230,-230,"Total",Sum4,true,Sum4);
      RlCol(-160,-160,"",CredMark,true);
      if (HasMultiCurrency or HasBase2) then begin
        RlCol(-140,-140,"Cur.",CurncyCode,true);
      end;
      RlColKey(-100,-100,"UUID",OfficialSerNr2,true,OfficialSerNr2);
    end else begin
      RlColKey(-170,-170,"Total",Sum4,true,Sum4);
      RlCol(-100,-100,"",CredMark,true);
      if (HasMultiCurrency or HasBase2) then begin
        RlCol(-80,-80,"Cur.",CurncyCode,true);
      end;
    end;
    CalculatedColumn(-40,-40,"E-Inv.","IVLClassEInvFlagStatus",true);
  end else begin
    if (acptf) then begin
      CalculatedColumn(-170,-170,"Appr.","IVLClassAcceptanceStatus",false);
    end;
    if (HasLocalization("MEX")) then begin
      RlColKey(-190,-190,"Total",Sum4,true,Sum4);
      RlCol(-120,-120,"",CredMark,true);
      if (HasMultiCurrency or HasBase2) then begin
        RlCol(-100,-100,"Cur.",CurncyCode,true);
      end;
      RlColKey(-60,-60,"UUID",OfficialSerNr2,true,OfficialSerNr2);
    end else begin
      RlColKey(-130,-130,"Total",Sum4,true,Sum4);
      RlCol(-60,-60,"",CredMark,true);
      if (HasMultiCurrency or HasBase2) then begin
        RlCol(-40,-40,"Cur.",CurncyCode,true);
      end;
    end;
  end;
  RlCol(-1,-1,"",Invalid,true);
  SearchField("Search");
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(70,-30);
  end;
  SpecialMenu("OK",'G',0,"OKIVLsm");
  if (HasLocalization("PRT")==false) then begin
    SpecialMenu("Print Proforma Invoices",' ',1,"PrintIVLsm");
  end;
  SpecialMenu("Invoice Status",'r',2,"IVInfoIVLsm");
  if (HasLocalization("ARG")) then begin
    SpecialMenu("Send Argentinian E-Invoices",'n',3,"SendArgEInvIVLsm");
  end;
  if (HasLocalization("MEX")) then begin
    SpecialMenu("Send Mexican E-Invoices",'n',3,"SendMexEInvIVLsm");
  end;
  BlockLoad(EIb);
  if (HasLocalization("TUR")) and (EIb.OutTurEInvoices==1) then begin
    SpecialMenu("Electronic Invoice Status",'n',3,"HTSStatIVLsm");
  end;
  if (AtradiusBl.Enable) then begin
    SpecialMenu("Send for Atradius Debt Collection",' ',2,"SendCaseToAtradiusWebRequestLsm");
   end;
  EndWindow;
end;

window SearchCURClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Search for Contacts",SearchCURClass,CGRcW,RcType);
  SetWRect(64,80,509,298);
  vs =20;h=100;v=5;
  EditFieldTL(h,6 ,-20,"Search for",M4Str,Normal,40,f1,false,0);
  ButtonFrame(h,v=50,123,9,"Search In");
  RadioButton(h,v,2,0,"Name",ArtMode);
  RadioButton(h,v+=16,1,0,"No.",ArtMode);
  if (HasCustomerSearchKey) then begin
    RadioButton(h,v+=16,3,0,"Short",ArtMode);
  end;
  if (HasCategories) then begin
    RadioButton(h,v+=16,4,0,"Category",ArtMode);
  end;
  RadioButton(h,v+=16,5,0,"Phone",ArtMode);
  RadioButton(h,v+=16,6,0,"Contact",ArtMode);
  if (HasDepartments) then begin
    RadioButton(h,v+=16,7,0,"Department",ArtMode);
  end;
  if (HasEMail) then begin
    RadioButton(h,v+=16,8,0,"Email",ArtMode);
  end;
  RadioButton(h,v+=16,9,0,"Address",ArtMode); //OBS add
  RadioButton(h,v+=16,0,0,"Any",ArtMode);
  EndFrame;
  EndWindow;
end;

window CULClass:10
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Contacts",CULClass,CGmlist,-);
  SpawnClass(CUDClass);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,880,300);
  end else begin
    SetWRect(20,80,760,300);
  end;
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
//  FormName(CustRn);  // Crash in multiuser
//  h = 20; HalPushButton(h,v=3,h=h+100,v+vs,"VEList","#Suppliers#");
//  HalPushButton(h=h+50,v=3,h=h+100,v+vs,"CUList","Customers");
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"N_o.",Code,false,Code);
  RlColKey(96,96,"Short",SearchKey,false,SearchKey);
  RlColKey(145,140,"C_at",CustCat,false,Group);
  RlColKey(190,190,"Name",Name,false,Name);
  if (HasJewelleryInterface) then begin
    RlColKey(-480,-480,"Tele_phone",Phone,false,Phone);
    RlColKey(-380,-380,"Mobile",Mobile,false,Mobile);
    RlCol(-280,-280,"Email",eMail,true);
    RlCol(-150,-150,"Address 1",InvAddr0,false);
  end else begin
    RlColKey(-420,-420,"Adrese",InvAddr0,false,InvAddr0); //OBS
    /* //OBS
    if (HasLocalization("EST")) then begin
      RlColTL(-490,-490,"E-Inv Rec.",M4Mark,EInvReceiverFlag,false);
    end;
    RlColKey(-420,-420,"Tele_phone",Phone,false,Phone);
    RlColKey(-325,-325,"Con_tact",Person,false,Person);
    RlColKey(-215,-215,"Department",Department,false,Department);
    */ //OBS
    if (CUVATNrColumn) then begin
      RlColKey(-140,-140,"#VAT Reg. No.#",VATNr,false,VATNr);
    end else begin
      RlColKey(-140,-140,"#Reg. No.#",RegNr1,false,RegNr1);
    end;
    RlColKey(-60,-60,"Bank Acc",BankAccount,false,BankAccount);
  end;
  SearchField("Search");
  if (HasMetroTestFeatures or GUIType!=kGUIMetro) then begin
    CommunicateButton;
  end;
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(70,-30);
  end;
  if (UserCanReport("CustPSRn","",true) and HasCustomerStatusReport and GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
    SpecialMenu("Customer Status",'e',0,"CUStatusCULsm");
  end;
  if (UserCanReport("VEPSRn","VendPSRClass",true) and GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
    SpecialMenu("#Supplier# Status",'u',2,"VEStatusLsm");
  end;
  SpecialMenu("Change Password",' ',1,"ChangePasswdCULsm");
  SpecialMenu("Search",'F',3,"CUSearchLsm");
  if (GuiType==kGuiCocoa) then begin
    SpecialMenu("Import address book",' ',5,"ImportAddressbooksm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Activity",'c',4,"NewActCULsm");
  EndWindow;
end;

window CUSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","android,computer,iPad,iPhone")
begin
  Integer pos;

  WindowBegin("Paste Customer",CUSClass,CGslist,-);
  SetWRect(20,80,750,298);  //OBS edit 700
  Sizeable(-1,-1,0,0);
  UseView(CUVc);
  SpawnClass(CUDClass);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",Code,false,ActCode);
  pos = 96;
  if (HasCustomerSearchKey) then begin
    RlColKey(pos,pos,"Short",SearchKey,false,ActSearchKey);
    pos = pos + 50;
  end;
  
  if (HasCategories) then begin
    RlColKey(pos,pos,"C_at",CustCat,false,ActGroup);
    pos = pos + 50;
  end;
  if (IsStandardProduct) then begin
    if (HasLocalization("FIN,POL")) then begin
      RlColKey(pos,pos,"#VAT Reg. No.#",VATNr,false,VATNr);
      pos = pos + 120;
    end;
  end;
  RlColKey(pos,pos,"Name",Name,false,ActName);
  RlColKey(-350,-350,"Adrese",InvAddr0,false,InvAddr0); //OBS  
  /*  //OBS
  if (HasDepartments) then begin
    RlColKey(-230,-230,"Department",Department,false,ActDepartment);
  end;
  */ //OBS
  if (HasStandardCommunicator) then begin
    if (CUVATNrColumn) then begin
      RlColKey(-110,-110,"#VAT Reg. No.#",VATNr,false,ActVATNr);
    end else begin
      RlColKey(-110,-110,"#Reg. No.#",RegNr1,false,ActRegNr1);
    end;
  end;
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(70,-30);
  end;
  SearchField("Search");
  if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
    if (HasCustomerStatusReport) then begin
      SpecialMenu("Customer Status",'e',0,"CUStatusCUSsm");
    end;
  end;
  SpecialMenu("Search",'F',1,"CUSearchLsm");
  EndWindow;
end;

window ARSRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Open Invoice Customer Statement",ARSRClass,CGRcW,RcType);
  SetWRect(20,80,450,490);
  vs = 20; h = 160;
  EditFieldTL(h,v=6, 150,"Customer",   M4UStr,Normal,30,f1,false,CUSClass);
  EditFieldTL(h,v+=20, 150,"Contract",   M4Long,Normal,0,long2,false,NAContractSClass); //OBS
  /* //OBS
  if (HasCategories) then begin
    EditFieldTL(h,v+=20,50, "Category",   M4UStr,Normal,5,f3,false,CCatSClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=20,150, "Tag/Object",   M4UStr,Normal,20,ObjStr,false,ObjSClass);
  end;
  */ //OBS
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=20,50, "Classification",   M4UStr,Normal,30,f4,false,CClassSClass);
  end;
  EditFieldTL(h,v+=20,80,"Balance date",M4Date,Normal,0,d1,false,PasteCurDate); //OBS
  if (HasLocalization("POL")==false) or (IsEnterprise) then begin
    EditFieldTL(h,v+=20,20, "Days of delay",   M4Int,Normal,5,Comparison,false,0);
    StaticText(h+30,v+14,"(not less than)",false);
  end;
//  EditFieldTL(h,v+=vs ,80,"Min. Turnover",M4Val,Normal,0,vals0,true,0);// this is too slow
  // if (HasMainPartner) then begin
    // EditFieldTL(h,v+=20,80, "Main Partner",   M4UStr,Normal,20,LastAcc,false,CUSClass);  //OBS
  // end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs ,80,"Min. Balance",M4Val,Normal,0,vals2,true,0);
    EditFieldTL(h,v+=vs ,80,"Min. no. of Invoices",M4Long,Normal,0,long1,true,0);
  end;
  /* //OBS
  EditFieldTL(h,v+=20,80,"On Date",M4Date,Normal,0,d1,false,PasteCurDate);
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=20,80,"Additional Cost",M4Val,Normal,0,vals1,false,0);
  end;
  if (HasLanguages) then begin
    EditFieldTL(h,v+=20,50,"Language",M4Str,Normal,5,Language,false,LangSClass);
  end;
  */ //OBS
  if (HasLocalization("POL")==false) or (IsEnterprise) then begin
    if (IsEnterprise) then begin
      ButtonFrame(h=80,vm=(v+=40),123,2,"Invoices");
    end else begin
      ButtonFrame(h,v+=40,123,2,"Invoices");
    end;
    RadioButton(h,v,0,0,"Open",flags[0]);
    RadioButton(h,v+=16,2,0,"Overdue",flags[0]);
  end;
  /* //OBS
  if (HasMultiCurrency or HasBase2) then begin
    ButtonFrame(h,v+=40,123,2,"Amounts");
    RadioButton(h,v,0,0,"Base Currency",flags[4]);
    RadioButton(h,v+=16,1,0,"Currency",flags[4]);
  end;
  if (HasReminderLevel) then begin
    CheckBox(h,v+=30,0,"Increase Reminder Level",flags[2]);
  end;
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Down Payment Invoices Only",flags[10]);
  end;
  if (HasRussianPrepayment or HasPrepayments) then begin
    CheckBox(h,v+=16,0,"Show Prepayment No.",flags[14]);
  end;
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Show #Instalments#",flags[19]);
  end;
  if (HasOfficialSerNr or HasInvoiceOfficialSerNr) then begin
    CheckBox(h,v+=16,0,"Show Official No.",flags[15]);
  end;
  v = v + 16;
  if (IsEnterprise) then begin
    CheckBox(h,v,0,"Customers with Reminders Only",flags[3]);
    if (HasAged) then begin
      CheckBox(h,v+=16,0,"Aged based on Invoice Date",flags[17]);
    end;
    ButtonFrame(h+=150,v=vm,123,3,"Status");
    CheckBox(h,v,0,"Skip Disputed",flags[11]);
    CheckBox(h,v+=16,0,"Skip No Reminder",flags[12]);
    CheckBox(h,v+=16,0,"Skip No Collection",flags[13]);
    v = v + 26;
  end;
  CheckBox(h,v,0,"Include Open #Credit Notes#",flags[9]);
  CheckBox(h,v+=16,0,"Skip Statement without Lines",flags[16]);
  */ //OBS
  EndWindow;
end;

window IVRClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v;
  Boolean testf,einvf;
  Integer cnt;

  
  WindowBegin("Specify Invoices",IVRClass,CGRcW,RcType);
  //OBS-->
  // INVFORM_ENG(true);
  einvf=true;
  if (IsEnterprise) then begin
    SetWRect(20,80,440,300);
    PeriodField(h=100,v=6,"Period");
    EditFieldTL(h,v+=20, 150,"No.",   M4Str,Normal,30,f1,false,0);
    EditFieldTL(h,v+=20, 150,"Offical No.",   M4Str,Normal,60,f3,false,0);
    EditFieldTL(100,v+=20,150,"Customer",M4UStr,Normal,41,f2,false,CUSClass);
    EditFieldTL(100,v+=20,150,"Classification",M4Code,Normal,41,f6,false,CClassSClass); //OBS
    EditFieldTL(100,v+=20,50,"Language",   M4Str,Normal,5,Language,false,LangSClass);
    ButtonFrame(h=30,v=147,175,3,"Status"); //OBS edit
    RadioButton(h,v,0,0,"Unprinted Only",OnlyUnprntd);
    RadioButton(h,v+=16,1,0,"All",OnlyUnprntd);
    RadioButton(h,v+=16,2,0,"Original",OnlyUnprntd);
    ButtonFrame(h,v=230,175,5,"Row Layout");  //OBS edit
    RadioButton(h,v,0,0,"Default",flags[15]);
    RadioButton(h,v+=16,1,0,"By Item Group",flags[15]);
    RadioButton(h,v+=16,2,0,"By Item Group - Single Row",flags[15]);
    RadioButton(h,v+=16,3,0,"By Room Package",flags[15]);  
    RadioButton(h,v+=16,4,0,"Single Row",flags[15]);
    CheckBox(h1=225,v=140,0,"Only Open Invoices",flags[10]);  //OBS edit
    CheckBox(h1,v+=16,0,"Skip Invalidated Invoices",flags[11]);
    if (einvf) then begin
      CheckBox(h1,v+=16,0,"Include _EDI Invoices",flags[28]);
      CheckBox(h1,v+=16,0,"Include E-Invoices",flags[5]);
    end;
    cnt = 4;
    if (HasLocalization("ARG")) then begin
      cnt = 5;
    end;   
    ButtonFrame(h1,v=230,185,cnt,"Invoice Type");   //OBS edit
    CheckBox(h1,v,0,"Invoice",flags[1]);
    CheckBox(h1,v+=16,0,"Cash Note",flags[2]);
    CheckBox(h1,v+=16,0,"C_redit Note",flags[3]);
    CheckBox(h1,v+=16,0,"I_nterest Invoice",flags[4]);
    if (HasLocalization("ARG")) then begin
      CheckBox(h1,v+=16,0,"Forwarding Invoice",flags[6]);
    end;
  end else begin
    SetWRect(64,80,444,250);
    PeriodField(h=120,v=6,"Period");
    testf = true;
    if (Left(BuildProductCode,8)=="Standard" or (Left(BuildProductCode,6)=="WeHave")) then begin
      if (HasLocalization("POL")) then begin
        EditFieldTL(h,v+=20, 150,"No.",   M4Str,Normal,60,f3,false,0);
        testf = false;
      end;
    end;
    if (testf) then begin
      EditFieldTL(h,v+=20, 150,"No.",   M4Str,Normal,30,f1,false,0);
      if (HasOfficialSerNr) then begin
        EditFieldTL(h,v+=20, 150,"Offical No.",   M4Str,Normal,60,f3,false,0);
      end;
    end;
    ButtonFrame(h,v+=40,150,3,"Status");
    RadioButton(h,v,0,0,"Unprinted Only",OnlyUnprntd);
    RadioButton(h,v+=16,1,0,"All",OnlyUnprntd);
    RadioButton(h,v+=16,2,0,"Original Print",OnlyUnprntd);
    ButtonFrame(h,v+=45,153,3,"Invoice Type");  
    CheckBox(h,v,0,"Invoice",flags[1]);
    CheckBox(h,v+=16,0,"Cash Note",flags[2]);
    CheckBox(h,v+=16,0,"#Credit Note#",flags[3]);
    if (HasLocalization("PRT")) then begin
      CheckBox(h,v+=16,0,"I_nterest Invoice",flags[4]);
    end;
    if (HasLocalization("FIN")) then begin
      CheckBox(h,v+=16,0,"Include E-Invoices",flags[5]);
    end;
    if (HasLocalization("ARG")) then begin
      CheckBox(h1,v+=16,0,"Forwarding Invoice",flags[6]);
    end;
    EndFrame;
  end;
  //OBS<--
  EndWindow;
end;

window PerPayHisSLRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  WindowBegin("Specify Prepayment History #S/L#",PerPayHisSLRClass,CGRcW,RcType);
  SetWRect(20,80,400,260);
  vs = 20; h=140; h2=200;
  PeriodField(h,v=6,"Period");
  EditFieldTL(h,v+=20, 60,"Customer",M4UStr,Normal,30,f1,false,CUSClass);
  EditField(h,v+=20, 60,"Contract",Normal,long2,false,NAContractSClass);  //OBS
  EditField(h,v+=20, 60,"Prepay. No.",Normal,long1,false,ARPaySClass);
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=20 ,150,"Classification",M4UStr,Normal,60,f4,false,CClassSClass);
    EditFieldTL(h,v+=20 ,70,"Classification Type",M4UStr,Normal,30,f5,false,CTypeSClass)
  end;
  if (HasModNL) then begin
    EditFieldTL(h,v+=20 ,70,"On Account A/C",M4UStr,Normal,10,FirstAcc,false,AccSClass);
  end;
//  StaticText(h+80,v+13,"Ignored in Fwd. Balance and in Overview",false);
  v = v + 30;
  ButtonFrame(h=30,vm=v+20,130,3,"Sorting by");
  RadioButton(h,v=vm,0,0,"Prepayment Number",flags[1]);
  RadioButton(h,v+=16,1,0,"Customer",flags[1]);
  RadioButton(h,v+=16,2,0,"Trans. Date",flags[1]);
  if (HasMultiCurrency) then begin
    ButtonFrame(h2=218,v=vm,130,2,"Values");
    RadioButton(h2,v,0,0,"Currency",flags[4]);
    RadioButton(h2,v+=16,1,0,"Base Currency 1",flags[4]);
  end;
  CheckBox(h,v+=48,0,"Balance Only",flags[5]);
  EndWindow;
end;



// JH OPDCLASS Window
window OPDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,t,v,vm,vs;
  Integer tilenr,verticalpos;
  Integer f,flipnr;
  Boolean buttonf;
  record EnableBankBlock EBb;

  WindowBegin("Payment",OPDClass,CGview,-);
  SetWRect(20,80,700,464);
  Sizeable(-1,-1,0,0);
  UseView(OPVc);
  ActiveFieldOnNew("PayDate");
  h = 100; h2 = 280; h3 = 490; v = 6; vs = 20;
  if (IsEnterprise) then begin
    Tile(0,110,false,"",SerNr);
  end;
  if (HasNumberSeries) then begin
    EditField(h,v,80,"No.",St_i,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"No.",St_i,SerNr,false,0);
  end;
  EditField(h2,v,80,"Payment Date",Normal,PayDate,false,PasteCurDate);
  if (HasModNL) then begin
    EditField(h3,v,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  end;
  EditField(h,v+=vs,30,"Payment Mode",Normal,PayMode,false,PMSClass);
  CheckBox(h4=-100,6,0,"Ordered",OrderedFlag);
  CheckBox(h4=-100,6+vs,0,"OK",DoneFlag);
  EnterSkip(Math);
  EditField(h2,v,80,"Own Bank A/C",Normal,BankAcc,false,0);
  EditField(h3,v,82,"#Sort Code#",Normal,SortCode,false,0);
  EditField(h,v+=vs,80,"Reference",Normal,PayNumber,false,0);
  if (HasAdvancedAccounting) then begin
    CheckBox(h2,v,0,"#Supp.# Info on Trans.",APonTR);
  end;
  if (HasLanguages) then begin
    EditField(h3,v,82,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,472,"Comment",Normal,BankName,false,0);
  end else begin 
    v = v + 10;
  end;
  EnterSkip(Math);
//  CheckBox(h,v=6,0,"Re_jected",RejectedFlag);//not used any more
//  CheckBox(h2,v,0,"#Supp.# Info on Trans.",APonTR);
  tilenr = 1;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Payments"); tilenr = tilenr + 1;
    TileButton(tilenr,"Bank"); tilenr = tilenr + 1;
    tilenr = 1;
    Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  end;
//  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
//  CheckBox(25,v=-20,0,"OK",DoneFlag);
  if (HasLocalization("EST,LVA")) then begin
    buttonf = true;
    HalPushButton(40,-25,40+100,-5,"EPaymentSignOPDsm","Sign");
    HalPushButton(150,-25,150+100,-5,"EPaymentQueOPDsm","Send to Bank");
  end;
  if (HasMultiCurrency) then begin
    EditField(-300,-21,50,"Currency",Normal,PayCurCode,false,CurncyCodeSClass);
  end;
  EditField(-125,-21,85,"Withdrawn",Normal,CurPayVal,true,0);
  h = 10;
  if (tilenr>1) then begin
    if (HasLocalization("EST,LVA")) then begin
      MatrixBegin(h,v=24,-50,-35,-,200);
    end else begin
      MatrixBegin(h,v=24,-50,-25,-,200);
    end;
  end else begin
    verticalpos = -40;
    if (HasLocalization("FIN,LVA,LTU,AUS") or HasMultiCurrency) then begin
      verticalpos = -50;
    end;
    if (HasLocalization("AUS,EST,LVA,RUS,POL,LTU") or (!WindowsMode) or HasModCheck or HasMultiCurrency or HasObjects or HasRussianPrepayment or HasPrepayments or HasBankImport or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN"))) then begin
      if (buttonf) then begin
        MatrixBegin(h,v+=40,verticalpos,-40,-,200);
    end else begin
        if (WindowsMode) then begin
          MatrixBegin(h,v+=40,verticalpos,-25,-,200);
        end else begin
          MatrixBegin(h,v+=40,verticalpos,-30,-,200);
        end;
      end;
    end else begin
      MatrixBegin(h,v+=30,-30,-30,-,200);
    end;
  end;
  vm = v;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kPaymentRowTypeNormal,24,"Invoice No.",0,VISerNr,false,APSClass);
  MatCol(t,100,"#Supplier#",0,VECode,false,VESClass);
  EnterSkip(RecVal);
  MatCol(t=kPaymentRowTypeSettlementDiscount,24,"",0,VISerNr,false,APSClass);
  MatText(t,105,"Set. Disc.",true);
  MatCol(t,190,"Tag/Object",0,Objects,false,ObjSClass);
  MatCol(t,-370,"PI.Cur",0,PInvCurncy,true,0);
  MatCol(t,-330,"Invoice Val",0,PInvVal,true,0);
  MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
  MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Sent Value",0,RecVal,true,0);
  MatCol(t=kPaymentRowTypeBankFee,24,"",0,VISerNr,false,APSClass);
  MatText(t,105,"Fee",true);
  MatCol(t,190,"Tag/Object",0,Objects,false,ObjSClass);
  MatCol(t,-370,"PI.Cur",0,PInvCurncy,true,0);
  MatCol(t,-330,"Invoice Val",0,PInvVal,true,0);
  MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
  MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Sent Value",0,RecVal,true,0);
  flipnr = 1;
  if (HasMultiCurrency or HasObjects or HasRussianPrepayment or HasPrepayments or HasBankImport or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA,LTU")) or HasLocalization("AUS")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  end;
  MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    MatCol(t,-370,"Split VAT",0,SplitVAT,true,0);
  end;
  if (HasMultiCurrency) then begin
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-350,"I. Cur.",0,PInvCurncy,true,0);
    MatCol(t,-310,"Open Inv. Value",0,PInvOutstand,false,0);
    MatCol(t,-220,"Invoice Value",0,PInvVal,true,0);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    if (HasLocalization("POL")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-310,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
      MatCol(t,-270,"Bank Amount",0,BankVal,true,0);
      MatCol(t,-180,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
      MatCol(t,-110,"Bank Amt. in Cur. 1",0,B1BankVal,true,0);
    end;
  end else begin
    if (HasLocalization("LTU,LVA")) then begin
      MatCol(t,-180,"Bank Amount",0,BankVal,true,0);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"Open Inv. Value",0,PInvOutstand,false,0);
      MatCol(t,-180,"Invoice Value",0,PInvVal,true,0);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    end else begin
      if (!IsEnterprise and HasLocalization("POL") and HasSupplierStatus) then begin
        MatCol(t,-320,"Open Inv. Value",0,PInvOutstand,false,0);
        MatCol(t,-235,"Invoice Value",0,PInvVal,true,0);
        MatCol(t,-165,"Sent Value",0,RecVal,true,0); 
        MatCol(t,-110,"Reference Number",0,rkPayNumber,false,0);
        MatCol(t,-60,"Req.Date",0,rkPayNumberDate,false,0);
      end else begin 
        MatCol(t,-300,"Open Inv. Value",0,PInvOutstand,false,0);
        MatCol(t,-215,"Invoice Value",0,PInvVal,true,0);
        MatCol(t,-135,"Sent Value",0,RecVal,true,0);
      end;
    end;
  end;
  if (IsEnterprise==false) then begin
    if (HasObjects) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      if (HasRussianPrepayment) then begin
        if (HasModPO) then begin
          MatCol(t,-320,"Tags/Objects",0,Objects,false,ObjSClass);
          MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
        end else begin
          MatCol(t,-260,"Tags/Objects",0,Objects,false,ObjSClass);
        end;
        MatCol(t,-100,"Prepayment No.",0,PrepayNr,false,OPPSClass);
      end else begin
        MatCol(t,-160,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
    end else begin
      if (HasRussianPrepayment) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
        if (HasModPO) then begin
          MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
        end;
        MatCol(t,-100,"Prepayment No.",0,PrepayNr,false,OPPSClass);
      end;
    end;
    if ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t,360,"Bank Reference",0,BankRefStr,false,0);
      MatCol(t,-250,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-110,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-80,"#VAT# Value",0,VATVal,false,0);
    end;
    if (HasRussianPrepayment==false and HasPrepayments) then begin 
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Prepayment No.",0,PrepayNr,false,OPPSClass);
      if (HasModPO) then begin
        MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
      end;
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);      
    end;
    if (HasLocalization("AUS")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-160,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-90,"#Sort Code#",0,SortCode,false,0);
    end else begin
      if (HasModCheck) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
        MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
        MatCol(t,-100,"#Cheque# No.",0,ChequeNr,false,0);
      end;
      if (HasBankImport) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
        MatCol(t,-250,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      end;
    end;
    if (BuildProductCode=="StandardRestaurant" or BuildProductCode=="StandardHealthcare") then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    end;
  end else begin
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-320,"Order No.",0,OrderNr,false,POSClass);
    MatCol(t,-230,"Prepayment No.",0,PrepayNr,false,OPPSClass);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-310,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    MatCol(t,-270,"#VAT# Value",0,VATVal,false,0);
//  MatCol(t,-200,"Extra Tax",0,TAX1Sum,false,0);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-260,"Tags/Objects",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
      MatCol(t,-130,"#S.# Cur",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Round Off A/C",0,RoundOffAcc,false,AccSClass);
      if (HasLocalization("POL")) then begin
        MatCol(t,-290,"Round Off",0,RoundOff,true,0);
        MatCol(t,-210,"#Instalment#",0,InstNr,false,APInstallSClass);
        if (HasSupplierStatus) then begin
          MatCol(t,-150,"Reference No.",0,rkPayNumber,false,0);
         MatCol(t,-70,"Req. Date",0,rkPayNumberDate,false,0);
        end;
      end else begin
        MatCol(t,-270,"Round Off",0,RoundOff,true,0);
        MatCol(t,-170,"#Instalment#",0,InstNr,false,APInstallSClass);
        if (HasSupplierStatus) then begin
          MatCol(t,-100,"Reference Number",0,rkPayNumber,false,0);
        end;
      end;
    end else begin
      MatCol(t=kPaymentRowTypeNormal,-170,"Round Off A/C",0,RoundOffAcc,false,AccSClass);
      MatCol(t,-80,"Round Off A/C",0,RoundOff,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Creditors A/C",0,APAcc,false,AccSClass);
      MatCol(t,-370,"Bank Reference",0,BankRefStr,false,0);
      MatCol(t,-270,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-140,"#Sort Code#",0,SortCode,false,0);
      MatCol(t,-50,"P. Code",5,PaymentCode,false,PaymentCodeSClass);//whoever added it, why not using BankRefStr ?
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,200,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-400,"Bank Amt.",0,BankVal,true,0);
    MatCol(t,-330,"Bank Fee",0,BankFeeVal,true,0);
    MatCol(t,-270,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-200,"B. Cur. 1 V.",0,B1BankVal,true,0);
    MatCol(t,-130,"B. Cur. 2 V.",0,B2BankVal,true,0);
//  MatCol(t,-120,"Fee %",0,BankFeePrc,true,0); /* What was this ?? */
    if (StandardHansa==false) then begin
      MatCol(t,-60,"Coef. Value",0,Coef,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,-470,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-430,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-350,"Rate",0,FrRateBankVal,true,0);
    MatCol(t,-310,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-240,"To B. Cur. 2",0,ToRateB2BankVal,true,0);
    MatCol(t,-170,"Base Rate 1",0,BaseRate1BankVal,true,0);
    MatCol(t,-95,"Base Rate 2",0,BaseRate2BankVal,true,0);
//    if (StandardHansa==false) then begin
//      MatCol(t,-30,"Coef. Value",0,Coef,true,0);
//    end;
  end;
  if (HasLocalization("ARG")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,-210,"Text",0,Comment,false,0);
    MatCol(t,-160,"P. Mode",0,PayMode,false,PMSClass);
    MatCol(t,-110,"W. Tax",0,WHTax,false,WHTaxSClass);
    MatCol(t,-65,"W. Tax Base",0,WHTaxBase,false,0);
//    MatCol(t,-100,"W. Tax Accumul.",0,WHTaxAccumBase,false,0);
  end;
  if (HasLocalization("SWE,NOR")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatColTL(t,-300,"Payment Channel",0,M4Set,Normal,OPDClassSelectSetToPaste(CurWindow,"PayChannel"),PayChannel,false,SetSClass);
    MatColTL(t,-200,"Urgency",0,M4Set,Normal,OPDClassSelectSetToPaste(CurWindow,"PayUrgency"),PayUrgency,false,SetSClass);
    MatCol(t,-200,"Bank Fee",0,BankFee,false,SetSClass);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (HasSettlementDiscount) then begin
    RowMenuItem(0,"Add Settlement Discount",' ',' ',4312,"CashDiscountOPDsm");
  end;
  if (HasModPL and HasModNL) then begin
    RowMenuItem(0,"Add Bank Fee",' ',' ',4312,"NewFeeOPDsm");
  end;
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    RowMenuItem(0,"Fill Split VAT",' ',' ',0,"FillSplitVATOPDsm");
  end;
  if (HasLocalization("POL")) then begin
    if (IsEnterprise) then begin
      RowMenuItem(0,"Check #Supplier# in #VAT# Payer List",' ',' ',0,"VATPayerListOPDsm");
    end else begin
      if (HasSupplierStatus) then begin
        RowMenuItem(0,"Check #Supplier# in #VAT# Payer List",' ',' ',0,"VATPayerListOPDsm");
      end;
    end;
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  if (tilenr>1) then begin
//    v = 18;
    v = v + 1;
  end;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,120,true,tilenr,BankAcc); tilenr = tilenr + 1;
    v=6; h= 100;
    CheckBox(h2,v,0,"Foreign Payment",ForeignPayment);
    BlockLoad(EBb);
    if (EBb.Enable) then begin
      CheckBox(h,v,0,"Electronically submitted",ElectSentFlag);
    end;
    if (HasApprovals) then begin
      SoftEditField(h3=520,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*      
      ButtonFrame(h3=490,v=vm,123,6,"Approval Status");
      RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/      
/*
  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
  CheckBox(25,v=-20,0,"OK",DoneFlag);
  HalPushButton(150,-30,150+100,-5,"EPaymentQueOPDsm","Send to Bank");
*/
    end;
    ButtonFrame(h=40,vm=(v+=40),123,3,"Payment Format");
    RadioButton(h,v,0,0,"Per Row",PayperSupplier);
    RadioButton(h,v+=16,1,0,"Per #Supplier#",PayperSupplier);
    RadioButton(h,v+=16,2,0,"Batch",PayperSupplier);
    ButtonFrame(h2=190,v=vm,123,3,"Payment Method");
    RadioButton(h2,v,0,0,"Normal",PayMethod);
    RadioButton(h2,v+=16,1,0,"Express",PayMethod);
    RadioButton(h2,v+=16,2,0,"Extra urgent",PayMethod);
    ButtonFrame(h3=340,v=vm,123,3,"Bank Fees");
    RadioButton(h3,v,0,0,"We pay",Bankfees);
    RadioButton(h3,v+=16,1,0,"#Suppliers# pay",Bankfees);
    RadioButton(h3,v+=16,2,0,"Shared",Bankfees);
    
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Payment Status",'r',4,"OPStatusDsm");
    if (HasModPL and HasModNL) then begin
      SpecialMenu("Add Bank Fee",' ',3,"NewFeeOPDsm");
    end;
    if (IsEnterprise) then begin
//    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
      SpecialMenu("(-",' ',1,"");
      SpecialMenu("Add Settlement Discount",' ',2,"CashDiscountOPDsm");
    end;
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromOP");
    end;
  end else begin
  //    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromOP");
    end;
    if (IsEnterprise) then begin
  //    SpecialMenu("Open Withholding Certificate",'',5,"OpenWHCertificateOPDsm");
      if (StandardHansa==false) then begin
        SpecialMenu("Assign #Cheque# Number",' ',6,"AssignChequeOPDsm");
        SpecialMenu("Prepare #Cheque#",'e',9,"PrepChequesOPDsm");
        SpecialMenu("Print #Cheques#",' ',9,"PrintChequesOPDsm");
      end;
    end;
    if (HasWithholdingTax) then begin
      SpecialMenu("Calculate Withholding Taxes",' ',11,"WithholdTaxesOPDsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Payment Status",'r',4,"OPStatusDsm");
      SpecialMenu("Bank Statement",' ',12,"BankStOPDsm");
      if (HasLocalization("EST,LVA")) then begin
        SpecialMenu("E-Payment Status",' ',13,"EPaymentStatusOPDsm");
      end;
      SpecialMenu("Print Cash IN-OUT",' ',4,"PrintCashInOutOPDsm");
      SpecialMenu("Banking File Export",'',4,"BankingFileExportDsm");
      if (HasLocalization("POL")) and (HasSupplierStatus) then begin
        SpecialMenu("Check #Supplier# in #VAT# Payer List",' ',30,"VATAllPayerListOPDsm");
      end;
    end else begin
      if (HasLocalization("AUS") or HasBankImport) then begin
        SpecialMenu("Banking File Export",'',4,"BankingFileExportDsm");
      end;
      if (HasLocalization("POL")) and (HasSupplierStatus) then begin
        SpecialMenu("Check #Supplier# in #VAT# Payer List",' ',30,"VATAllPayerListOPDsm");
      end;
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"OPSendforAcceptanceOPDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    if (EBb.Enable) then begin
      SpecialMenu("Send Payment to Enablebanking",' ',9,"OPSendtoEnableBankingDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    SpecialMenu("Goods Receipt",' ',5,"GoodsReceiptFromOPDsm"); // jh added this
    if (HasDownpayments) then begin
      SpecialMenu("Down Payment",' ',7,"DownPayFromOPDsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Cash Out",' ',8,"CLOutFromOPDsm");
    end;
    if (HaseMail) then begin
      SpecialMenu("Email",'m',9,"CreateMailFromOPDsm");
    end;
    if (HasLocalization("HRV,RUS,SLV,SRB,SVN,UKR") and (HasIntegratedNL or IsEnterprise)) then begin
      SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm");
    end;
    if (HasLocalization("POL") and IsEnterprise) then begin
      SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm");
    end;
  end;
  EndWindow;
end;
//


// === EA === Work-Sheet - (Service Orders)
window WSDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer rn,tilenr,flipnr,f;
  
  WindowBegin("Work Sheet",WSDClass,CGview,WSView);
  SetWRect(20,80,750,460);
  Sizeable(512,-1,0,0);
  UseView(WSVc);
  ActiveFieldOnNew("CustCode");
  FormName(WSForm);
  h1 = 75;h2 = 290; h3 = 470; vs = 20;
  Tile(0,70,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EditField(h=240,v=vm,-40,"Name",Normal,Addr0,false,0);
  v = v+vs;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  tilenr = 1;
  TileButton(tilenr,"Date"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Contact"); tilenr = tilenr + 1;
  TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Employee",Normal,EMCode,false,UserSClass);
  EditField(h1,v+=vs,82,"Date",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    EditField(h1,v+=vs,82,"Location",Normal,Location,false,LocationSClass);
  end;
  EditField(h1,v+=vs,82,"Short Code",Normal,ACShort,false,ACShortSClass);
  EditField(h2,v=vm,135,"Employee Name",Normal,EMName,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Cost A/C",Normal,CostAcc,false,AccSClass);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  end;
  EditField(h3,v=vm,82,"Serv. Order No.",Normal,SVONr,false,0);
  if (HasModSVO) then begin
    EditField(h3,v+=vs,82,"Work Order No.",Normal,WONr,false,0);
  end;
  if (HasModIN) then begin
    CheckBox(h4,v=vm,0,"Update #Stock#",UpdStockFlag);
  end;
  if (IsEnterprise) then begin
    CheckBox(h4,v+=16,0,"Reserved",PrelOK);
  end;
/* What is this???, It can be changed by the user and what if half is invoiced ?? */
//  CheckBox(h4,v+=16,0,"Invoiced",InvFlag);
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  EditField(410,-41,95,"#VAT#",ViewOnly ,Sum3,true,0);
  EditField(-150,-41,95,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,95,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-40,WSRowType,200);
  MatTypedRow(stp);
  Flip(0);
  MatCol(t=1,32,"Item",0,ArtCode,false,INSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
  MatCol(t,94,"Qty",0,Quant,true,0);
  EnterSkip(ArtCode);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-255,"Unit Price",0,Price,true,0);
    MatCol(t,-165,"%",0,vRebate,true,0);
    MatCol(t,-130,"Sum",0,Sum,true,0);
    MatCol(1,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-225,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
    MatCol(1,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  MatCol(t,-225,"Item Type",0,ItemType,false,SetSClass);
  MatCol(t,-150,"Main Serial No.",0,MotherNr,false,SerialNrSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  if (HasSerialNumbers) then begin
  MatCol(t,-225,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  if (HasModProd) then begin
  MatCol(t,-90,"Recipe",0,Recepy,false,RecSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  MatCol(t,-345,"Returned",0,Returned,true,0);
  MatCol(t,-285,"Invoiced",0,Invd,true,0);
  MatCol(t,-225,"FIFO",0,FIFO,false,0);
  MatCol(t,-125,"Row FIFO",0,FIFORowVal,false,0);
  if (HasModNL) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-340,"Short Code",0,ACShort,false,ACShortSClass);
    MatCol(t,-270,"Sales A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-200,"Cost A/C",0,CostAcc,false,AccSClass);
    if (HasObjects) then begin
      MatCol(t,-130,"Tags/Objects",0,Objects,false,ObjSClass);
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusWSDsm");
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; 
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,CurncyCode); tilenr = tilenr + 1;
  vs = 20;
  EditField(h=110,v=6,50,"Currency",ViewOnly,CurncyCode,false,CurncyCodeSClass);
  if (HasMultiCurrency) then begin
    if (HasBase2) then begin
      EditField(h,v+vs,50,"Base Currency 1",ViewOnly,BaseRate1,true,0);
    end else begin
      EditField(h,v+vs,50,"Base Currency",ViewOnly,BaseRate1,true,0);
    end;
    if (HasBase2) then begin
      EditField(h,v+(vs*2),50,"Base Currency 2",ViewOnly,BaseRate2,true,0);  
    end;  
    EditField(h2=295,v,50,"Rate",ViewOnly,FrRate,true,0);
    if (HasBase2) then begin
      RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
      RateField(h3,v+=vs,50,":",ViewOnly,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);   
      end else begin
        RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h,v+=vs,50,"Base Currency 1",ViewOnly,BaseRate1,true,0);
      EditField(h,v+=vs,50,"Base Currency 2",ViewOnly,BaseRate2,true,0);
    end;
  end; 
  Tile(tilenr,130,false,tilenr,Phone); tilenr = tilenr + 1;
  vs = 20;h = 75;h2 = 300;
  EditField(h,vm=(v=6),150,"Telephone",Normal,Phone,false,0);
  EditField(h,v+=vs,150,"Fax",Normal,Fax,false,0);
  if (IsEnterprise) then begin
    EditField(h,v+=vs,200,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
  end;
  if (HasLanguages) then begin 
    EditField(h,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (HasPriceLists) then begin
    EditField(h,v+=vs,80,"Price List",Normal,PriceList,false,PLDefSClass);
  end;
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelsENG(h2,v=vm+vs,170,16);
  end;
  Tile(tilenr,90,false,tilenr,Comment1); tilenr = tilenr + 1; 
  vs = 20;
  EditField(h=75,v=6,-20,"Comment",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment4,false,0);
  EnterSkip(TransDate);
  if (HasModSVO) then begin
  SpecialMenu("Open Work Order",' ',0,"OpenWOFromWSDsm");
  end;
  if (HasIntegratedNL) then begin
    SpecialMenu("Open #NL# Transaction",'t',1,"OpenTRFromWS");
  end;
  SpecialMenu("Item Search",'f',3,"ItemSearchDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixWSDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Activity",'c',4,"ActFromWSDsm");
  end;
  SpecialMenu("Requisition",'',4,"RequisitionDsm"); // ea - internal-orders
  if (HasModPO) then begin
    SpecialMenu("Purchase Order",' ',5,"POFromWSDsm");
  end;
  if (HasReturnedGoods) then begin
    SpecialMenu("Returned Goods",'B',6,"RetFromWSDsm");
  end;
//  SpecMenuItem("Work Sheet Status",'r',4);
  EndWindow;
end;
