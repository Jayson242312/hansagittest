external inner procedure TSERWNT_ENG;
external function integer CountCOFields(boolean);
external procedure ShowCOFields(real,real,real);
external procedure ShowBFlatFields(var integer,record BFlatFieldSetBlock,real,real);
external procedure ShowFlatFields(string);
external procedure ShowBuildFields(var integer,record BuildFieldSetBlock,real,real,string);
external procedure DrawSelectionButtonsFlatCounters(real,real,integer,integer,string,string,string,string,string,string);
external function string 60 UserDefinedMeters(string,string);




external inner  function Boolean HasCategories();
external inner function Boolean HasContactClassification();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMainPartner();
external inner function Boolean HasObjects();
external inner function Boolean IsEnterprise();
external inner function Boolean HasAged();

SetLangMode(LangEnglish,"ENG",2);	//##ii to support LAT special characters in GUI

window MSClassLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Classifiers",MSClassLClass,CGmlist,-);
    SpawnClass(MSClassDClass);
    SetWRect(20,80,560,298);
    Sizeable(-1,-1,0,0);
    UseView(MSClassVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(100,100,"Description",Description,false,Description);
    RlColKey(420,420,"Type",CTypeCode,false,CTypeCode);
    SearchField("Search");
  EndWindow;

  return;
end;

window MSClassSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert classifier",MSClassSClass,CGslist,-);
    SpawnClass(MSClassDClass);
    SetWRect(20,80,560,298);
    Sizeable(-1,-1,0,0);
    UseView(MSClassVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(100,100,"Description",Description,false,Description);
    SearchField("Search");
  EndWindow;

  return;
end;

window MSClassDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Erf management classifier",MSClassDClass,CGview,-);
    SetWRect(64,80,500,200);
    UseView(MSClassVc);
    h=120; vs=20;
    EditField(h,v=12,100,"Code",Normal,Code,false,0);
    EditField(h,v+=vs,200,"Name",Normal,Description,false,0);
    EditFieldTL(h,v+=vs,100,"classification type",M4Code,Normal,10,CTypeCode,false,CTypeSClass);
    SoftEditField(h,v+=vs,200,"Name",ViewOnly,"CTypeComment",false,0,M4Str,60);
  EndWindow;

  return;
end;

window FlatFieldSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h;

  WindowBegin("Premise field settings",FlatFieldSetTClass,CGHbl,HBlRecType);
    SetBlid(FlatFieldSetBlock);
    SetWRect(20,80,340,480);
    h=24;
    MatrixBegin(8,26,-31,-20,-,20);
    MatCol(1,h,"Field",0,FieldCode,false,FlatFieldCodeSClass);
    MatCol(1,h+100,"Name",0,Name,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window FlatFieldCodeSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Premise fields",FlatFieldCodeSClass,CGslist,-);
    SpawnClass(FlatFieldCodeDClass);
    SetWRect(20,80,460,300);
    UseView(FlatFieldCodeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Field",FieldCode,false,FieldCode);
    RlColKey(100,100,"Short name",ShortName,false,ShortName);
    RlColKey(200,200,"Name",Name,false,Name);
    SearchField("Search");
  EndWindow;

  return;
end;

window FlatFieldCodeDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;

  WindowBegin("Premise fields",FlatFieldCodeDClass,CGview,-);
    SetWRect(64,80,520,200);
    UseView(FlatFieldCodeVc);
    h = 80;
    h2 = h + 200;
    vs = 20;
    v = 12;
    EditField(h,v,90,"Field",Normal,FieldCode,false,0);
    EditField(h2,v,100,"Short name",Normal,ShortName,false,0);
    EditField(h,v+=vs,300,"Name",Normal,Name,false,0);
    EditField(h,v+=vs,70,"Type",Normal,FieldType,false,SetSClass);
    CheckBox(h2,v,0,"Average calculation",CalcAvg);

    // Calculate yearly charge
    CheckBox(h2,v+=vs,0,"Yearly Charge",CalcYearly);
    EditField(h,v,70,"Minimum",Normal,Minimum,false,0);
  EndWindow;

  return;
end;

window FlatFieldCodeLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Premise fields",FlatFieldCodeLClass,CGmlist,-);
    SpawnClass(FlatFieldCodeDClass);
    SetWRect(20,80,460,300);
    UseView(FlatFieldCodeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Field",FieldCode,false,FieldCode);
    RlColKey(100,100,"Short name",ShortName,false,ShortName);
    RlColKey(200,200,"Name",Name,false,Name);
    SearchField("Search");
  EndWindow;

  return;
end;

window FlatFieldLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Premises field values",FlatFieldLClass,CGmlist,-);
    SpawnClass(FlatFieldDClass);
    SetWRect(20,80,300,400);
    Sizeable(-1,-1,0,0);
    UseView(FlatFieldVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Premises",FlatCode,false,FlatCode);
    RlColKey(100,100,"Field",FieldCode,false,FieldCode);
    RlColKey(200,200,"Erf",BuildCode,false,BuildFieldCode);
    SearchField("Search");
  EndWindow;

  return;
end;

window FlatFieldDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Premises field values",FlatFieldDClass,CGview,-);
    SetWRect(64,80,650,350);
    UseView(FlatFieldVc);
    h = 80; v = 12;
    EditField(h,v,80,"Field",Normal,FieldCode,false,FlatFieldCodeSClass);
    EditField(h+140,v,100,"Premises",Normal,FlatCode,false,FlatsSClass);
    EditField(h+280,v,100,"Erf",ViewOnly,BuildCode,false,BuildSClass);
    MatrixBegin(4,v+=50,-50,-19,-,399);
    MatCol(1,32,"Date",0,StartDate,false,PasteCurDate);
    MatCol(1,120,"Value",0,Value,false,0);
    MatCol(1,200,"Comment",0,Comment,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window ChFlatFieldWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Open values of premise field",ChFlatFieldWClass,CGother,RcType);
    SetWRect(100,100,420,160);
    UseView(RcVc);
    h = 80;
    vs = 20;
    v = 12;
    EditField(h,v,100,"Field",Normal,f2,false,FlatFieldCodeSClass);
    HalPushButton(h+130,v-5,h+230,v+15,"OpenFlatField","Open");
    //EditField(h,v+=vs,100,"Premises",Normal,f1,false,FlatsSClass);
  EndWindow;

  return;
end;

window BFlatFieldSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h;

  WindowBegin("Erf's premise field settings",BFlatFieldSetTClass,CGHbl,HBlRecType);
    SetBlid(BFlatFieldSetBlock);
    SetWRect(20,80,340,480);
    h=24;
    MatrixBegin(8,26,-31,-20,-,20);
    MatCol(1,h,"Field",0,FieldCode,false,FlatFieldCodeSClass);
    MatCol(1,h+100,"Name",0,Name,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window NAContractSerTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Serial number - Contracts",NAContractSerTClass,CGHbl,HBlRecType);
    SetBlid(NAContractSerBlock);
    TSERWNT_ENG;
  EndWindow;

  return;
end;

window NAContractLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Contracts",NAContractLClass,CGmlist,-);
    SpawnClass(NAContractDClass);
    SetWRect(20,80,1300,298);
    Sizeable(-1,-1,0,0);
    UseView(NAContractVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,2,"No.",SerNr,false,SerNr);
    RlColKeyTL(76,76,"OK",M4Mark,OKFlag,false,OKFlag);
    RlColKey(115,115,"Contr. No.",ContractNr,false,ContractNr);
    RlColKey(185,185,"Zoning",ZoningCode,false,ZoningCode);
    RlColKey(275,275,"Customer",CustCode,false,CustCode);
    RlColKey(335,335,"Name",CustName,false,CustName);
    RlColKey(-750,-750,"Address",FlatAddress,false,FlatAddress);
    RlColKey(-620,-620,"Premise",FlatCode,false,FlatCode);
    RlColKey(-500,-500,"Erf",BuildCode,false,BuildCode);
    RlColKey(-400,-400,"Last inv.",LastInvDate,false,LastInvDate);
    RlColKey(-300,-300,"Contr. date",CODate,false,CODate);
    RlColKey(-200,-200,"Start",StartDate,false,StartDate);
    RlColKey(-120,-120,"End",EndDate,false,EndDate);
    SearchField("Search");
    SpecialMenu("Search",'F',1,"NAContactSearchLsm");
  EndWindow;

  return;
end;

window NAContractSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Contracts",NAContractSClass,CGslist,-);
    SpawnClass(NAContractDClass);
    SetWRect(20,80,1120,298);
    Sizeable(-1,-1,0,0);
    UseView(NAContractVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,2,"No.",SerNr,false,SerNr);
    RlColKeyTL(76,76,"OK",M4Mark,OKFlag,false,OKFlag);
    RlColKey(115,115,"Contr. No.",ContractNr,false,ContractNr);
    RlColKey(185,185,"Old code",OldCode,false,OldCode);
    RlColKey(275,275,"Customer",CustCode,false,CustCode);
    RlColKey(335,335,"Name",CustName,false,CustName);
    RlColKey(-600,-600,"Address",FlatAddress,false,FlatAddress);
    RlColKey(-420,-420,"Premise",FlatCode,false,FlatCode);
    RlColKey(-350,-350,"Erf",BuildCode,false,BuildCode);
    RlColKey(-280,-280,"Last inv.",LastInvDate,false,LastInvDate);
    RlColKey(-210,-210,"Contr. date",CODate,false,CODate);
    RlColKey(-140,-140,"Start",StartDate,false,StartDate);
    RlColKey(-70,-70,"End",EndDate,false,EndDate);
    SearchField("Search");
  EndWindow;

  return;
end;

window NAContract2SClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Contracts",NAContract2SClass,CGslist,-);
    SpawnClass(NAContractDClass);
    SetWRect(20,80,1220,298);
    Sizeable(-1,-1,0,0);
    UseView(NAContractVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,2,"No.",SerNr,false,SerNr);
    RlColKeyTL(76,76,"OK",M4Mark,OKFlag,false,OKFlag);
    RlColKey(115,115,"Contr. No.",ContractNr,false,ContractNr);
    RlColKey(185,185,"Old code",OldCode,false,OldCode);
    RlColKey(275,275,"Customer",CustCode,false,CustCode);
    RlColKey(335,335,"Name",CustName,false,CustName);
    RlColKey(-670,-670,"Address",FlatAddress,false,FlatAddress);
    RlColKey(-490,-490,"Premise",FlatCode,false,FlatCode);
    RlColKey(-420,-420,"Erf",BuildCode,false,BuildCode);
    RlColKey(-350,-350,"Contr. date",CODate,false,CODate);
    RlColKey(-280,-280,"Start",StartDate,false,StartDate);
    RlColKey(-210,-210,"End",EndDate,false,EndDate);
    Calculatedcolumn(-140,-140,"Last inv.","NAContractSClassInv",true);
    Calculatedcolumn(-70,-70,"Debt","NAContractSClassDebt",true);
    SearchField("Search");
  EndWindow;

  return;
end;


window NAContractDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real x,h,h1,hl,h2,h3,h4,v,v2,vm,vs,t;
  string 255 label;
  integer cofieldcnt,tilenr;

  WindowBegin("Contract",NAContractDClass,CGview,-);
    DynamicWindow;
    SetWRect(20,80,850,600);
    Sizeable(-1,-1,0,0);
    UseView(NAContractVc);
    FormName(PrintContractDClass);
    ActiveFieldOnNew("FlatCode");
    CommunicateButton;
    h = 90; h2 = 180; h3 = 250; vs=20;
    Tile(0,120,false,"",CustCode);  //110
    EditField(h,vm=(v=16), 82,"No.",St_i,SerNr,false,0);
    CheckBox(h3,v,0,"Approved",OKFlag);
    CheckBox(h3+120,v,0,"Merged invoice",MergedInvFlag);
    EditField(h,v+=vs,90,"Premises",Normal,FlatCode,false,FlatsSClass);
    EnterSkip(CustCode);
    EditField(h3,v,-20,"Address",ViewOnly,FlatAddress,false,0);
    EditField(h,v+=vs,90, "Client",Normal,CustCode,false,CUSClass);
    EnterSkip(StartDate);
    EditField(h3,v,-170,"Name",Normal,CustName,false,0);
    EditField(-130,v,-20,"Erf",Normal,BuildCode,false,BuildSClass);
    EditField(h,v+=vs,90,"Old code",Normal,OldCode,false,0);
    EditField(h+160,v,80, "Status",Normal,AccStatus,false,AccountStatusSClass);
    // Jh >
    EditField(h+310,v,70, "Zoning",Normal,ZoningCode,false,ZoneSClass);
    EditField(h+470,v,120, "Account Type",Normal,AccountType,false,AccountTypeSClass);
    // EditField(h+500,v,70, "Owner Type",Normal,OwnerType,false,OwnerTypeSClass);
    // <
    cofieldcnt = CountCOFields(true);
    tilenr = 1;
    TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
    TileButton(tilenr,"Articles"); tilenr = tilenr + 1;
    if cofieldcnt>0 then begin
      TileButton(tilenr,"Contract fields"); tilenr = tilenr + 1;
    end;
    TileButton(tilenr,"Invoice sending"); tilenr = tilenr + 1;
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
    TileButton(tilenr,"Additional Information");
    tilenr = 1;
    Tile(tilenr,160,false,"1",StartDate); tilenr = tilenr + 1;
    vs = 20; h1 = 140; h2 = 360; h3=600;
    // EditField(h1,v=6,20,"Sam. term.",Normal,PayDeal,false,PDSClass);
    EditField(h1,v=6,82,"Object",Normal,Objects,false,ObjSClass);
    EditField(h2,v,82,"Penalty % code",Normal,IntPercCode,false,IntPercSClass);
    EditField(h3,v,60,"Agent",Normal,SalesMan,false,UserSClass);
    EditField(h1,v+=vs,82,"Start date",Normal,StartDate,false,PasteCurDate);
    EditField(h2,v,82,"End date",Normal,EndDate,false,PasteCurDate);
    EditField(h3,v,50,"Additional penalty days",Normal,MSIntAddDays,false,0);
    EditField(h1,v+=vs,82,"Contract date",Normal,CODate,false,PasteCurDate);
    EditField(h2,v,82,"Date of the last invoice",Normal,LastInvDate,false,PasteCurDate);
    EditField(h3,v,50,"Pay. pr.",Normal,INPayPriority,false,INPayPrioritySClass);
    EditField(h1,v+=vs,302,"Classification",Normal,Classification,false,CClassSClass);
    EditField(h3,v,50,"Class",Normal,ContractClass,false,ContractClassSClass);
    EditField(h1,v+=vs,150,"Contract no.",ViewOnly,ContractNr,false,0);
    EditField(h3,v,50,"Class",Normal,LangCode,false,LangSClass);
    Tile(tilenr,200,true,"2",Math); tilenr = tilenr + 1;
    v = 24;
    MatrixBegin(4,v,-50,-9,-,99);
    MatTypedRow(stp);
    Flip(0);
    MatColTL(t=1,32,"Item",0,M4Code,Normal,20,ArtCode,false,INSClass);
    MatColTL(t,144,"Name",0,M4Str,Normal,200,Spec,false,0);
    Flip(1);
    MatColTL(t=1,-255,"Price",0,M45Val,Normal,0,Price,true,0);
    MatCol(t,-165,"Tariff Rate",0,QtyCoef,false,0);
    MatCol(t,-110,"Status",0,Statuss,false,0);
    Flip(2);
    MatColTL(t,-455,"Start.",0,M4Date,Normal,0,ServStartDate,false,PasteCurDate);
    MatColTL(t,-375,"End",0,M4Date,Normal,0,ServEndDate,false,PasteCurDate);
    MatCol(t,-295,"Quant",0,Quant,false,0);
    MatCol(t,-215,"Field",0,FieldCode,false,FlatFieldCodeSClass);
    MatColTL(t,-135,"Discount %",0,M41Val,Normal,0,vRebate,true,0);
    MatCol(t,-75,"Accrual.",0,PeriodCode,false,0);
    InsertRowTest;
    DeleteRowTest;
    EndMatrix;
    vs = 20;
    v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
    v = v + vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
    if cofieldcnt>0 then begin
      cofieldcnt = CountCOFields(false);
      Tile(tilenr,255 + cofieldcnt * 20,false,"3",SerNr); tilenr = tilenr + 1;
      StaticText(140,20,"(*) - Insert values with a key combination CTRL + F",false);
      vs = 20; h=120; h3=360; h4=540;
      if cofieldcnt>0 then begin
        ShowCOFields(23,140,420);
      end;
    end;

    Tile(tilenr,70,false,"4",FrRate); tilenr = tilenr + 1;
    vs = 20;
    EditField(h=110,v=6,400,"Invoice del. address",Normal,InvDelAddress,false,0);
    EditField(h,v+=vs,250,"E-mail",Normal,eMail,false,0);
    EditField(430,v,80,"Date",Normal,MailDate,false,PasteCurDate);
    EditField(h,v+=vs,250,"Additional e-mail 1",Normal,OBS_eMail1,false,0);
    EditField(h,v+=vs,250,"Additional e-mail 2",Normal,OBS_eMail2,false,0);
    EditField(h,v+=vs,250,"Additional e-mail 3",Normal,OBS_eMail3,false,0);
    EditField(h,v+=vs,250,"Additional e-mail 4",Normal,OBS_eMail4,false,0);
    EditField(h,v+=vs,250,"Additional e-mail 5",Normal,OBS_eMail5,false,0);
    EditField(h,v+=vs,120,"Bank",Normal,AccOperator,false,BankSClass);
    EditField(410,v,-20,"Bank account",Normal,BankAccount,false,0);

    CheckBox(h=400,v=56,0,"Invoices in emails",InvToEmail);
    CheckBox(h,v+=16,0,"Dont print invoices",DoNotPrintInv);

    Tile(tilenr,70,false,"5",FrRate); tilenr = tilenr + 1;
    vs = 20;
    EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(295,v,50,"Course",Normal,FrRate,true,0);
    EditField(h3=360,v,50,":",Normal,ToRateB1,true,0);
    StaticText(h3+60,v+12,"Base currency 1",false);
    EditField(h,v+=vs,50,"Base currency 1",Normal,BaseRate1,true,0);
    EditField(h3,v,50,":",Normal,ToRateB2,true,0);
    StaticText(h3+60,v+12,"Base currency 2",false);
    EditField(h,v+=vs,50,"Base currency 2",Normal,BaseRate2,true,0);
    Tile(tilenr,130,false,"6",ContractNr); tilenr = tilenr + 1;
    h = 20; h2 = 90; vs = 20;
    EditField(140,v=6,150,"Attachment no.",Normal,AttachNr,false,0);
    EditField(140,v+=vs,100,"The person to close with",Normal,CustCode2,false,CUSClass);
    EditField(360,v,-180,"Name",ViewOnly,CustName2,false,0);

    EditField(h,v+=vs,-20,"",Normal,Comment1,false,0);
    EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
    EditField(h,v+=vs,-20,"",Normal,Comment3,false,0);
    EditField(h,v+=vs,-20,"",Normal,Comment4,false,0);
    EditField(h,v+=vs,-20,"",Normal,Comment5,false,0);
    
    SpecialMenu("Create Meter",' ',6,"CreateMeterDsm");//Jh
    SpecialMenu("Client Status Report",'e',0,"NAContractStatusCUDsm");
    // SpecialMenu("Open field of the contract",'F',7,"OpenChCOFieldSm");
    // SpecialMenu("Open penalty interest",'S',10,"NewIntPercNAContractDsm");
    // SpecialMenu("Change client in invoices and payments",'X',14,"ChangeCustNAContractDsm");
  EndWindow;
 
return;
end;

//
window CuPerRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;
  
  WindowBegin("Specify Periodic Customer Statement",CuPerRClass,CGRcW,RcType);
  SetWRect(20,80,410,320);
  PeriodField(h=120,v=6,"Period");
  EditFieldTL(h,v+=20, 150,"Customer",   M4UStr,Normal,30,f1,false,CUSClass);
  if (HasCategories) then begin
    EditFieldTL(h,v+=20,50, "Category",   M4UStr,Normal,5,f3,false,CCatSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=20,50, "Classification",   M4UStr,Normal,30,f4,false,CClassSClass);
  end;
  if (HasMultiCurrency) then begin
    EditFieldTL(h,v+=20,50, "Currency",M4Code,Normal,5,CurncyCode,false,CurncyCodeSClass);
  end;
  if (HasMainPartner) then begin
    EditFieldTL(h,v+=20,80, "Main Partner",   M4UStr,Normal,20,LastAcc,false,CUSClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=20,250,"Tag/Object",M4UStr,Normal,60,ObjStr,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=20,82,"Statement Date",M4Date,Normal,0,d1,false,PasteCurDate);
    ButtonFrame(h,vm=(v+=40),200,3,"Customers");
    RadioButton(h,v,0,0,"All",flags[1]);
    RadioButton(h,v+=16,1,0,"With Transactions or Fwd Balance",flags[1]);
    RadioButton(h,v+=16,2,0,"With Balance",flags[1]);
    CheckBox(h,v+=24,0,"Sum Receipt",flags[8]);
    CheckBox(h,v+=16,0,"Show Invoice Records",flags[9]);
    CheckBox(h,v+=16,0,"Show Fwd. Balance Invoices",flags[10]);
    CheckBox(h,v+=16,0,"Show Invoice items and meter readings",flags[18]); 
    if(HasLocalization("HRV")) then begin
      CheckBox(h,v+=16,0,"Show Official Ser. No.",flags[15]);
    end;
    if (HasAged) then begin
      CheckBox(h,v+=16,0,"Aged based on Invoice Date",flags[17]);
    end; 
  end else begin
    CheckBox(h,v+=20,0,"Customers with Balance only",flags[1]);
  end;
  EndWindow;
end;
//


window ChCOFieldWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Open field value of the contract",ChCOFieldWClass,CGother,RcType);
    SetWRect(100,100,420,160);
    UseView(RcVc);
    h = 80;
    v = 12;
    EditField(h,v,100,"Field",Normal,f2,false,COFieldCodeSClass);
    HalPushButton(h+130,v-5,h+230,v+15,"OpenCOField","Open");
  EndWindow;

  return;
end;



window BuildDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real x,h,h1,hl,h2,v,v2,vm,vs;
  string 255 label;
  integer FlatFieldCnt,TileNr;
  record BFlatFieldSetBlock BFlatFieldSetBlr;
  record BuildFieldSetBlock BuildFieldSetBlr;
  boolean buildfieldf,buildflatfieldf;

  BlockLoad(BuildFieldSetBlr);
  BlockLoad(BFlatFieldSetBlr);
  buildfieldf = (MatRowCnt(BuildFieldSetBlr)>0);
  buildflatfieldf = (MatRowCnt(BFlatFieldSetBlr)>0);

  WindowBegin("ERF Master",BuildDClass,CGview,-);
    DynamicWindow;
    SetWRect(64,80,930,590);
    UseView(BuildVc);
    sizeable(0,0,0,0);
    h=130; h1=320; h2=450;
    vs = 20;
    Tile(0,150,false,"",Address);
    EditField(h,v=12,70,"Ext.No.",Normal,ExtensionNo,false,0);// Custom Code
    EditField(h+=130,v,70,"Lot No.",Normal,LotNo,false,0);// Custom Code
    EditField(h+=140,v,70,"Div.No.",Normal,DivisionNo,false,0);// Custom Code
    EditField(h+=150,v,70,"Unit No.",Normal,UnitNo,false,0);// Custom Code
    CheckBox(h1+320,v+16,0,"Invoices to the Erf",InvToBuild);
    CheckBox(h1+320,v,0,"Closed",Closedf);
    EditField(h1+370,v+40,60,"Sorting No.",Normal,IntBuildNo,false,0);
    EditField(h1+370,v+60,60,"Sorting char",Normal,IntBuildChr,false,0);
    h=130;
    EditField(h,v=40,70,"Erf Code",Normal,Code,false,0);
    EditField(h+130,v,210,"Erf No.",ViewOnly,Erf,false,0);// Custom Code
    EditField(h,v+=vs,290,"Address",ViewOnly,Address,false,0);
    EnterSkip(RegisterNo);
    EditField(h,v+=vs,100,"Deed No.",Normal,RegisterNo,false,0);
    EditField(h1,v,100,"Block Nr.",Normal,BlockNo,false,0);
    EditField(h1+160,v,80,"Objects",Normal,Objects,false,ObjSClass);
    EditField(h,v+=vs,100,"Classification",Normal,Classification,false,MSClassSClass);
    EditField(h1,v,240,"Alt. Name",Normal,BuildName,false,0);
    EditField(h1+340,v,100,"Date",Normal,BDate,false,PasteCurDate);
    // EditField(h1+370,v,60,"ISP controller",Normal,ISPController,false,0);
    TileNr = 1;
    TileButton(TileNr,"General Info"); TileNr = TileNr + 1; //previously Address

    // TileButton(TileNr,"General Info"); TileNr = TileNr + 1;
    // if buildflatfieldf then begin
    //   TileButton(TileNr,"Premise fields"); TileNr = TileNr + 1;
    // end;
    // if buildfieldf then begin
    //   TileButton(TileNr,"Erf fields"); TileNr = TileNr + 1;
    // end;
    // TileButton(TileNr,"Invoice Comments");

    TileNr = 1;
    Tile(TileNr,100,false,"",Street); TileNr = TileNr + 1;
    v = 10;
    EditField(h,v,290,"Street",Normal,Street,false,0);
    EditField(h1+200,v,80,"Build.No",ViewOnly,BuildNr,false,0);
    EditField(h,v+=vs,100,"Suburb",Normal,RuralTer,false,VVSuburbSClass); // replaced -> Rural Ter.
    EditField(h1,v,100,"Town",Normal,City,false,VVTownSClass); // replaced -> City
    EditField(h1+200,v,80,"Region",Normal,Municipality,false,VVRegionSClass);  // replaced -> Municipality
    EditField(h,v+=vs,100,"Area (sq m)",Normal,LandDimensions,false,0);
    // EditField(h,v+=vs,100,"Zoning",Normal,ZoningCode,false,ZoneSClass);
    EditField(h1,v,100,"Erf type",Normal,HouseType,false,BuildTypeSClass);
    EditField(h1+200,v,80,"Country",Normal,Contry,false,CountrySClass);
    // EditField(h,v+=vs,100,"Post Code",Normal,PostalCode,false,AddressFieldSClass);
    Tile(TileNr,100,false,"",BlockNo);  TileNr = TileNr + 1;
    v = 10;
    // EditField(h,v,100,"Erf type",Normal,HouseType,false,BuildTypeSClass);
    // EditField(h2,v,100,"Number of floors",Normal,Floors,false,0);
    // EditField(h,v+=vs,100,"Priv. Status",Normal,PrivStat,false,SetSClass);
    // EditField(h2,v,100,"Owner type",Normal,OwnerType,false,SetSClass);
    // EditField(h,v+=vs,100,"Year of Erf",Normal,BuildYear,false,0);
    // EditField(h2,v,100,"Land owners",Normal,LandOwner,false,SetSClass);
    // EditField(h,v+=vs,100,"Base",Normal,Base,false,0);
    // EditField(h2,v,50,"Additional penalty days",Normal,MSIntAddDays,false,0);
    // EditField(h2,v+=vs,250,"Counter reading page e-mail",Normal,CountResInpEmail,false,0);
    // ShowBFlatFields(tilenr,BFlatFieldSetBlr,180,510);
    // ShowBuildFields(tilenr,BuildFieldSetBlr,180,510,"(*) - Insert values ​​with a key combination CTRL + F");
    // Tile(TileNr,120,true,"",InvComment);
    // vs = 20; TileNr = TileNr + 1;
    // EditField(h,v=20,-50,"Invoice comment 1",Normal,InvComment,false,0);
    // EditField(h,v+=vs,-50,"Invoice comment 2",Normal,InvComment2,false,0);
    // EditField(h,v+=vs,-50,"Invoice comment 3",Normal,InvComment3,false,0);
    SpecialMenu("Open Premise",' ',6,"CreatePremiseDsm");//Jh
    SpecialMenu("Meter readings",'s',2,"BuildCounterRessm");
    SpecialMenu("Erf status",'r',3,"BuildStatsm");
    // SpecialMenu("Change meters",'m',1,"ChangeBuildCountersm");
    // SpecialMenu("Open field values",'F',4,"OpenChBuildFieldSm");
    // SpecialMenu("Erf status report",' ',11,"BuildStatusRnSm");
    SpecialMenu("Owners",' ',16,"OpenBuildOwnersSm");
  EndWindow;

  return;
end;

window BuildLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("ERF Master",BuildLClass,CGmlist,-);
    SpawnClass(BuildDClass);
    SetWRect(20,80,800,360); 
    Sizeable(-1,-1,0,0);
    UseView(BuildVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Erf Code",Code,false,Code);
    RlColKey(130,130,"Extension No.",ExtensionNo,false,ExtensionNo);
    RlColKey(230,230,"Lot No.",LotNo,false,LotNo);
    RlColKey(340,340,"Address",Address,false,Address);
    RlCol(550,550,"Erf No.",Erf,false); //-320
    // RlColKey(750,750,"Zoning",ZoningCode,false,ZoningCode);

    // RlColKey(-320,-320,"Kadastra Nr.",RegisterNo,false,RegisterNo);
    // RlCol(-200,-200,"Ēkas tips",HouseType,false);
    // RlCol(-100,-100,"Stāvi",Floors,false);
    // Calculatedcolumn(-50,-50,"Platība","BuildLClassTotArea",false);
    SearchField("Search");
    SpecialMenu("Search",'F',1,"SearchBuildVcLsm");
    SpecialMenu("Change meters",'m',1,"ChangeBuildCountersm");
    SpecialMenu("Meter readings",'s',2,"BuildCounterRessm");
    SpecialMenu("Erf status",'r',3,"BuildStatsm");
    // SpecialMenu("Piegādātāju līgumi",' ',4,"BuildSuppContrRepsm");
    // SpecialMenu("Pakalpojumu un ien. rēķinu sasaite",'i',5,"BuildVILinksm");
    // SpecialMenu("Mājas lietas",'',6,"BuildDocFromBuilddsm");
  EndWindow;

  return;
end;

window BuildSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert Erf",BuildSClass,CGslist,-);
    SpawnClass(BuildDClass);
    SetWRect(20,80,560,298);
    Sizeable(-1,-1,0,0);
    UseView(BuildVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(100,100,"Deed No.",RegisterNo,false,RegisterNo);
    RlColKey(-340,-340,"Address",Address,false,Address);
    RlColKey(-200,-200,"Extension No.",ExtensionNo,false,ExtensionNo);
    RlColKey(-100,-100,"Lot No.",LotNo,false,LotNo);
    // RlCol(,-230,"Erf type",HouseType,false);
    // RlCol(-130,-130,"Floors",Floors,false);
    // RlCol(-70,-70,"Area",TotArea,true);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildTypeLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Erf types",BuildTypeLClass,CGmlist,-);
    SpawnClass(BuildTypeDClass);
    SetWRect(20,80,490,298);
    Sizeable(-1,-1,0,0);
    UseView(BuildTypeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(120,120,"Description",Description,false,Description);
    // RlCol(290,290,"Service duration",WorkYears,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildTypeSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert Erf type",BuildTypeSClass,CGslist,-);
    SpawnClass(BuildTypeDClass);
    SetWRect(20,80,490,298);
    Sizeable(-1,-1,0,0);
    UseView(BuildTypeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(120,120,"Description",Description,false,Description);
    // RlCol(290,290,"Service duration",WorkYears,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildTypeDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Erf type",BuildTypeDClass,CGview,-);
    SetWRect(64,80,580,200);
    UseView(BuildTypeVc);
    h=120; vs = 20;
    EditField(h,v=12,100,"Code",Normal,Code,false,0);
    // EditField(320,v,100,"Duration of exploitation",Normal,WorkYears,true,0);
    EditField(h,v+=vs,-80,"Description",Normal,Description,false,0);
    EditField(h,v+=vs,-80,"Comment",Normal,Comment,false,0);
  EndWindow;

  return;
end;

window BuildGroupSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert a group of Erfs",BuildGroupSClass,CGslist,-);
    SpawnClass(BuildGroupDClass);
    SetWRect(20,80,400,298);
    Sizeable(-1,-1,0,0);
    UseView(BuildGroupVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(110,110,"Comment",Comment,false,Comment);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildGroupLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Group of Erfs",BuildGroupLClass,CGmlist,-);
    SpawnClass(BuildGroupDClass);
    SetWRect(20,80,400,298);
    Sizeable(-1,-1,0,0);
    UseView(BuildGroupVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(110,110,"Comment",Comment,false,Comment);
    SearchField("Search");
    SpecialMenu("Meter readings",'s',1,"BuildGroupCounterRessm");
  EndWindow;

  return;
end;


window BuildGroupDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Group of Erfs",BuildGroupDClass,CGview,-);
    SetWRect(64,80,320,280);
    Sizeable(-1,-1,0,0);
    UseView(BuildGroupVc);
    h=100; vs = 20;
    EditField(h,v=12,60,"Code",Normal,Code,false,0);
    EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
    EditField(h,v+=vs,-40,"Classification",Normal,Classification,false,MSClassSClass);
    EditField(h,v+=vs,80,"Start Date",Normal,StartDate,false,PasteCurDate);
    EditField(h+200,v,80,"End date",Normal,EndDate,false,PasteCurDate);
    EditField(h,v+=20,80,"ISP controller",Normal,ISPController,false,0);
    CheckBox(h+350,v,0,"Cold water diff. calculations",ColdWaterDiffCalc);
    CheckBox(h+350,v+=16,0,"Hot water diff. calculations",HotWaterDiffCalc);
    MatrixBegin(4,v+=50,-50,-19,-,499);
    MatCol(1,h=25,"Erf",0,RowCode,false,BuildSClass);
    MatCol(1,120,"Comment",0,RowComment,false,0);
    EndMatrix;
    SpecialMenu("Change counter",'m',3,"MSChangeCountBuildGroupMnSm");
    SpecialMenu("Meter readings",'s',1,"BuildGroupCounterRessm");
  EndWindow;

  return;
end;

window COFieldSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h;

  WindowBegin("Contract field's settings",COFieldSetTClass,CGHbl,HBlRecType);
    SetBlid(COFieldSetBlock);
    SetWRect(20,80,340,480);
    h=24;
    MatrixBegin(8,26,-31,-20,-,20);
    MatCol(1,h,"Field",0,FieldCode,false,COFieldCodeSClass);
    MatCol(1,h+100,"Name",0,Name,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window COFieldCodeLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Contract fields",COFieldCodeLClass,CGmlist,-);
    SpawnClass(COFieldCodeDClass);
    SetWRect(20,80,460,300);
    UseView(COFieldCodeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Field",FieldCode,false,FieldCode);
    RlColKey(100,100,"Short name",ShortName,false,ShortName);
    RlColKey(200,200,"Name",Name,false,Name);
    SearchField("Search");
  EndWindow;

  return;
end;

window COFieldCodeSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Treaty fields",COFieldCodeSClass,CGslist,-);
    SpawnClass(COFieldCodeDClass);
    SetWRect(20,80,460,300);
    UseView(COFieldCodeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Field",FieldCode,false,FieldCode);
    RlColKey(100,100,"Short name",ShortName,false,ShortName);
    RlColKey(200,200,"Name",Name,false,Name);
    SearchField("Search");
  EndWindow;

  return;
end;

window COFieldCodeDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,vs,v;

  WindowBegin("Contract field",COFieldCodeDClass,CGview,-);
    SetWRect(64,80,520,200);
    UseView(COFieldCodeVc);
    h = 80;
    h2 = h + 200;
    vs = 20;
    v = 12;
    EditField(h,v,90,"Field",Normal,FieldCode,false,0);
    EditField(h2,v,100,"Short name",Normal,ShortName,false,0);
    EditField(h,v+=vs,300,"Name",Normal,Name,false,0);
    //EditField(h,v+=vs,70,"Type",Normal,FieldType,false,SetSClass);
    //CheckBox(h2,v,0,"The average estimate",CalcAvg);
    //EditField(h,v+=vs,70,"Minimum",Normal,Minimum,false,0);
  EndWindow;

  return;
end;

window COFieldLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Contract value of rural",COFieldLClass,CGmlist,-);
    SpawnClass(COFieldDClass);
    SetWRect(20,80,300,400);
    Sizeable(-1,-1,0,0);
    UseView(COFieldVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Contract",COSer,false,COSer);
    RlColKey(100,100,"Field",FieldCode,false,FieldCode);
    SearchField("Search");
  EndWindow;

  return;
end;

window COFieldDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Contract value of the field",COFieldDClass,CGview,-);
    SetWRect(64,80,650,350);
    UseView(COFieldVc);
    h = 80;
    vs = 20;
    v = 12;
    EditField(h,v,80,"Field",Normal,FieldCode,false,COFieldCodeSClass);
    EditField(h+140,v,100,"Contract",Normal,COSer,false,NAContractSClass);
    MatrixBegin(4,v+=50,-50,-19,-,399);
    MatCol(1,32,"Date",0,StartDate,false,PasteCurDate);
    MatCol(1,100,"Value",0,Value,false,0);
    MatCol(1,200,"Comment",0,Comment,false,0);
    EndMatrix;
  EndWindow;

  return;
end;


window MSConstWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Constants",MSConstWClass,CGHbl,-);
    SetWRect(20,80,630,410);
    SetBlid(MSConstBlock);
    MatrixBegin(20,20,-50,-7,-,400);
    MatCol(1,34,"Code",0,Code,false,0);
    MatCol(1,110,"Sum",0,Sum,true,0);
    MatCol(1,190,"From",0,SDate,true,PasteCurDate);
    MatCol(1,280,"Until",0,EDate,true,PasteCurDate);
    MatCol(1,370,"Comment",0,Comment,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window CountResSerTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Number series - Meter readings",CountResSerTClass,CGHbl,HBlRecType);
  SetBlid(CountResSerBlock);
  TSERWNT_ENG;
  EndWindow;

  return;
end;

window CountManTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Meter manufacturers",CountManTClass,CGHbl,HBlRecType);
    SetBlId(CountManBlock);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    MatrixBegin(8,20,-41,-10,-,200);
    MatCol(1,24,"Name",0,Name,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window CountManSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert the meter manufacturer",CountManSClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
  EndWindow;

  return;
end;

window CountInstOrgTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Meter installation organizations",CountInstOrgTClass,CGHbl,HBlRecType);
    SetBlId(CountInstOrgBlock);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    MatrixBegin(8,20,-41,-10,-,200);
    MatCol(1,24,"Name",0,Name,false,0);
    EndMatrix;
  EndWindow;

  return;
end;


window CountInstOrgSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert organization",CountInstOrgSClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
  EndWindow;

  return;
end;

window CalcServicePlanSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Calculation formula",CalcServicePlanSClass,CGslist,-);
    SpawnClass(CalcServicePlanDClass);
    SetWRect(74,80,509,298);
    Sizeable(-1,-1,0,0);
    UseView(CalcServicePlanVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlCol(81,81,"Name",Name,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window CalcServicePlanLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Calculation formula",CalcServicePlanLClass,CGmlist,-);
    SpawnClass(CalcServicePlanDClass);
    SetWRect(74,80,509,298);
    Sizeable(-1,-1,0,0);
    UseView(CalcServicePlanVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlCol(81,81,"Name",Name,false);
    SearchField("Search");
  EndWindow;

  return;
end;


window CalcServicePlanDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Calculation formula",CalcServicePlanDClass,CGview,-);
    SetWRect(64,80,579,380);
    Sizeable(-1,-1,0,0);
    UseView(CalcServicePlanVc);
    v = 6; h = 100;
    EditField(h,v, 60,"Code",Normal,Code,false,0);
    EditField(h+150,v,-50,"Name",Normal,Name,false,0);
    MatrixBegin(4,v+=40,-32,-20,-,299);
    MatCol(1,32,"Type",0,FType,false,SetSClass);
    MatCol(1,92,"Code",0,FCode,false,0);
    MatCol(1,160,"Formula",0,Formula,false,0);
    MatCol(1,-180,"Comment",0,Comment,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window ServCalcValueLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Calculated values",ServCalcValueLClass,CGmlist,-);
    SpawnClass(ServCalcValueDClass);
    SetWRect(20,80,950,298);
    Sizeable(-1,-1,0,0);
    UseView(ServCalcValueVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"No.",SerNr,false,SerNr);
    RlColKey(50,50,"Date",TransDate,false,TransDate);
    RlColKey(180,180,"Code",Code,false,Code);
    RlColKey(290,290,"Comment",Comment,false,Comment);
    RlColKey(-400,-400,"Start date",StartDate,false,StartDate);
    RlColKey(-330,-330,"End date",EndDate,false,EndDate);
    RlColKey(-260,-260,"Calc.formula",CalcFormula,false,CalcFormula);
    RlColKey(-170,-170,"Value code",FieldCode,false,FieldCode);
    RlColKey(-80,-80,"Value",CalcVal,false,CalcVal);
    SearchField("Search");
  EndWindow;

  return;
end;


window ServCalcValueDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;

  WindowBegin("Calculated value",ServCalcValueDClass,CGview,-);
    SetWRect(64,80,720,420);
    UseView(ServCalcValueVc);
    Sizeable(-1,-1,0,0);
    ActiveFieldOnNew("BuildCode");
    h=110; h2=300; h3=490; vs=20;
    EditField(h,v=12,100,"Number",ViewOnly,SerNr,false,0);
    EditField(h2,v,100,"Date",ViewOnly,TransDate,false,PasteCurDate);
    EditField(h,v+=vs,70,"Erf",Normal,BuildCode,false,BuildSClass);
    EditField(h2,v,70,"Build.group",Normal,BuildGroupCode,false,BuildGroupSClass);
    EditField(h3,v,70,"Premise group",Normal,FlatGroupCode,false,FlatGroupSClass);
    EditField(h,v+=vs,-20,"Comment",Normal,Comment,false,0);
    EditField(h,v+=vs,70,"Start date",Normal,StartDate,false,PasteCurDate);
    EditField(h2,v,70,"End date",Normal,EndDate,false,PasteCurDate);
    EditField(h,v+=vs,70,"Calc. formula",Normal,CalcFormula,false,0);
    EditField(h2,v,70,"Value code",Normal,FieldCode,false,0);
    EditField(h3,v,70,"Value",Normal,CalcVal,true,0);
  EndWindow;

  return;
end;

window FlatsLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Premises",FlatsLClass,CGmlist,-);
    SpawnClass(FlatsDClass);
    SetWRect(20,80,500,298); // Jh size was changed from  (20,80,760,298)
    Sizeable(-1,-1,0,0);
    UseView(FlatsVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",FlatCode,false,FlatCode);
    // RlColKey(84,84,"Old code",UserStr1,false,UserStr1);
    RlColKey(150,150,"Erf",Code,false,Code);
    RlColKey(290,290,"Address",Address,false,Address);
    // RlColKey(-300,-300,"Apartment No.",FlatNo,false,FlatNo); //jh commented out because we are not using it
    // RlColKey(-290,-290,"Klients",CustCode,false,CustCodeSimple);
    // RlColKey(-290,-290,"Premises name",FlatName,false,FlatName);
    // RlCol(-110,-110,"Floor",Floor,false); //jh commented out aswell
    SearchField("Search");
    SpecialMenu("Search",'F',1,"SearchFlatVcLsm");
  EndWindow;

  return;
end;

window FlatsSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert premises code",FlatsSClass,CGslist,-);
    SetWRect(20,80,500,298);
    Sizeable(-1,-1,0,0);
    UseView(FlatsVc);
    SpawnClass(FlatsDClass);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",FlatCode,false,FlatCode);
    RlColKey(90,90,"Old code",UserStr1,false,UserStr1);
    RlColKey(150,150,"Erf",Code,false,Code);
    RlColKey(250,250,"Address",Address,false,Address);
    // RlColKey(-400,-400,"Apartment No.",FlatNo,false,FlatNo);
    // RlCol(-330,-330,"Premises type",RoomType,false);
    // RlCol(-260,-260,"Floor",Floor,false);
    // RlCol(-150,-150,"Reg. Data",RegisterNo,true);
    SearchField("Search");
  EndWindow;

  return;
end;


window FlatsDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real x,h,h1,hl,h2,v,v2,vm,vs;
  string 255 label;

  WindowBegin("Premises",FlatsDClass,CGview,-);
    DynamicWindow;
    SetWRect(64,80,680,400);
    UseView(FlatsVc);
    Sizeable(-1,-1,0,0);
    h=120; h1=320; h2=450;
    vs = 20;
    Tile(0,132,false,"",Address); //116
    EditField(h,v=12,100,"Erf Code",ViewOnly,Code,false,BuildSClass);
    EditField(h2-90,v,100,"Premises Code",ViewOnly,FlatCode,false,0);
    EditField(h2+120,v,40,"Ordering No.",Normal,IntFlatNo,false,0);
    EditField(h,v+=vs,160,"Address",ViewOnly,Address,false,0);
    EditField(h2-90,v,100,"Apt. No.",Normal,FlatNo,false,0);
    EditField(h2+120,v,40,"Signature",Normal,Signature,false,UserSClass);
    EditField(h,v+=vs,160,"Deed No.",ViewOnly,RegisterNo,false,0);
    // EditField(h2-90,v,100,"Division",Normal,Partition,false,0);
    // EditField(h2+120,v,40,"ISP controller",Normal,ISPController,false,0);
    EditField(h,v+=vs,160,"Premises name",Normal,FlatName,false,0);
    TileButton(1,"General info");
    TileButton(2,"Premises fields");
    Tile(1,120,false,"1",PrivStat);
    v = 10;
    // EditFieldTL(h+20,v,120,"Priv. Status",M4Set,Normal,1003,PrivStat,false,SetSClass); //changed to TL BBS VG 2007/12/07
    // EditField(h2,v,130,"Premises type",Normal,RoomType,false,SetSClass);
    // EditField(h+20,v+=vs,100,"Decoration level",Normal,RoomLevel,false,SetSClass);
    // EditField(h2,v,100,"Floor",Normal,Floor,false,0);
    // EditField(h+20,v+=vs,100,"Senior House",Normal,OverseerType,false,SetSClass);
    // EditField(h+20,v+=vs,100,"No. of enclosed balconies",Normal,NoOfBalc2,false,0);
    // EditField(h2,v,100,"No. of radiators",Normal,BatNr,false,0);
    // EditField(h+20,v+=vs,200,"Classification",Normal,Classification,false,MSClassSClass);
    // EditField(h2,v,100,"Objects",Normal,Objects,false,ObjSClass);
    // EditField(h+20,v+=vs,-300,"Invoice Comment",Normal,InvComment,false,0);
    // EditField(h2,v,100,"Old No.",Normal,OldNr,false,0);
    ShowFlatFields("(*) - Insert values ​​with a key combination CTRL + F");
    SpecialMenu("Create Contract",' ',6,"CreateContractDsm");//Jh
    SpecialMenu("Open contract",' ',1,"OpenMSFlatContractsm");
    SpecialMenu("Meter readings",'r',2,"CounterResRnsm");
    SpecialMenu("Change meter",'m',3,"MSChangeCount2MnSm");
    SpecialMenu("Last invoice",'p',5,"OpenLastIVSm");
    SpecialMenu("Unpaid invoices",'n',6,"ARRnSm");
    SpecialMenu("Open field values",'F',8,"OpenChFlatFieldSm");
    SpecialMenu("Premises status report",' ',11,"FlatsStatusRnSm");
    SpecialMenu("Owners",' ',16,"OpenOwnersSm");
  EndWindow;

  return;
end;


window FlatCountersLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v; 

  WindowBegin("Meters",FlatCountersLClass,CGmlist,-);
    DynamicWindow;
    SpawnClass(FlatCountersDClass);
    SetWRect(20,80,1000,300); 
    Sizeable(-1,-1,0,0);
    UseView(FlatCountersVc);
    DrawSelectionButtonsFlatCounters(5,5,100,20,"Premises","Erf","Erf gr.","Premise gr.","All","Closed");
    v = 25;
    RecordList(4,v+=20,-21,-39);
    RlColKey(4,4,"Meter.ID",SerNr,false,WinSerNr);
    // RlCol(66,66,"Closed.",Closedf,false); //JH  changed from Clsd to closed
    RlColKey(100,100,"Meter.No.",CounterNo,false,WinCounterNo);
    RlColKey(250,250,"Premises",FlatCode,false,WinFlatCode);
    // RlCol(370,370,"Order",FlatCode,false);
    // RlColKey(450,450,"Erf/Group",CodeField,false,WinCodeIndex);
    RlColKey(-520,-520,"Address",Address,false,WinAddress);
    // RlCol(-280,-280,"Galv. sk.",MainCounter,false);
   // RlCol(-200,-200,"Apartment",FlatNo,false); //Commented out latvia code
    RlColKey(-280,-280,"Type",CounterType,false,WinCounterType);
    //RlCol(-120,-120,"Place",Location,false); //Commented out latvia code
    RlcolKey(-100,-100,"BookNo",UserStr1,false,UserStr1); // Jh column for BookNo
    SearchField("Search");
    SpecialMenu("Readings",'',0,"CountResRnFlatCountersLsm");
    SpecialMenu("Create meter reading",'',1,"CreateCountResLSm");
  EndWindow;

  return;
end;

window FlatCounters2SClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert meter",FlatCounters2SClass,CGslist,-);
    SpawnClass(FlatCountersDClass);
    SetWRect(20,80,720,298);
    Sizeable(-1,-1,0,0);
    UseView(FlatCountersVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Meter. ID.",SerNr,false,BuildSerNr);
    RlColKey(74,74,"Meter. No.",CounterNo,false,BuildCounterNo);
    RlColKey(180,180,"Premises kods",FlatCode,false,FlatCode);
    RlColKey(270,270,"Order",FlatCode,false,EnterSortOrder);
    RlColKey(330,330,"Erf/Group",CodeField,false,CodeIndex);
    RlColKey(410,410,"Address",Address,false,Address);
  //  RlColKey(-200,-200,"Apartment",FlatNo,false,FlatNo); //Commented Out LatviaCode
    RlColKey(-160,-160,"Type",CounterType,false,CounterType);
    RlColKey(-120,-120,"Place",Location,false,Location);
    SearchField("Search");
    SpecialMenu("Readings",'',0,"CountResRnFlatCountersLsm");
  EndWindow;

  return;
end;

window FlatCountersSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert meter",FlatCountersSClass,CGslist,-);
    // SpawnClass(FlatCountersDClass);
    SetWRect(20,80,720,298);
    Sizeable(-1,-1,0,0);
    UseView(FlatCountersVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Meter. No.",CounterNo,false,BuildCounterNo);
    RlColKey(120,120,"Meter. ID.",SerNr,false,BuildSerNr);
    RlColKey(180,180,"Premises Codes",FlatCode,false,FlatCode);
    RlColKey(270,270,"Order",FlatCode,false,EnterSortOrder);
    RlColKey(330,330,"Erf/Group",CodeField,false,CodeIndex);
    RlColKey(410,410,"Address",Address,false,Address);
  //  RlColKey(-200,-200,"Apartment",FlatNo,false,FlatNo); //Commented Out LatviaCode
    RlColKey(-160,-160,"Type",CounterType,false,CounterType);
    RlColKey(-120,-120,"Place",Location,false,Location);
    SearchField("Search");
    SpecialMenu("Readings",'',0,"CountResRnFlatCountersLsm");
  EndWindow;

  return;
end;

window HeadFlatCountersSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert main meter",HeadFlatCountersSClass,CGslist,-);
    SpawnClass(FlatCountersDClass);
    SetWRect(20,80,600,298);
    Sizeable(-1,-1,0,0);
    UseView(FlatCountersVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Meter. No.",CounterNo,false,HeadCounterNo);
    RlColKey(120,120,"Meter. ID.",SerNr,false,HeadCounterSerNr);
    RlColKey(180,180,"Adr. code",Code,false,HeadCode);
    RlColKey(250,250,"Address",Address,false,HeadAddress);
    RlColKey(-160,-160,"Type",CounterType,false,HeadCounterType);
    RlCol(-120,-120,"Pleace",Location,false);
    SearchField("Search");
  EndWindow;

  return;
end;


window FlatCountersDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,v,vs,vm;
  string 255 label;

  WindowBegin("Meter",FlatCountersDClass,CGview,-);
    SetWRect(64,80,680,420);
    Sizeable(-1,-1,0,0);
    UseView(FlatCountersVc);
    h=100; h1=285; h2=460;
    vs = 20;  
    Tile(0,110,false,"",CounterNo);
    EditField(h,v=12,100,"Meter ID",ViewOnly,SerNr,false,0);
    EditField(h1,v,100,"Contract",Normal,Contract,false,NAContractSClass);
    EditField(h,v+=vs,100,"Meter No.",Normal,CounterNo,false,0);
    EditField(h1,v,100,"Premises",ViewOnly,FlatCode,false,FlatsSClass);
    EditField(h,v+=vs,100,"Erf",ViewOnly,Code,false,BuildSClass);
    EditField(h1,v,100,"Premises group",Normal,FlatGroupCode,false,FlatGroupSClass);
    EditField(h2+20,v,100,"Erf group",Normal,BuildGroupCode,false,BuildGroupSClass);
    EditField(h,v+=vs,285,"Address",ViewOnly,Address,false,0);
    EditField(h,v+=vs,285,"Classification",Normal,Classification,false,CClassSClass);
    EditField(h2+20,v,20,"No",Normal,FlatNo,false,0);
    Tilebutton(1,"A");
    Tilebutton(2,"B");
    Tilebutton(3,"User Values");
    Tile(1,200,false,"",CounterType);
    EditField(h,vm=(v=12),100,"Serv. Item",ViewOnly,CounterType,false,INSClass);
    ButtonFrame(h2=350,v+=10,120,3,"Location");
    RadioButton(h2,v,1,0,"Before main meter",LocType);
    RadioButton(h2,v+=16,2,0,"After main meter",LocType);
    RadioButton(h2,v+=16,0,0,"Other",LocType);
    Checkbox(h2+200,vm,0,"Send to AMR",SendToAMRf);
    Checkbox(h2+200,vm+vs,0,"Send to NIP",SendToNIPf);
    Checkbox(h2+200,vm+(2*vs),0,"Controlmeter",ControlCountf);
    EditField(h,v=(vm+vs),100,"Old ID",ViewOnly,OldCounterID,false,0);
    EditField(h,v+=vs,100,"Main meter",Normal,MainCounter,false,FlatCounters2SClass);
    EditField(h,v+=vs,200,"Manufacturer",Normal,Manufacture,false,CountManSClass);
    EditField(h,v+=vs,200,"Production no.",Normal,ManufactureNo,false,0);
    EditField(h,v+=vs,-50,"Comment",Normal,Comment,false,0);
    Checkbox(h,vm=(v+=30),0,"Closed",Closedf);
    Checkbox(h,v+=16,0,"Dont count readings",CountTypef);
    Checkbox(h,v+=16,0,"Defective",Damagef);
    // Jh Fields >
    Checkbox(h,v+=16,0,"Inactive",Inactivef);
    // <
    Checkbox(h1,v=vm,0,"Replaced",Changed);
    Checkbox(h1,v+=16,0,"Do not create a average readings",DontCalcAvgCountRes);
    // Jh
    // <d
    EditField(h1=h1+60,v+=vs,80,"Period",Normal,AvgStartDate,false,PasteCurDate);
    EditField(h1+97,v,80,"-",Normal,AvgEndDate,false,PasteCurDate);
    Tile(2,230,false,"",Location);
//  EditField(h1,v,100,"Pak. tips",Normal,ServiceType,false,CounterTypeSClass);
    EditField(h,v=12,100,"Place",Normal,Location,false,0);
    EditField(h1=315,v,100,"Seal No.",Normal,SealNo,false,0);
    EditField(h,v+=vs,100,"Initial reading 1",Normal,InitAmount,false,0);
    EditField(h1,v,100,"Initial reading 2",Normal,InitAmount2,false,0);
    EditField(h,v+=vs,100,"Inst. date",Normal,InstallDate,false,PasteCurDate);
    EditField(h1,v,100,"Inst. organisation",Normal,InstallOrg,false,CountInstOrgSClass);
    EditField(h1+160,v,-20,"Master",Normal,ExpertCode,false,ExpertSClass);
    EditField(h,v+=vs,100,"Valid until",Normal,ValidUntil,false,PasteCurDate);
    EditField(h1,v,100,"Warn. date",Normal,WarningDate,false,PasteCurDate);
//  EditField(h,v+=vs,100,"Iekš. brīdinājums",Normal,InternalWarnDate,false,PasteCurDate);
    EditField(h,v+=vs,100,"Coefficient",Normal,Coef,true,0);
    EditField(h1,v,100,"Correction",Normal,CorrAmount,true,0);
    EditField(h,v+=vs,100,"Last check",Normal,LastCheckDate,false,PasteCurDate);
    EditField(h1,v,100,"Checked by",Normal,OrgChecked,false,0);
    EditField(h,v+=vs,100,"Date of Verif.",Normal,VerificationDate,false,PasteCurDate);
    EditField(h,v+=vs,100,"Removed",Normal,RemoveDate,false,PasteCurDate);
    EditField(h1,v,100,"Removed by org.",Normal,OrgRemoved,false,0);
    Tile(3,200,false,"",-);
    h = 180; v = 6;
    label = UserDefinedMeters("FlatCountersVc","UserStr1"); // Book No
    if (nonblank(label)) then begin
      EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
    end;
    label = UserDefinedMeters("FlatCountersVc","UserStr2"); // Seq No
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
    end;
    label = UserDefinedMeters("FlatCountersVc","UserStr3"); //  Alpha
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
    end;
    label = UserDefinedMeters("FlatCountersVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
    end;
    label = UserDefinedMeters("FlatCountersVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
    end;
    label = UserDefinedMeters("FlatCountersVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
    end;
    label = UserDefinedMeters("FlatCountersVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
    end;
    label = UserDefinedMeters("FlatCountersVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
    end;

    SpecialMenu("Readings",'',1,"CountResRnsm");
    // SpecialMenu("Apakšskaitītāji",'',2,"CounterListRnSm");
    // SpecialMenu("Atjaunot rādījumus",'',3,"UpdateCountResSm");
    SpecialMenu("Create meter reading",'',4,"CreateCountResDSm");
    SpecialMenu("Change counter type",'',5,"ChangeFlatCounterTypeDSm");
  EndWindow;

  return;
end;


window CountResLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Meter readings",CountResLClass,CGmlist,-);
    SpawnClass(CountResDClass);
    SetWRect(20,80,850,298);
    Sizeable(-1,-1,0,0);
    UseView(CountResVc);
    RecordList(4,17,-21,-39);
    //SpecialMenu("Import/Export estimate Readings",1,"e");
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(74,74,"Meter ID",FlatCounterSerNr,false,FlatCounterSerNr);
    RlColKey(170,170,"Meter No.",CounterNo,false,CounterNo);
    RlColKey(270,270,"Meter type",CounterType,false,CounterType);
    RlColKey(340,340,"Start date",StartDate,false,StartDate);
    RlColKey(420,420,"End Date",EndDate,false,EndDate);
    RlColKey(500,500,"Erf/group",CodeField,false,CodeIndex);
    RlColKey(600,600,"Address",CounterAddr,false,CounterAddr);
    // RlCol   (-150,-150,"Apartment",CounterFlat,false); //Commented out latvia code
    RlColKey(-150,-150,"Premise",FlatCode,false,FlatCode);
    RlColKey(-70,-70,"Consumption",Amount,false,Amount); //Changed from amount to consumption
    SearchField("Search");
  EndWindow;

  return;
end;


window MeterUserLabelTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;
  WindowBegin("User Defined Field Labels - Meters",MeterUserLabelTClass,CGSbl,-);
  SetBlid(MeterUserLabelBlock);
  SetWRect(64,80,509,440);
  v = 6; h = 100;
  EditField(h,v    ,-20,"Text 1",Normal,UserStr1,false,0);
  EditField(h,v+=20,-20,"Text 2",Normal,UserStr2,false,0);
  EditField(h,v+=20,-20,"Text 3",Normal,UserStr3,false,0);
  EditField(h,v+=20,-20,"Text 4",Normal,UserStr4,false,0);
  EditField(h,v+=20,-20,"Text 5",Normal,UserStr5,false,0);
  EditField(h,v+=20,-20,"Value 1",Normal,UserVal1,false,0);
  EditField(h,v+=20,-20,"Value 2",Normal,UserVal2,false,0);
  EditField(h,v+=20,-20,"Value 3",Normal,UserVal3,false,0);
  EditField(h,v+=20,-20,"Date 1",Normal,UserDate1,false,0);
  EditField(h,v+=20,-20,"Date 2",Normal,UserDate2,false,0);
  EditField(h,v+=20,-20,"Date 3",Normal,UserDate3,false,0);
  EndWindow;
end;



window CountResDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,v,vs;

   WindowBegin("Meter readings",CountResDClass,CGview,-);
    SetWRect(64,80,640,420);
    UseView(CountResVc);
    ActiveFieldOnNew("FlatCode");
    h=120; h1=360; h2=450;
    vs = 20;
    Tile(0,110,false,"",CounterNo);  //90
    EnterSkip(StartDate);
    EditField(h,v=6,100,"Number",ViewOnly,SerNr,false,TSerSClass);
    EditField(h1,v,100,"Meter ID",Normal,FlatCounterSerNr,false,FlatCounters2SClass);
    EditField(h,v+=vs,100,"Meter No.",ViewOnly,CounterNo,false,0);
    EnterSkip(StartDate);
    EditField(h1,v,100,"Premise",ViewOnly,FlatCode,false,FlatsSClass);
    EditField(h,v+=vs,100,"Contract",ViewOnly,ContractNr,false,NAContractSClass);
    EditField(h1,v,100,"Reg. Date",ViewOnly,RegDate,false,PasteCurDate);
    // EditField(h,v+=vs,100,"Meter type",Normal,CountResType,false,CountResTypeSClass);
    // EditField(h1-50,v,150,"Name",Normal,CountResTypeName,false,0);
    EnterSkip(EndVal);
    TileButton(1,"Reading");
    TileButton(2,"Correction");
    Tile(1,70,true,"",StartDate);
    EditField(h-30,v=10,80,"Premise group",ViewOnly,FlatGroupCode,false,FlatGroupSClass);

    EditField(h1-100,v,80,"Erf group",ViewOnly,BuildGroupCode,false,BuildGroupSClass);
    EditField(h1+50,v,80,"Erf",ViewOnly,BuildCode,false,BuildSClass);

    EditField(h,v+=vs,100,"Serv. Item",ViewOnly,CounterType,false,0);
    EditField(h1,v,100,"Place",ViewOnly,Location,false,0);
    EditField(h,v+=vs,100,"Date of transfer",ViewOnly,DelivDate,false,PasteCurDate);
    EditField(h,v+=vs+10,100,"Start date",Normal,StartDate,false,PasteCurDate);
    EnterSkip(EndVal);
    EditField(h1,v,100,"Start reading",Normal,StartVal,false,0);
    EditField(h,v+=vs,100,"End Date",Normal,EndDate,false,PasteCurDate);
    EditField(h1,v,100,"End reading",Normal,EndVal,false,0);
    CheckBox(h1+110,v-70,0,"Housekeeper",VacFlag);
    // CheckBox(h1+110,v-16,0,"Actual",Actualf);
    // CheckBox(h1+110,v-2,0,"Estimate",Estimatef);
    ButtonFrame(h1+110,v-12,0,5,"Reading");
    RadioButton(h1+110,v-10,0,0,"Actual",Itype);
    RadioButton(h1+110,v+10,1,0,"Estimate",Itype);

    EditField(h,v+=vs,100,"Main meter",ViewOnly,MainCounter,false,FlatCountersSClass);
    EditField(h1,v,100,"Consumption",Normal,Amount,false,0); //changed from amount to consumption;
    EditField(h,v+=vs,180,"Address",ViewOnly,CounterAddr,false,0);
    EditField(h1,v,50,"Apartment",ViewOnly,CounterFlat,false,0);
    Tile(2,70,true,"",Coef);
    h = 100;
    EditField(h,v=16,100,"Coefficient",Normal,Coef,true,0);
    EditField(h,v+=vs,100,"Correction",Normal,CorAmount,true,0);
    EditField(h,v+=vs,100,"Adjusted quantity",ViewOnly,InvAmount,true,0);
    EditField(h,v+=vs,-100,"Comment",Normal,Comment,false,0);
  EndWindow;

  return;
end;

window ServicePlanLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Tariffs",ServicePlanLClass,CGmlist,-);
    SpawnClass(ServicePlanDClass);
    SetWRect(20,80,920,298);
    Sizeable(-1,-1,0,0);
    UseView(ServicePlanVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(84,84,"Gl.",GlobalServPlan,false,GlobalServPlan);
    RlColKey(105,105,"Date",TransDate,false,TransDate);
    RlColKey(195,195,"Type",ServType,false,ServType);
    RlCol   (275,275,"Description",Comment,false);
    RlColKey(465,465,"Erf/Group",CodeField,false,CodeIndex);
    RlColKey(555,555,"Address",Address,false,Address);
    RlCol   (-200,-200,"Start date",StartDate,false);
    RlCol   (-100,-100,"End Date",EndDate,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window ServicePlanDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,v,vs;

  WindowBegin("Tariffs",ServicePlanDClass,CGview,-);
    SetWRect(64,80,720,420);
    Sizeable(-1,-1,0,0);
    UseView(ServicePlanVc);
    h=110; h1=320; h2=300;h3 = 490;
    vs = 20;
    EditField(h,v=12,100,"Number",Normal,SerNr,false,0);
    EditField(h2,v,100,"Date",Normal,TransDate,false,PasteCurDate);
    EditField(h,v+=vs,100,"Service",Normal,ServType,false,INSClass);
    EditField(h2,v,-50,"Description",Normal,Comment,false,0);
    EditField(h,v+=vs,100,"Erf",Normal,BuildCode,false,BuildSClass);
    EditField(h2,v,100,"Erf group",Normal,BuildGroupCode,false,BuildGroupSClass);
    EditField(h2+170,v,-50,"Premise group",Normal,FlatGroupCode,false,FlatGroupSClass);
    EditField(h,v+=vs,-50,"Comment",Normal,Address,false,0);
    EditField(h,v+=vs,100,"Start date",Viewonly,StartDate,false,PasteCurDate);
    EditField(h2,v,100,"End Date",Viewonly,EndDate,false,PasteCurDate);
    CheckBox(h2+170,v+2,0,"Global tariff",GlobalServPlan);
    MatrixBegin(4,v=136,-50,-19,-,200);
    MatCol(1,32,"Start date",0,StartDate,false,PasteCurDate);
    MatCol(1,120,"End Date",0,EndDate,false,PasteCurDate);
    MatCol(1,204,"Planned",0,PlanPrice,true,0);
    MatCol(1,284,"Actual",0,RealPrice,true,0);
    MatCol(1,-250,"Correction",0,Correction,true,0);
    MatCol(1,-180,"Status",0,DoneFlag,false,SetSClass);
    MatColTL(1,-100,"Coef.",0,M45Val,Normal,0,QtyCoef,false,SetSClass);
    endmatrix;
    InsertrowTest;
    DeleterowTest;
  EndWindow;

  return;
end;

window ServRecPlanSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert divided services",ServRecPlanSClass,CGslist,-);
    SpawnClass(ServRecPlanDClass);
    SetWRect(20,80,680,298);
    Sizeable(-1,-1,0,0);
    UseView(ServRecPlanVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(70,70,"Gl.",DoNotCheckRows,false,DoNotCheckRows);
    RlColKey(90,90,"Erf/ Erf group/Premise group",CodeField,false,CodeIndex);
    RlColKey(200,200,"Comment",Address,false,Address);
    RlColKey(-290,-290,"Calc. formula",CalcServPlan,false,CalcServPlan);
    RlColKey(-220,-220,"Name",Description,false,Description);
    SearchField("Search");
  EndWindow;

  return;
end;

window ServRecPlanLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Divided services",ServRecPlanLClass,CGmlist,-);
    SpawnClass(ServRecPlanDClass);
    SetWRect(20,80,780,298);
    Sizeable(-1,-1,0,0);
    UseView(ServRecPlanVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(70,70,"Gl.",DoNotCheckRows,false,DoNotCheckRows);
    RlColKey(90,90,"Erf/ Erf group/Premise group",CodeField,false,CodeIndex);
    RlColKey(200,200,"Comment",Address,false,Address);
    RlColKey(490,490,"Calc. formula",CalcServPlan,false,CalcServPlan);
    RlColKey(560,560,"Name",Description,false,Description);
    SearchField("Search");
  EndWindow;

  return;
end;

window ServRecPlanDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Divided service",ServRecPlanDClass,CGview,-);
    SetWRect(20,80,650,335);
    Sizeable(-1,-1,0,0);
    UseView(ServRecPlanVc);
    EditField(h=100,v=6,95,"Number",Normal,SerNr,false,0);
    EditField(h+200,v,100,"Date",Normal,TransDate,false,PasteCurDate);
    CheckBox(h+350,v,0,"Tariff set",ServPlanMade);
    EditField(h,v+=20,100,"Calc. formula",Normal,CalcServPlan,false,CalcServicePlanSClass);
    EditField(h+200,v,-50,"Name",Normal,Description,false,0);
    EditField(h,v+=20,100,"Erf",Normal,BuildCode,false,BuildSClass);
    EditField(h+200,v,100,"Erf group",Normal,BuildGroupCode,false,BuildGroupSClass);
    EditField(h+370,v,100,"Premise group",Normal,FlatGroupCode,false,FlatGroupSClass);
    EditField(h,v+=20,-50,"Comment",Normal,Address,false,0);
    EditField(h+200,v+=20,-50,"Excluded services from tariff calculation",Normal,ExclServList,false,INSClass);
    MatrixBegin(4,v+=40,-25,-20,-,299);
    MatCol(1,30,"From",0,SDate,false,PasteCurDate);
    MatCol(1,120,"Until",0,EDate,false,PasteCurDate);
    MatCol(1,-300,"Amount EUR",0,RowSum,false,0);
    MatCol(1,-200,"Amount MWh",0,RowSum2,false,0);
    MatCol(1,-100,"Closing days",0,OffDays,true,0);
    EndMatrix;
    CheckBox(h=50,v=-22,0,"When calculating tariffs, do not check rows",DoNotCheckRows);
    CheckBox(h=250,v=-22,0,"Sum incl. VAT",InclVAT);
    CheckBox(h=380,v,0,"Permit renew data from incoming invoices",UpdateFromVIVc);
    SpecialMenu("Check",'p',1,"CheckServCalcSm");
  EndWindow;

  return;
end;

window FlatGroupSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert premise group",FlatGroupSClass,CGslist,-);
    SpawnClass(FlatGroupDClass);
    SetWRect(20,80,430,298);
    Sizeable(-1,-1,0,0);
    UseView(FlatGroupVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(110,110,"Comment",Comment,false,Comment);
    SearchField("Search");
  EndWindow;

  return;
end;

window FlatGroupLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Premise group",FlatGroupLClass,CGmlist,-);
    SpawnClass(FlatGroupDClass);
    SetWRect(20,80,430,298);
    Sizeable(-1,-1,0,0);
    UseView(FlatGroupVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(110,110,"Comment",Comment,false,Comment);
    RlColKey(-220,-220,"Erf",LinkBuildCode,false,LinkBuildCode);
    RlColKey(-150,-150,"Address",Address,false,Address);
    SearchField("Search");
    SpecialMenu("Meter readings",'s',1,"FlatGroupCounterRessm");
  EndWindow;

  return;
end;

window FlatGroupDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;

  WindowBegin("Premise group",FlatGroupDClass,CGview,-);
    SetWRect(64,80,320,280);
    Sizeable(-1,-1,0,0);
    UseView(FlatGroupVc);
    h=100; vs = 20;
    EditField(h,v=12,60,"Code",Normal,Code,false,0);
    EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
    EditField(h,v+=vs,-40,"Classification",Normal,Classification,false,MSClassSClass);
    EditField(h,v+=vs,80,"Erf",ViewOnly,LinkBuildCode,false,BuildSClass);
    EditField(h+200,v,-40,"Address",ViewOnly,Address,false,0);
    EditField(h,v+=vs,80,"Start date",Normal,StartDate,false,PasteCurDate);
    EditField(h+200,vm=v,80,"End date",Normal,EndDate,false,PasteCurDate);
    EditField(h,v+=20,80,"ISP controller",Normal,ISPController,false,0);
    EditField(h+200,v,80,"Base",Normal,Base,false,0);
    CheckBox(h+350,v=vm,0,"Cold water diff. calculations",ColdWaterDiffCalc);
    CheckBox(h+350,v+=16,0,"Hot water diff. calculations",HotWaterDiffCalc);

    MatrixBegin(4,v+=50,-50,-19,-,199);
    MatCol(1,h=25,"Premise",0,RowCode,false,FlatsSClass);
    MatCol(1,120,"Comment",0,RowComment,false,0);
    EndMatrix;
    SpecialMenu("Change meter",'m',3,"MSChangeCountFlatGroupMnSm");
    SpecialMenu("Meter readings",'s',1,"FlatGroupCounterRessm");
  EndWindow;

  return;
end;

window AddressFieldLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Address fields",AddressFieldLClass,CGmlist,-);
    SpawnClass(AddressFieldDClass);
    SetWRect(20,80,200,300);
    Sizeable(-1,-1,0,0);
    UseView(AddressFieldVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"No",SerNr,false,SerNr);
    RlColKey(110,110,"Name",Name,false,Name);
    SearchField("Search");
  EndWindow;

  return;
end;

window AddressFieldDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Address field",AddressFieldDClass,CGview,-);
    SetWRect(64,80,500,380);
    Sizeable(-1,-1,-1,-1);
    UseView(AddressFieldVc);
    ActiveFieldOnNew("Name");
    h=150; vs = 20;
    EditField(h,v=12,60,"No",Normal,SerNr,false,0);
    EditField(h,v+=vs,200,"Name",Normal,Name,false,0);
    ButtonFrame(h,v+=vs*3,110,6,"Type");
    RadioButton(h,v,0,0,"Street",Type);
    RadioButton(h,v+=16,1,0,"Build. No.",Type);
    RadioButton(h,v+=16,2,0,"City",Type);
    RadioButton(h,v+=16,3,0,"Rural Ter.",Type);
    RadioButton(h,v+=16,4,0,"Municip.",Type);
    RadioButton(h,v+=16,5,0,"Post Code",Type);
  EndWindow;

  return;
end;

window AddressFieldSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert address field",AddressFieldSClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildFieldLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Erf field values",BuildFieldLClass,CGmlist,-);
    SpawnClass(BuildFieldDClass);
    SetWRect(20,80,300,400);
    Sizeable(-1,-1,0,0);
    UseView(BuildFieldVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Erf",BuildCode,false,BuildCode);
    RlColKey(100,100,"Field",FieldCode,false,FieldCode);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildFieldDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Erf field values",BuildFieldDClass,CGview,-);
    SetWRect(64,80,650,350);
    UseView(BuildFieldVc);
    h = 80; v = 12;
    EditField(h,v,80,"Field",Normal,FieldCode,false,FlatFieldCodeSClass);
    EditField(h+140,v,100,"Erf",ViewOnly,BuildCode,false,BuildSClass);
    MatrixBegin(4,v+=50,-50,-19,-,399);
    MatCol(1,32,"Date",0,StartDate,false,PasteCurDate);
    MatCol(1,120,"Value",0,Value,false,0);
    MatCol(1,200,"Comment",0,Comment,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window BuildFieldCodeSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2;
  real v,vs;

  WindowBegin("Erf fields",BuildFieldCodeSClass,CGslist,-);
    SpawnClass(BuildFieldCodeDClass);
    SetWRect(20,80,460,300);
    UseView(BuildFieldCodeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Field",FieldCode,false,FieldCode);
    RlColKey(100,100,"Short name",ShortName,false,ShortName);
    RlColKey(200,200,"Name",Name,false,Name);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildFieldCodeDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2;
  real v,vs;

  WindowBegin("Erf field",BuildFieldCodeDClass,CGview,-);
    SetWRect(64,80,520,200);
    UseView(BuildFieldCodeVc);
    h = 80;
    h2 = h + 200;
    vs = 20;
    v = 12;
    EditField(h,v,90,"Field",Normal,FieldCode,false,0);
    EditField(h2,v,100,"Short name",Normal,ShortName,false,0);
    EditField(h,v+=vs,300,"Name",Normal,Name,false,0);
    EditField(h,v+=vs,70,"Type",Normal,FieldType,false,SetSClass);
    CheckBox(h2,v,0,"Average calc",CalcAvg);
        // Calculate yearly charge
    CheckBox(h2,v+=vs,0,"Yearly Charge",CalcYearlybuild);
    EditField(h,v,70,"Minimum",Normal,Minimum,false,0);
  EndWindow;

  return;
end;

window BuildFieldCodeLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2;
  real v,vs;

  WindowBegin("Erf fields",BuildFieldCodeLClass,CGmlist,-);
    SpawnClass(BuildFieldCodeDClass);
    SetWRect(20,80,460,300);
    UseView(BuildFieldCodeVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Field",FieldCode,false,FieldCode);
    RlColKey(100,100,"Short name",ShortName,false,ShortName);
    RlColKey(200,200,"Name",Name,false,Name);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildFieldSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2;
  real v,vs;

  WindowBegin("Erf field settings",BuildFieldSetTClass,CGHbl,HBlRecType);
    SetBlid(BuildFieldSetBlock);
    SetWRect(20,80,340,480);
    h = 8; v = 26; h1=24;
    MatrixBegin(h,v,-31,-20,-,20);
    MatCol(1,h1,"Field",0,FieldCode,false,BuildFieldCodeSClass);
    MatCol(1,h1+100,"Name",0,Name,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window ChBuildFieldWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Open build field values",ChBuildFieldWClass,CGother,RcType);
    SetWRect(100,100,420,160);
    UseView(RcVc);
    h = 80;
    vs = 20;
    v = 12;
    EditField(h,v,100,"Field",Normal,f2,false,BuildFieldCodeSClass);
    HalPushButton(h+130,v-5,h+230,v+15,"OpenBuildField","Open");
  EndWindow;

  return;
end;

window CalcServPlanVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs,vm;

  WindowBegin("Create tariffs",CalcServPlanVClass,CGMnt,RcType);
    SetWRect(20,80,400,330);
    Sizeable(-1,-1,0,0);
    vs = 20; h=100; h2=30; h3=160;
    PeriodField(h,v=6,"Period");
    EditField(h,v+=vs,100,"Erf",Normal,f1,false,BuildSClass);
    EditField(h,v+=vs,100,"Erf group",Normal,f4,false,BuildGroupSClass);
    EditField(h,v+=vs,100,"Premises group",Normal,f5,false,FlatGroupSClass);
    EditField(h,v+=vs,100,"Class",Normal,f2,false,MSClassSClass);
    EditField(h,v+=vs,100,"Calc. formula",Normal,f3,false,CalcServicePlanSClass);
    ButtonFrame(h2,v+=40,80,0,"Classification. type");
    CheckBox(h2,vm=(v),0,"Erfs",flags[1]);
    CheckBox(h2,v+=16,0,"Erf group",flags[2]);
    CheckBox(h2,v+=16,0,"Premise group",flags[3]);
    CheckBox(h2,v+=30,0,"Run the service at no extra parameters",flags[10]);
    CheckBox(h3,v=vm,0,"Overwrite the existing records",flags[0]);
    CheckBox(h3,v+=16,0,"Create tariffs",flags[4]);
    CheckBox(h3,v+=16,0,"Create calc. values",flags[5]);
  EndWindow;

  return;
end;

window MSFlatServInvVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Create invoice - premises",MSFlatServInvVClass,CGMnt,RcType);
    SetWRect(100,100,400,220);
    h = 100;v=10;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=20,82,"Invoice date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditFieldTL(h,v+=20,100,"Erf",M4Str,Normal,50,f1,false,BuildSClass);
    EditFieldTL(h,v+=20,100,"Classification",M4Str,Normal,50,f3,false,MSClassSClass);
    EditFieldTL(h,v+=20,100,"Premise",M4Str,Normal,50,f2,false,FlatsSClass);
    CheckBox(h,v+=20,0,"Bookmark created invoices",flags[4]);
    CheckBox(h,v+=16,0,"Incl. services w/o sum",flags[29]);
  EndWindow;

  return;
end;

window MSBuildServInvVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;

  WindowBegin("Create invoice - Erfs",MSBuildServInvVClass,CGMnt,RcType);
    SetWRect(100,100,400,220);
    h = 100;v=10;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=20,82,"Invoice date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditFieldTL(h,v+=20,100,"Erf",M4Code,Normal,50,f1,false,BuildSClass);
    EditFieldTL(h,v+=20,100,"Classification",M4UStr,Normal,50,f3,false,MSClassSClass);
    CheckBox(h,v+=20,0,"Bookmark created invoices",flags[4]);
  EndWindow;

  return;
end;

window MSFlatServInvRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs,vm;

  WindowBegin("Create invoice - premises",MSFlatServInvRClass,CGRcW,RcType);
    SetWRect(100,100,420,240);
    h = 100;v=10;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=20,82,"Inv. date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditFieldTL(h,v+=20,100,"Erf",M4Code,Normal,50,f1,false,BuildSClass);
    EditFieldTL(h,v+=20,100,"Classification",M4UStr,Normal,50,f3,false,MSClassSClass);
    EditFieldTL(h,v+=20,100,"Premise",M4Code,Normal,50,f2,false,FlatsSClass);
    vm = v+=48;
    ButtonFrame(h=20,v=vm,70,2,"Funciton");
    RadioButton(h+=10,v=vm,0,0,"Detailed",ArtMode);
    RadioButton(h,v+=16,1,0,"Overview",ArtMode);
    EndFrame;
    ButtonFrame(h=140,v=vm,170,4,"Include");
    CheckBox(h+=10,v,0,"Only premises without invoices",flags[0]);
    CheckBox(h,v+=16,0,"Sums of the invoice",flags[1]);
    CheckBox(h,v+=16,0,"Calc penalty",flags[2]);
    CheckBox(h,v+=16,0,"Incl. services w/o sums",flags[29]);
    EndFrame;
  EndWindow;

  return;
end;

window MSBuildServInvRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs,vm;

  WindowBegin("Create invoice - builings",MSBuildServInvRClass,CGRcW,RcType);
    SetWRect(100,100,400,240);
    h = 100;v=10;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=20,82,"Inv. date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditFieldTL(h,v+=20,100,"Erf",M4Code,Normal,50,f1,false,BuildSClass);
    EditFieldTL(h,v+=20,100,"Classification",M4UStr,Normal,50,f3,false,MSClassSClass);
    vm = v+=48;
    ButtonFrame(h,v=vm,140,2,"Include");
    CheckBox(h,v,0,"Only premises without invoices",flags[0]);
    CheckBox(h,v+=16,0,"Sums of the invoice",flags[1]);
    CheckBox(h,v+=16,0,"Calc penalty",flags[2]);
    EndFrame;
  EndWindow;

  return;
end;

window OwnersDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,v;

  WindowBegin("Owners",OwnersDClass,CGview,-);
    SetWRect(64,80,720,200);
    UseView(OwnersVc);
    h = 100; v = 12; h1=24;
    EditField(h,v,90,"Code",Normal,Code,false,0);
    MatrixBegin(8,52,-31,-20,-,20);
    MatCol(1,h1,"Client",0,CustCode,false,CUSClass);
    MatCol(1,h1+=80,"Name",0,CustName,false,0);
    MatCol(1,h1+=120,"Start date",0,StartDate,false,PasteCurDate);
    MatCol(1,h1+=100,"End date",0,EndDate,false,PasteCurDate);
    MatCol(1,h1+=100,"Reg. No",0,RegNr,false,0);
    MatCol(1,h1+=100,"Deemed part",0,DeemedPart,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window CountResTypeSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert meter reading type",CountResTypeSClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
    SearchField("Search");
  EndWindow;

  return;
end;

window CountResTypeTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,v;

  WindowBegin("Meter reading types",CountResTypeTClass,CGHbl,HBlRecType);
    SetBlid(CountResTypBlock);
    SetWRect(20,80,340,480);
    h = 8; v = 26; h1=24;
    MatrixBegin(h,v,-31,-20,-,20);
    MatCol(1,h1,"Code",0,Code,false,0);
    MatCol(1,h1+100,"Name",0,Name,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window CheckServCalcVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Tariff calculation formula test",CheckServCalcVClass,CGMnt,RcType);
    SetWRect(20,80,400,200);
    PeriodField(120,10,"Period");
    EditFieldTL(120,30,150,"Erf",M4UStr,Normal,41,f2,false,BuildSClass);
    EditFieldTL(120,50,150,"Group of Erfs",M4UStr,Normal,41,f4,false,BuildGroupSClass);
    EditFieldTL(120,70,150,"Space group",M4UStr,Normal,41,f3,false,FlatGroupSClass);
  EndWindow;

  return;
end;

window INPayPrioritySClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Item payment priorities",INPayPrioritySClass,CGslist,-);
    SpawnClass(INPayPriorityDClass);
    SetWRect(74,80,509,298);
    Sizeable(-1,-1,0,0);
    UseView(INPayPriorityVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    Calculatedcolumn(85,85,"Pay. method","TypeColumnINPayPriorityCC",false);
    RlColKey(250,250,"Comment",Comment,false,Comment);
    SearchField("Search");
  EndWindow;

  return;
end;

window INPayPriorityLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Item payment priorities",INPayPriorityLClass,CGmlist,-);
    SpawnClass(INPayPriorityDClass);
    SetWRect(74,80,509,298);
    Sizeable(-1,-1,0,0);
    UseView(INPayPriorityVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    Calculatedcolumn(85,85,"Pay. method","TypeColumnINPayPriorityCC",false);
    RlColKey(250,250,"Comment",Comment,false,Comment);
    SearchField("Search");
  EndWindow;

  return;
end;

window INPayPriorityDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Item payment priorities",INPayPriorityDClass,CGview,-);
    SetWRect(64,80,320,280);
    Sizeable(-1,-1,0,0);
    UseView(INPayPriorityVc);
    h=100;
    EditField(h,v=12,60,"Number",ViewOnly,SerNr,false,0);
    EditField(h+150,v,-100,"Comment",Normal,Comment,false,0);
    ButtonFrame(h,v+=40,80,3,"Payment Method");
    RadioButton(h,v,0,0,"Priority",INPayType);
    RadioButton(h,v+=16,1,0,"Proportional",INPayType);
    RadioButton(h,v+=16,2,0,"Only specified",INPayType);
    MatrixBegin(4,v+=50,-50,-19,-,999);
    MatCol(1,h=25,"Item",0,ArtCode,false,INSClass);
    MatCol(1,h+=100,"Priority",0,Type,false,SetSClass);
    EnterSkip(ArtCode);
    MatCol(1,h+=90,"Comment",0,Comment,false,0);
    InsertRowTest;
    DeleteRowTest;
    EndMatrix;
  EndWindow;

  return;
end;

window FlatFieldsRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs,vm;

  WindowBegin("Premises fields",FlatFieldsRClass,CGRcW,RcType);
    SetWRect(100,100,400,240);
    h=100; v=6;
    PeriodField(h,v,"Period");
    EditField(h,v+=20,100,"Erf",Normal,f1,false,BuildSClass);
    EditField(h,v+=20,100,"Premises fields",Normal,f2,false,FlatFieldCodeSClass);
    EditField(h,v+=20,100,"Service",Normal,f3,false,INSClass);
    // CheckBox(h,v+=30,0,"Ar koeficientiem",flags[1]);
    ButtonFrame(h,v+=40,70,2,"Funciton");
    RadioButton(h,v,0,0,"Detailed",ArtMode);
    RadioButton(h,v+=16,1,0,"Overview",ArtMode);
  EndWindow;

  return;
end;

window MSCountListRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("List of meters",MSCountListRClass,CGrCW,RcType);
    SetWRect(100,100,400,220);
    h = 100;v = 10; vs = 20;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=vs,100,"Meter",M4UStr,Normal,60,f2,false,FlatCountersSClass);
    CheckBox(h+120,v,0,"Old",flags[1]);
    EditFieldTL(h,v+=vs,100,"Erf",M4UStr,Normal,60,f3,false,BuildSClass);
    EditFieldTL(h,v+=vs,100,"Premise",M4UStr,Normal,60,f5,false,FlatsSClass);
    EditFieldTL(h,v+=vs,100,"Meter type",M4UStr,Normal,60,f4,false,INSClass);
    CheckBox(h,v+=vs,0,"Meters without reading",flags[0]);
  EndWindow;

  return;
end;

window RecalcItemPayHistVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v;

  WindowBegin("Recalculate item payment history",RecalcItemPayHistVClass,CGMnt,RcType);
    SetWRect(20,80,300,120);
    StaticText(20,v=10,"Maintenance recalculates values in item",false);
    StaticText(20,v+=20,"history and status support registers",false);
    EditField(100,v+=20,100,"Client",Normal,f1,false,CUSClass);
  EndWindow;

  return;
end;

window IntPercLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Penalty interest",IntPercLClass,CGmlist,-);
    SpawnClass(IntPercDClass);
    SetWRect(20,80,500,298);
    Sizeable(-1,-1,0,0);
    UseView(IntPercVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(100,100,"Name",Description,false,Description);
    RlCol   (320,320,"Err. Percentage",DefIntPrc,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window IntPercSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert penalty percentage",IntPercSClass,CGslist,-);
    SpawnClass(IntPercDClass);
    SetWRect(20,80,500,298);
    Sizeable(-1,-1,0,0);
    UseView(IntPercVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlColKey(100,100,"Name",Description,false,Description);
    RlCol   (320,320,"Err. Percentage",DefIntPrc,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window IntPercDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Penalty interest",IntPercDClass,CGview,-);
    SetWRect(20,80,450,325);
    UseView(IntPercVc);
    EditField(h=100,v=6 ,   95,"Code",Normal,Code,false,0);
    EditField(h,v+=20,-50,"Name",Normal,Description,false,IntPercTypesSClass);
    EditField(h,v+=20,100,"Err. percentage",Normal,DefIntPrc,false,0);
    EditField(h+200,v,-50,"Penalty article",Normal,IntItem,false,INSClass);
    ButtonFrame(h,v+=40,150,3,"Calculation method");
    RadioButton(h,v,0,1,"Stat. perc.",Calcf);
    RadioButton(h,v+=16,1,0,"Contractual penalty",Calcf);
    RadioButton(h,v+=16,2,0,"Dont calculate",Calcf);
    MatrixBegin(4,v+=40,-50,-19,-,200);
    MatCol(1,32,"Start date",0,StartDate,false,PasteCurDate);
    MatCol(1,117,"End date",0,EndDate,false,PasteCurDate);
    MatCol(1,-180,"Penalty interest",0,IntPrc,false,0);
    MatColTL(1,-80,"Calc. way",0,M4Set,Normal,1068,CalcWay,false,SetSClass);
    Endmatrix;
  EndWindow;

  return;
end;

window BBS_IVSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert invoices",BBS_IVSClass,CGslist,-);
    SetWRect(20,80,800,300);
    Sizeable(-1,-1,0,0);
    SpawnClass(IVDClass);
    UseView(IVVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,2,"No.",SerNr,false,BBS_SerNr);
    RlColKey(79,79,"OK",OKFlag,false,BBS_OKFlag);
    RlColKey(111,111,"Invoice. dat.",InvDate,false,BBS_InvDate);
    RlCol(190,190,"Invoice. address",Addr1,false);
    RlCol(370,370,"Customer",CustCode,false);
    RlCol(440,440,"Name",Addr0,false);
    RlCol(-170,-170,"Erf",BuildCode,false);
    RlCol(-100,-100,"Together",Sum4,true);
    RlCol(-35,-35,"",CredMark,true);
    RlCol(-25,-25,"Currency",CurncyCode,true);
    RlCol(-1,-1,"",Invalid,true);
    SearchField("Search");
  EndWindow;

  return;
end;

window UndoInvVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Cancel invoice preparation",UndoInvVClass,CGMnt,RcType);
    SetWRect(100,100,400,250);
    h=100;v=10;
    // PeriodField(h,v,"Period");
    EditField(h,v,100,"Date",Normal,d1,false,PasteCurDate);
    EditFieldTL(h,v+=20,100,"Erf",M4Str,Normal,40,f1,false,BuildSClass);
    EditFieldTL(h,v+=20,100,"Classification",M4Str,Normal,50,f3,false,MSClassSClass);
    // ButtonFrame(h=60,v+=60,110,3,"Invoices with item types");
    // RadioButton(h+=10,v,0,1,"Without mark",flags[16]);
    // RadioButton(h,v+=16,1,0,"With mark",flags[16]);
    // RadioButton(h,v+=16,2,0,"All",flags[16]);
  EndWindow;

  return;
end;

window SearchFlat2RClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Search premises",SearchFlat2RClass,CGRcW,RcType);
    SetWRect(20,80,400,150);
    h=100;
    EditFieldTL(h,v=10,150,"Address",M4Str,Normal,200,f1,false,0);
    EditFieldTL(h,v+=20,60,"Apartment",M4Str,Normal,20,f2,false,0);
  EndWindow;

  return;
end;

window NApsSetTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Direct payment settings",NApsSetTClass,CGSbl,-);
    SetBlid(NApsSetBlock);
    SetWRect(64,80,400,300);
    Sizeable(-1,-1,0,0);
    EditField(h=150,v=10,100,"Globl pay. priority",Normal,INPayPriority,false,INPayPrioritySClass);
    EditField(h,v+=20,100,"Reading start date",Normal,DefaultCountResSDate,false,PasteCurDate);
    EditField(h,v+=20,100,"Reading end date",Normal,DefaultCountResEDate,false,PasteCurDate);
    EditField(h,v+=20,100,"Penalty account no.",Normal,PenAccCode,false,AccSClass);
    CheckBox(75,v+=32,0,"Invoice archiving in PDF",AddPDFToInvoice);
    CheckBox(75,v+=16,0,"Negativa values \"Meter readings import\" ",NegValCountResIn);
    CheckBox(75,v+=32,0,"Skip pay. date check in invoice",SkipPayDateCheck);


  EndWindow;

  return;
end;

window ChangeCount2VClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Replace the meter",ChangeCount2VClass,CGMnt,RcType);
    SetWRect(100,100,500,460);
    h = 140; vs=20;
    StaticText(h,v=15,"Old meter",true);
    EditFieldTL(h,v+=7,100,"Old meter ID",M4Long,Normal,0,long1,false,FlatCounters2SClass);
    EditFieldTL(h,v+=vs,100,"Old meter premise",M4Code,ViewOnly,20,f3,false,0);
    EditFieldTL(h,v+=vs,100,"Old meter number",M4Code,ViewOnly,20,f1,false,0);
    EditFieldTL(h,v+=vs,100,"Change date",M4Date,Normal,0,d1,false,PasteCurDate);
    EditFieldTL(h,v+=vs,100,"Last read value 1",M4Str,ViewOnly,10,f8,false,0);
    StaticText(h+110,v+13,"(Without type or MWH)",false);
    EditFieldTL(h,v+=vs,100,"Last read value 2",M4Str,ViewOnly,10,f10,false,0);
    StaticText(h+110,v+13,"(M3)",false);
    EditFieldTL(h,v+=vs,100,"Read value on change 1",M4Str,Normal,10,f9,false,0);
    StaticText(h+110,v+13,"(Without type or MWH)",false);
    EditFieldTL(h,v+=vs,100,"Read value on change 2",M4Str,Normal,10,f11,false,0);
    StaticText(h+110,v+13,"(M3)",false);
    StaticText(h,v+=40,"New meter",true);
    //EditFieldTL(h,v=6,100,"Jaunā skait. telpa",M4Code,Normal,20,f4,false,FlatsSClass);
    CheckBox(h,v+=7,0,"Create a new meter",flags[0]);
    EditFieldTL(h,v+=vs,100,"Setting date",M4Date,Normal,0,sStartDate,false,PasteCurDate);
    EditFieldTL(h,v+=vs,100,"New meter number",M4Code,Normal,20,f2,false,FirstFreeMainCountNoSClass); //FlatCountersSClass
    EditFieldTL(h,v+=vs,100,"Start reading 1",M45Val,Normal,0,vals1,false,0);
    StaticText(h+110,v+13,"(Without type or MWH)",false);
    EditFieldTL(h,v+=vs,100,"Start reading 2",M45Val,Normal,0,vals2,false,0);
    StaticText(h+110,v+13,"(M3)",false);
    EditFieldTL(h,v+=vs,100,"Valid until",M4Date,Normal,0,d2,false,PasteCurDate);
    EditFieldTL(h,v+=vs,100,"Verif. date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditFieldTL(h,v+=vs,100,"Manufacturer",M4Str,Normal,100,f5,false,CountManSClass);
    EditFieldTL(h,v+=vs,100,"Rūpnieciskais nr.",M4Str,Normal,100,f12,false,0);
    EditFieldTL(h,v+=vs,100,"Setting org.",M4Str,Normal,100,f6,false,CountInstOrgSClass);
    EditFieldTL(h,v+=vs,100,"Master",M4Code,Normal,10,f7,false,ExpertSClass);
  EndWindow;

  return;
end;

window SearchNAContractRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;
  WindowBegin("Search contract",SearchNAContractRClass,CGRcW,RcType);
  SetWRect(64,80,509,298);
  vs =20;h=100;v=5;
  EditFieldTL(h,6 ,-20,"Search",M4Str,Normal,40,f1,false,0);
  ButtonFrame(h,v=50,123,9,"Search by");
  RadioButton(h,v,1,0,"Name",ArtMode);
  RadioButton(h,v+=16,2,0,"Client no.",ArtMode);
  RadioButton(h,v+=16,3,0,"Address",ArtMode);
  RadioButton(h,v+=16,0,0,"Any field",ArtMode);
  EndFrame;
  EndWindow;

  return;
end;

window BBSIVCommentDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Invoice comments",BBSIVCommentDClass,CGview,-);
    SetWRect(20,80,620,410);
    UseView(BBSIVCommentVc);
    Sizeable(-1,-1,0,0);
    vs=20;
    EditFieldTL(h=100,v=6,60,"Number",M4Long,ViewOnly,0,SerNr,false,0);
    EditFieldTL(h,v+=vs,260,"Comment",M4Str,Normal,100,Comment,false,0);
    EditFieldTL(h,v+=vs,80,"Start Date",M4Date,Normal,0,StartDate,false,PasteCurDate);
    EditFieldTL(h+180,v,80,"End date",M4Date,Normal,0,EndDate,false,PasteCurDate);
    EditFieldTL(h,v+=vs,-40,"Warning",M4Str,Normal,255,WarnText,false,0);
    MatrixBegin(20,v+=40,-50,-7,-,99);
    MatCol(1,25,"Comment",0,RowText,false,0);
    MatCol(1,-120,"Excl. classifications",0,Classification,false,CClassSClass);

    EndMatrix;
  EndWindow;

  return;
end;

window BBSIVCommentLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Invoice comments",BBSIVCommentLClass,CGmlist,-);
    SpawnClass(BBSIVCommentDClass);
    SetWRect(20,80,560,298);
    Sizeable(-1,-1,0,0);
    UseView(BBSIVCommentVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(100,100,"Starts. date",StartDate,false,StartDate);
    RlColKey(180,180,"End date",EndDate,false,EndDate);
    RlColKey(260,260,"Comment",Comment,false,Comment);
    SearchField("Search");
  EndWindow;

  return;
end;

window SearchBuildRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Search Erf",SearchBuildRClass,CGRcW,RcType);
    SetWRect(20,80,400,150);
    h=100;
    EditFieldTL(h,v=10,150,"Address",M4Str,Normal,200,f1,false,0);
  EndWindow;

  return;
end;

window CountResInputLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Meter input",CountResInputLClass,CGmlist,-);
    SpawnClass(CountResInputDClass);
    SetWRect(20,80,800,298);
    sizeable(-1,-1,0,0);
    UseView(CountResInputVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(70,70,"Cr.",CountResMade,false,CountResMade);
    RlColKey(94,94,"Start date",StartDate,false,StartDate);
    RlColKey(174,174,"End date",EndDate,false,EndDate);
    RlColKey(244,244,"Address",Address,false,Address);
    RlColKey(-180,-180,"Erf",BuildCode,false,BuildCode);
    RlColKey(-100,-100,"Meter types",InputCTypes,false,InputCTypes);
    SpecialMenu("Insert list",'X',0,"XlsIn_CountResInputLsm");
    SearchField("Search");
  EndWindow;

  return;
end;

window CountResInputDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Meter reading input",CountResInputDClass,CGview,-);
    SetWRect(20,80,900,315);
    UseView(CountResInputVc);
    sizeable(-1,-1,0,0);
    ActiveFieldOnNew("StartDate");
    EditField(h=80,v=6,70,"Number",ViewOnly,SerNr,false,0);
    EditField(h+180,v,70,"Start date",Normal,StartDate,false,PasteCurDate);
    EnterSkip(BuildCode);
    EditField(h+360,v,70,"End date",Normal,EndDate,false,PasteCurDate);
    EditFieldTL(h+530,v,-80,"Meter type",M4UStr,Normal,100,InputCTypes,false,INSClass);
    EditField(h,v+=20,100,"Erf",Normal,BuildCode,false,BuildSClass);
    EnterSkip(Math);
    EditField(h+180,v,-80,"Address",Normal,Address,false,0);
    MatrixBegin(4,v+=40,-50,-20,-,999);
    MatCol(1,24,"Meter no.",0,CounterNo,false,FlatCountersSClass);
    MatCol(1,100,"Meter type",0,CounterType,false,0);
    MatCol(1,160,"Premise",0,FlatCode,false,FlatsSClass);
    EnterSkip(CurAmount);
    MatColTL(1,230,"Address",0,M4Str,ViewOnly,0,RowAddress,false,0);
    MatColTL(1,-500,"R.Type",0,M4Code,ViewOnly,0,CountResType,false,0);
    MatColTL(1,-460,"Prev. read. date",0,M4Date,ViewOnly,0,PrevDate,false,0);
    MatColTL(1,-370,"Prev. read.",0,M45Val,ViewOnly,0,PrevAmount,false,0);
    MatCol(1,-300,"Current read.",0,CurAmount,false,0);
    EnterSkip(CurAmount);
    MatColTL(1,-210,"Total.",0,M45Val,Normal,0,SumAmount,false,0);
    EnterSkip(SumAmount);
    MatCol(1,-150,"Type",0,Type,false,SetSClass);
    MatCol(1,-70,"Reading",0,CountResNr,false,CountResLClass);
    EndMatrix;
    InsertrowTest;
    DeleterowTest;
    SoftEditField(-100,-20,70,"Total",ViewOnly,"InputTotSum",true,0,M4Str,20);
    SpecialMenu("Insert meters",'',0,"InsertFlatCountersSm");
    SpecialMenu("Send PDF e-mail",'',1,"CountResInputMailSm");
    SpecialMenu("Create readings",'',2,"CreateCountResSm");
    SpecialMenu("Delete readings",'',2,"DeleteCountResSm");

  EndWindow;

  return;
end;

window FirstFreeMainCountNoSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Inser meter number",FirstFreeMainCountNoSClass,CGother,HBlRecType);
    SetWRect(20,80,300,150);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
  EndWindow;

  return;
end;

window ServCalcValueExpEClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Calculated value exports",ServCalcValueExpEClass,CGEcW,RcType);
    SetWRect(20,80,450,150);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,100,"Export parameter",M4Code,Normal,50,f1,false,CalcServicePlanSClass);
  EndWindow;

  return;
end;

window CountResInputRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Print meter reading inputs",CountResInputRClass,CGRcW,RcType);
    SetWRect(20,80,400,100);
    EditField(120,6,100,"Serial No.",Normal,f1,false,0);
  EndWindow;

  return;
end;

window BuildCountResInputLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Erf meter reading input",BuildCountResInputLClass,CGmlist,-);
    SpawnClass(BuildCountResInputDClass);
    SetWRect(20,80,500,298);
    sizeable(-1,-1,0,0);
    UseView(BuildCountResInputVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(120,120,"Cr.",CountResMade,false,CountResMade);
    RlColKey(144,144,"Start date",StartDate,false,StartDate);
    RlColKey(264,264,"End date",EndDate,false,EndDate);
    SearchField("Search");
  EndWindow;

  return;
end;

window BuildCountResInputDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Erf meter reading input",BuildCountResInputDClass,CGview,-);
    SetWRect(20,80,1360,315);
    UseView(BuildCountResInputVc);
    sizeable(-1,-1,0,0);
    ActiveFieldOnNew("StartDate");
    EditField(h=80,v=6,70,"Number",ViewOnly,SerNr,false,0);
    EditField(h+180,v,70,"Start date",Normal,StartDate,false,PasteCurDate);
    EditField(h+360,v,70,"End date",Normal,EndDate,false,PasteCurDate);
    EnterSkip(Math);
    MatrixBegin(4,v+=40,-50,-20,-,999);
    Flip(0);
    MatCol(1,34,"Meter",0,CounterNo,false,FlatCountersSClass);
    EnterSkip(CurAmount);
    MatCol(1,100,"Meter type",0,CounterType,false,0);
    MatCol(1,160,"B,PG,BG",0,CodeField,false,0);
    MatColTL(1,230,"Address",0,M4Str,ViewOnly,0,Address,false,0);
    Flip(1);
    MatColTL(1,-950,"Prev.read.date",0,M4Date,ViewOnly,0,PrevDate,false,0);
    MatColTL(1,-860,"Prev. read.",0,M45Val,ViewOnly,0,PrevAmount,false,0);
    MatCol(1,-790,"Current read.",0,CurAmount,false,0);
    MatColTL(1,-720,"Total.",0,M45Val,Normal,0,SumAmount,false,0);
    MatCol(1,-660,"Passed",0,DelivDate,false,PasteCurDate);
    MatCol(1,-580,"Type",0,Type,false,SetSClass);
    MatColTL(1,-510,"Month -1",0,M45Val,Normal,0,LastAmount1,false,0);
    MatColTL(1,-440,"Month -2",0,M45Val,Normal,0,LastAmount2,false,0);
    MatColTL(1,-360,"Month -3",0,M45Val,Normal,0,LastAmount3,false,0);
    MatColTL(1,-290,"Month -4",0,M45Val,Normal,0,LastAmount4,false,0);
    MatColTL(1,-220,"Month -5",0,M45Val,Normal,0,LastAmount5,false,0);
    MatColTL(1,-150,"Month -6",0,M45Val,Normal,0,LastAmount6,false,0);
    MatColTL(1,-80,"Reading",0,M4Long,Normal,0,CountResSerNr,false,CountResLClass);
    Flip(2);
    MatColTL(1,-840,"Month -1",0,M45Val,Normal,0,LastAmount1,false,0);
    MatColTL(1,-770,"Month -2",0,M45Val,Normal,0,LastAmount2,false,0);
    MatColTL(1,-700,"Month -3",0,M45Val,Normal,0,LastAmount3,false,0);
    MatColTL(1,-630,"Month -4",0,M45Val,Normal,0,LastAmount4,false,0);
    MatColTL(1,-560,"Month -5",0,M45Val,Normal,0,LastAmount5,false,0);
    MatColTL(1,-490,"Month -6",0,M45Val,Normal,0,LastAmount6,false,0);
    MatColTL(1,-420,"Month -7",0,M45Val,Normal,0,LastAmount7,false,0);
    MatColTL(1,-350,"Month -8",0,M45Val,Normal,0,LastAmount8,false,0);
    MatColTL(1,-280,"Month -9",0,M45Val,Normal,0,LastAmount9,false,0);
    MatColTL(1,-210,"Month -10",0,M45Val,Normal,0,LastAmount10,false,0);
    MatColTL(1,-140,"Month -11",0,M45Val,Normal,0,LastAmount11,false,0);
    MatColTL(1,-70,"Month -12",0,M45Val,Normal,0,LastAmount12,false,0);
    EndMatrix;
    InsertrowTest;
    DeleterowTest;
    vs = 20;
    v = 46; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
    v = v + vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
    SpecialMenu("Create readings",'',1,"CreateBuildCountResSm");
  EndWindow;

  return;
end;

window CounterResCheckRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Meter reading check",CounterResCheckRClass,CGRcW,RcType);
    SetWRect(100,100,420,240);
    h=100;v=10;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=20,100,"Erf",M4Code,Normal,50,f1,false,BuildSClass);
    CheckBox(h,v+=25,0,"Heat meter",flags[1]);
    CheckBox(h,v+=16,0,"Hot water meter",flags[2]);
  EndWindow;

  return;
end;

window MSMergegServInvVClass:1
wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Create invoice - merged",MSMergegServInvVClass,CGMnt,RcType);
    SetWRect(100,120,400,278);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,82,"Inv. date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditField(h,v+=20,100,"Client",Normal,f1,false,CUSClass);
    EditField(h,v+=20,100,"Classification",Normal,f2,false,CClassSClass);
    CheckBox(h,v+=20,0,"Bookmark created invoices",flags[4]);
    CheckBox(h,v+=16,0,"Include servicews w/o sums",flags[29]);
  EndWindow;

  return;
end;

window MSMergegServInvRClass:1
wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Create invoice - merged",MSMergegServInvRClass,CGMnt,RcType);
    SetWRect(100,120,400,278);
    PeriodField(h=100,v=10,"Period");
    EditFieldTL(h,v+=20,82,"Inv. date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditField(h,v+=20,100,"Client",Normal,f1,false,CUSClass);
    EditField(h,v+=20,100,"Classification",Normal,f2,false,CClassSClass);
    // ButtonFrame(h=140,v=vm,140,2,"Rādīt");
    // CheckBox(h+=10,v,0,"Tikai klienti bez rēķiniem",flags[0]);
    CheckBox(h,v+=20,0,"Sums from invoice",flags[1]);
    // CheckBox(h,v+=16,0,"Ģenerēt līgumsodu",flags[2]);
    CheckBox(h,v+=16,0,"Include servicews w/o sums",flags[29]);
    EndFrame;
  EndWindow;

  return;
end;

window AddressField2SClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert address field",AddressField2SClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
    SearchField("Search");
  EndWindow;

  return;
end;

window PDFInvTextTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("PDF invoice sending",PDFInvTextTClass,CGHbl,HBlRecType);
    SetWRect(20,80,532,357);
    Sizeable(-1,-1,0,0);
    SetBlid(PDFInvTextBlock);
    MatrixBegin(8,20,-31,-20,-,99);
    MatCol(1,24,"Code",0,Code,false,LTxtSClass);
    MatCol(1,84,"Start date",0,StartDate,false,PasteCurDate);
    MatCol(1,174,"End date",0,EndDate,false,PasteCurDate);
    MatCol(1,254,"Comment",0,Comment,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window InvToEmailVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;

  WindowBegin("Send invoices to e-mail",InvToEmailVClass,CGMnt,RcType);
    SetWRect(20,80,350,260);
    vs = 20;
    PeriodField(h=100,v=6,"Period");
    EditField(h,v+=vs,100,"Erf",Normal,f1,false,BuildSClass);
    EditField(h,v+=vs,100,"Erf class.",Normal,f2,false,MSClassSClass);
    vm=v;
    ButtonFrame(h=20,v+=40,110,2,"Sender address");
    RadioButton(h,v,0,0,"System",flags[5]);
    RadioButton(h,v+=16,1,0,"User",flags[5]);
    ButtonFrame(h=170,v=vm+40,110,2,"Send");
    RadioButton(h,v,0,0,"Just not sent",flags[6]);
    RadioButton(h,v+=16,1,0,"All",flags[6]);
  EndWindow;

  return;
end;

window InvToEmailTaskVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;

  WindowBegin("Send invoices by e-mail (Task)",InvToEmailTaskVClass,CGMnt,RcType);
    SetWRect(20,80,350,260);
    vs = 20;
    PeriodField(h=100,v=6,"Period");
    EditField(h,v+=vs,100,"Erf",Normal,f1,false,BuildSClass);
    EditField(h,v+=vs,100,"Erf class.",Normal,f2,false,MSClassSClass);
    EditField(h,v+=vs,100,"Client category",Normal,f3,false,CCatSClass);
    vm=v;
    // ButtonFrame(h=20,v+=40,110,2,"Nosūtītāja adrese");
    // RadioButton(h,v,0,0,"Sistēmas",flags[5]);
    // RadioButton(h,v+=16,1,0,"Lietotāja",flags[5]);
    ButtonFrame(h=170,v=vm+40,110,2,"Send");
    RadioButton(h,v,0,0,"Just not sent",flags[6]);
    RadioButton(h,v+=16,1,0,"All",flags[6]);
  EndWindow;

  return;
end;

window PDFInvToEmailRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("PDF invoices to send e-mails",PDFInvToEmailRClass,CGRcW,RcType);
    SetWRect(20,80,400,180);
    PeriodField(h=120,v=6,"Period");
    EditFieldTL(h,v+=20,100,"Erf",M4Str,Normal,30,f1,false,BuildSClass);
    EditFieldTL(h,v+=20,100,"Erf class.",M4Str,Normal,30,f2,false,MSClassSClass);
  EndWindow;

  return;
end;


window NonStopSleepTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Non stop maintenance sleep time",NonStopSleepTClass,CGHbl,HBlRecType);
    SetWRect(20,80,532,357);
    Sizeable(-1,-1,0,0);
    SetBlid(NonStopSleepBlock);
    MatrixBegin(8,20,-31,-20,-,99);
    MatCol(1,24,"Service",0,MaintType,false,SetSClass);
    MatCol(1,154,"Time (sec)",0,SleepTime,false,0);
    MatCol(1,254,"Commentary",0,Comment,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window AddINtoNAContrVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Add / remove services in contracts",AddINtoNAContrVClass,CGMnt,RcType);
    SetWRect(100,100,340,310);
    h = 100; v = 10; vs = 20;
    EditFieldTL(h,v+=vs,100,"Service",M4Code,Normal,20,f1,false,INSClass);
    EditFieldTL(h,v+=vs,100,"Zoning",M4Code,Normal,20,f2,false,ZoneSClass);
    ButtonFrame(h,v+=50,100,2,"Function");
    RadioButton(h,v,0,0,"Add",flags[1]);
    RadioButton(h,v+=16,1,0,"Remove",flags[1]);
  EndWindow;

  return;
end;

window ChangeFlatCounterTypeVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;

  WindowBegin("Meter type change tipa maiņa",ChangeFlatCounterTypeVClass,CGMnt,RcType);
    SetWRect(100,100,400,220);
    h = 100;v=10;
    // PeriodField(h,v,"Periods");
    EditField(h,v,82,"Meter ID",ViewOnly,long1,false,0);
    EditField(h,v+=20,82,"Meter No",ViewOnly,f2,false,0);
    EditField(h,v+=20,82,"New type",ViewOnly,f3,false,0);
    EditField(h,v+=20,82,"Old type",Normal,f4,false,INSClass);
    CheckBox(h,v+=20,0,"Change service in contract",flags[1]);
    CheckBox(h,v+=20,0,"Change in meter readings",flags[2]);
  EndWindow;

  return;
end;

window RecalcIVInfoVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Renew information in invoice",RecalcIVInfoVClass,CGMnt,RcType);
    SetWRect(20,80,420,360);
    EditField(h=140,v=26,100,"Inv.No.(from:till)",Normal,f1,false,0);
    CheckBox(h=40,v+=20,0,"Renew invoice sales account",flags[0]);
    EditField(h=140,v+=20,150,"Items",Normal,f2,false,INSClass);
    StaticText(h=40,v+=40,"Sales acc., VAT code changing in invoice rows",false);
    StaticText(h,v+=16,"Debtors' account being renewed in invoice",false);
    StaticText(h,v+=16,"Invoice being re-entered",false);
    CheckBox(h,v+=20,0,"Renew Erf and premise code",flags[1]);
    CheckBox(h+180,v,0,"For empty erfs",flags[4]);
    CheckBox(h+10,v+=20,0,"Errors in hansa.log file",flags[2]);
    CheckBox(h,v+=20,0,"Recalculate total sums",flags[3]);
    CheckBox(h,v+=20,0,"Do not OK already OKed invoices (store changes without checks)",flags[5]);
    StaticText(h=60,v+=28,"Maintenance without this mark additionaly requires",false);
    StaticText(h,v+=16,"recalculation of invoice E section's values",false);
  EndWindow;

  return;
end;

window PDFInvRemakeVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("PDF invoice attach. remake",PDFInvRemakeVClass,CGMnt,RcType);
    SetWRect(20,80,350,260);
    PeriodField(h=40,v=20,"Period");
    EditFieldTL(h=50,v+=20,100,"Erf",M4Code,Normal,50,f1,false,BuildSClass);
    StaticText(h,v+=40,"Service deletes attached PDFs and ",false);
    StaticText(h,v+=20,"create new ones",false);
    //StaticText(h,v+=20,"a bug, try to record the payment.",false);
  EndWindow;

  return;
end;

window OBS_PastePerSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert period",OBS_PastePerSClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
    SearchField("Search");
  EndWindow;

  return;
end;

window FlatsWithCoefRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Premises with coefficients",FlatsWithCoefRClass,CGRcW,RcType);
    SetWRect(100,100,500,400);
    // StaticText(20,40, "Nospiediet OK, lai palaistu atskaiti!",0);
  EndWindow;

  return;
end;

window BuildCalcPaybackRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;

  WindowBegin("Erf calculation/payment",BuildCalcPaybackRClass,CGRcW,RcType);
    SetWRect(100,100,500,200);
    h=140;v=10;vs=20;
    PeriodField(h,v,"Period");
    EditField(h,v+=vs,100,"Erf",Normal,f1,false,BuildSClass);
    ButtonFrame(h=60,vm=(v+41),80,2,"Function");
    RadioButton(h+=10,v=vm,0,0,"Overview",ArtMode);
    RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
    CheckBox(h=220,v=vm,0,"Include old contracts",flags[0]);
  EndWindow;

  return;
end;

window CreateIntPercInvoicesVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Create penalty invoices",CreateIntPercInvoicesVClass,CGMnt,RcType);
    SetWRect(20,80,400,380);
    h=100;v=10;vs=20;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=vs,82,"Inv. date",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditFieldTL(h,v+=vs,82,"Contract",M4Long,Normal,0,long2,false,NAContractSClass);
    CheckBox(h,v+=vs,1,"Bookmark created invoices",flags[4]);
    CheckBox(h,v+=vs,1,"Create only for clients with e-mail",flags[29]);
  EndWindow;

  return;
end;

window MSUndoInvWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Cancel invoice",MSUndoInvWClass,CGother,RcType);
    SetWRect(20,80,300,180);
    Sizeable(-1,-1,-1,-1);
    UseView(RcVc)
    StaticText(60,30,"Are you sure you want to cancel the invoice?",false);
    HalPushButton(50,60,130,120,"MSUndoInvYesbtn","Yes");
    HalPushButton(150,60,230,120,"MSUndoInvNobtn","No");
  EndWindow;

  return;
end;

window ActiveCOCheckRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs,vm;

  WindowBegin("Active contract check",ActiveCOCheckRClass,CGRcW,RcType);
    SetWRect(100,100,500,200);
    EditField(h=140,v=6,100,"Date",Normal,d1,false,PasteCurDate);
    CheckBox(h,v+=20,0,"Premises",flags[0]);
    CheckBox(h,v+=16,0,"Erfs",flags[1]);
    CheckBox(h,v+=16,0,"Merged",flags[2]);
  EndWindow;

  return;
end;

window CountResFlatsSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert premise",CountResFlatsSClass,CGother,HBlRecType);
    SetWRect(20,80,300,200);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
  EndWindow;

  return;
end;

window MSCalcCompRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs,vm;

  WindowBegin("Comparison of calculations",MSCalcCompRClass,CGRcW,RcType);
    SetWRect(100,100,400,240);
    h = 100;v=10;
    PeriodField(h,v,"Period");
    // EditFieldTL(h,v+=20,82,"Rēķ. datums",M4Date,Normal,0,RegDate,false,PasteCurDate);
    EditFieldTL(h,v+=20,100,"Erf",M4Code,Normal,50,f1,false,BuildSClass);
    EditFieldTL(h,v+=20,100,"Premises group",M4Str,Normal,50,f4,false,FlatGroupSClass);
    EditFieldTL(h,v+=20,100,"Classification",M4UStr,Normal,50,f3,false,MSClassSClass);
    EditFieldTL(h,v+=20,100,"Premises",M4Code,Normal,50,f2,false,FlatsSClass);
    // vm = v+=48;
    // ButtonFrame(h=20,v=vm,70,2,"Rādīt");
    // RadioButton(h+=10,v=vm,0,0,"Detalizēti",ArtMode);
    // RadioButton(h,v+=16,1,0,"Pārskats",ArtMode);
    // EndFrame;
    // ButtonFrame(h=140,v=vm,140,2,"Rādīt");
    // CheckBox(h+=10,v,0,"Tikai telpas bez rēķiniem",flags[0]);
    // CheckBox(h,v+=16,0,"Summas no rēķina",flags[1]);
    // CheckBox(h,v+=16,0,"Ģenerēt līgumsodu",flags[2]);
    // EndFrame;
  EndWindow;

  return;
end;

window RemCounterResVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,v,vs;

  WindowBegin("Delete readings",RemCounterResVClass,CGMnt,RcType);
    SetWRect(100,100,400,220);
    h = 100;v=10;
    PeriodField(h,v,"Period");
    EditField(h,v+=20,82,"Meter no.",Normal,f1,false,FlatCountersSClass);
    EditField(h,v+=20,82,"Meter type",Normal,f2,false,0);
    EditField(h,v+=20,82,"Erf",Normal,f3,false,BuildSClass);
    CheckBox(h-20,v+=30,0,"Householder's meters",flags[0]);
  EndWindow;

  return;
end;

window CRIXlsInputWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("List input",CRIXlsInputWClass,CGother,HBlRecType);
    SetWRect(20,80,500,400);
    Sizeable(0,-1,0,0);
    UseView(IVVc);
    MatrixBegin(8,26,-31,-20,-,199);
    MatCol(1,24,"Premise",0,ArtCode,false,FlatsSClass);
    MatCol(1,130,"No",0,Spec,false,0);
    MatCol(1,250,"Calculation",0,SerialNr,false,0);
    MatCol(1,-70,"Consumption",0,SourceTransNr,true,0);
    EndMatrix;
    HalPushButton(-210,-30,-10,-30,"CreateXlsCRIbtn","Create reading input");
  EndWindow;

  return;
end;

window CountResIClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Meter reading import",CountResIClass,CGIcW,RcType);
    SetWRect(20,80,350,130);
    CheckBox(70,16,0,"Renew data of declared persons",flags[0]);
  EndWindow;

  return;
end;

window MSCRIWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Create input ievade",MSCRIWClass,CGother,RcType);
    SetWRect(20,80,300,180);
    Sizeable(-1,-1,-1,-1);
    UseView(RcVc)
    StaticText(60,30,"Are you sure you want to create an input?",false);
    EditField(20,40,240,"",ViewOnly,f1,false,0);
    HalPushButton(50,60,130,120,"MSCRIYesbtn","Yes");
    HalPushButton(150,60,230,120,"MSUndoInvNobtn","No");
  EndWindow;

  return;
end;

window BuildDebtRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,v,vm;

  WindowBegin("Erf debt",BuildDebtRClass,CGRcW,RcType);
    SetWRect(100,100,500,200);
    h=140;v=10;
    EditField(h,v,100,"Erf",Normal,f1,false,BuildSClass);
    EditField(h,v+=20,100,"Erf class.",Normal,f2,false,MSClassSClass);
    EditField(h,v+=20,100,"Date",Normal,d1,false,PasteCurDate);
    PeriodField(h,v+=20,"Comparison period");
    ButtonFrame(h1=20,vm=(v+40),140,4,"Funciton");
    RadioButton(h1,v=vm,0,0,"Overview",ArtMode);
    RadioButton(h1,v+=16,1,0,"Overview + PG",ArtMode);
    RadioButton(h1,v+=16,2,0,"Detailed",ArtMode);
    CheckBox(h1+20,v+=16,0,"Old contract section",flags[2]);
    CheckBox(h+70,v=vm,0,"Include old contracts",flags[0]);
    CheckBox(h+70,v+=16,0,"Without penalty sums",flags[1]);
    CheckBox(h+70,v+=16,0,"Dont show rows without debt",flags[3]);
    CheckBox(h+70,v+=16,0,"Dont show customer name",flags[4]);
    CheckBox(h+70,v+=16,0,"Debt ratio",flags[6]);

  EndWindow;

  return;
end;

window MSBuildRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Create Erf list",MSBuildRClass,CGrCW,-);
    SetWRect(20,80,400,180);
    EditField(120,6,100,"Classification",Normal,f1,false,MSClassSClass);
  EndWindow;

  return;
end;

window PDFInvGenLangTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("PDF Invoice generating languages",PDFInvGenLangTClass,CGHbl,HBlRecType);
    SetWRect(20,80,432,257);
    Sizeable(-1,-1,0,0);
    SetBlid(PDFInvGenLangBlock);
    MatrixBegin(8,20,-31,-20,-,99);
    MatCol(1,24,"Org. lang",0,OrgLang,false,LangSClass);
    MatCol(1,100,"PDF lang",0,PDFLang,false,LangSClass);
    MatCol(1,180,"Sec.",0,intdocnr,false,0);
    // MatCol(1,225,"Gen. lang",0,GenLang,false,LangSClass);
    EndMatrix;
  EndWindow;

  return;
end;

window PayOverviewRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Payment overview",PayOverviewRClass,CGRcW,RcType);
    SetWRect(20,80,400,160);
    PeriodField(150,6, "Period");
  EndWindow;

  return;
end;

window ServCalcPayRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,v,vm;


  WindowBegin("Service calculation / payments",ServCalcPayRClass,CGRcW,RcType);
    SetWRect(100,100,500,200);
    h=140;v=10;
    PeriodField(h,v, "Period");
    EditField(h,v+=20,100,"Erf",Normal,f1,false,BuildSClass);
    EditField(h,v+=20,100,"Erf class",Normal,f2,false,MSClassSClass);
    ButtonFrame(h1=20,vm=(v+40),140,3,"Show");
    RadioButton(h1,v=vm,0,0,"Overview",ArtMode);
    RadioButton(h1,v+=16,1,0,"Detailed",ArtMode);
    RadioButton(h1,v+=16,2,0,"Detailed (Excel)",ArtMode);
    EndFrame;
    CheckBox(h1=220,v=(vm),0,"Iekļaut Beigušos līgumus",flags[0]);
  EndWindow;

  return;
end;

window NAContractRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Print contract",NAContractRClass,CGrCW,RcType);
    SetWRect(100,100,400,220);
    h=100; v=10; vs=20;
    EditField(h,v,100,"Contract",Normal,long1,false,NAContractSClass);
  EndWindow;

  return;
end;

window PrintFieldTestRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v,h;

  WindowBegin("Create report",PrintFieldTestRClass,CGrCW,-);
    SetWRect(20,80,400,180);
    EditField(100,10,100,"Date",Normal,d1,false,PasteCurDate);
    CheckBox(h=100,v=30,0,"Multiple owners",flags[0]);
    CheckBox(h,v+=16,0,"Without owner",flags[1]);
    CheckBox(h,v+=16,0,"One owner",flags[2]);
  EndWindow;

  return;
end;

window InvMergeRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real v,h;

  WindowBegin("Invoice merge",InvMergeRClass,CGrCW,-);
    SetWRect(100,100,400,240);
    h = 100;v=10;
    PeriodField(h,v,"Period");
    EditFieldTL(h,v+=20,100,"Client",M4Code,Normal,50,f1,false,CUSClass);
  EndWindow;

  return;
end;

window DefaultItemDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Service package",DefaultItemDClass,CGview,-);
    SetWRect(64,80,709,380);
    UseView(DefaultItemVc);
    v = 6; h = 80;
    EditField(h,v, 100,"Code",Normal,Code,false,0);
    EditField(h=290,v,-40,"Name",Normal,Description,false,0);
    MatrixBegin(4,v=46,-50,-19,-,999);
    MatCol(1,32,"Service",0,ArtCode,false,INSClass);
    MatCol(1,114,"Field",0,QtyField,false,FlatFieldCodeSClass);
    EnterSkip(ArtCode);
    MatColTL(1,264,"Unit description",0,-1,Normal,-1,UnitText,false,0);
    MatCol(1,-180,"Name",0,Spec,false,0);
    EndMatrix;
  EndWindow;

  return;
end;

window DefaultItemLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Service packages",DefaultItemLClass,CGmlist,-);
    SpawnClass(DefaultItemDClass);
    SetWRect(64,80,509,298);
    Sizeable(-1,-1,0,0);
    UseView(DefaultItemVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlCol(131,131,"Name",Description,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window DefaultItemSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert Service package",DefaultItemSClass,CGslist,-);
    SpawnClass(DefaultItemDClass);
    SetWRect(64,80,509,298);
    Sizeable(-1,-1,0,0);
    UseView(DefaultItemVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Code",Code,false,Code);
    RlCol(131,131,"Name",Description,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window InvToEmailTaskWClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  record InvToEmailTaskBlock InvToEmailTaskBl;
  real h,v;

  WindowBegin("Send invoices to email status",InvToEmailTaskWClass,CGother,RcType);
    DynamicWindow;
    SetWRect(100,120,500,240);
    AutoSizeWindow(false);
    WhiteBackground;
    Modality(kModalityGlobal);
    BlockLoad(InvToEmailTaskBl);
    if InvToEmailTaskBl.RunFlag==1 then begin
      v=50;
      StaticText(30,30,"Emails are being sent",0);
      ProgressBar(20,v,-20,v+12,"TransferSz","TransferPos");
    end else begin
      SoftEditField(80,40,-40,"Status",ViewOnly,"TRANSSTAT",false,0,M4Str,120);
    end;
  EndWindow;

  return;
end;

window InvToEmailTaskTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v;

  WindowBegin("Send invoices to email (task) settings",InvToEmailTaskTClass,CGSbl,-);
    SetBlid(InvToEmailTaskBlock);
    SetWRect(64,80,400,300);
    Sizeable(-1,-1,0,0);
    EditField(h=150,v=10,100,"Interval",Normal,Interval,false,0);
    EditField(h,v+=20,100,"Loop pos.",Normal,Looppos,false,0);
    EditField(h,v+=20,100,"Sent",Normal,Send,false,0);
    EditField(h,v+=20,100,"Total",Normal,Total,false,0);
    EditField(h,v+=20,100,"Parameters",Normal,Parameters,false,0);
    EditField(h,v+=20,100,"Date",Normal,OnDate,false,0);
    EditField(h,v+=20,100,"Time",Normal,OnTime,false,0);
    CheckBox(75,v+=32,0,"Being sent",RunFlag);
  EndWindow;

  return;
end;

window LSItemTRTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Penalty item accounts",LSItemTRTClass,CGHbl,HBlRecType);
    SetBlid(LSItemTRBlock);
    SetWRect(64,80,412,298);
    Sizeable(-1,-1,0,0);
    MatrixBegin(4,27,-21,-20,-,99);
    MatCol(1,32,"Item",0,ArtCode,false,INSClass);
    MatCol(1,100,"Debt konts",0,SLAcc,false,AccSClass);
    MatCol(1,180,"Sales konts",0,ARAcc,false,AccSClass);
    MatCol(1,260,"Pay. konts",0,PayAcc,false,AccSClass);
    EndMatrix;
  EndWindow;

  return;
end;

window PDFInvRemakeRecVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Invoice PDF attachment remake",PDFInvRemakeRecVClass,CGMnt,RcType);
    SetWRect(20,80,350,280);
    StaticText(30,10,"To delete and remake PDF attachment, press OK",false);
  EndWindow;

  return;
end;

window SuspIntPercRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vs;

  WindowBegin("Stopped penalty %",SuspIntPercRClass,CGRcW,RcType);
    SetWRect(100,100,500,200);
    h=140;v=10;vs=20;
    PeriodField(h,v,"Period");
  EndWindow;

  return;
end;

window FillAddrFieldsVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Renew address fields",FillAddrFieldsVClass,CGMnt,RcType);
    SetWRect(20,80,400,180);
    StaticText(20,40, "Press OK to start the service!",0);
  EndWindow;

  return;
end;

window MSClass2SClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert class",MSClass2SClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
    SearchField("Search");
  EndWindow;

  return;
end;

window ContractCalcPayRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm;

  WindowBegin("Contract calculation/payment",ContractCalcPayRClass,CGRcW,RcType);
    SetWRect(20,80,400,290);
    PeriodField(h=120,v=6,"Period");
    CheckBox(h-60,v+=20,0,"Dont issue contracts without balances and turnover",flags[0]);
  EndWindow;

  return;
end;

window PerYearSClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Insert period",PerYearSClass,CGother,HBlRecType);
    SetWRect(20,80,250,400);
    Sizeable(-1,-1,0,0);
    StringList(9,9,-40,-10);
    SearchField("Search");
  EndWindow;

  return;
end;

window ItemPayHistLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Item payment history",ItemPayHistLClass,CGmlist,-);
    SetWRect(20,80,520,300);
    Sizeable(-1,-1,0,0);
    SpawnClass(ItemPayHistDClass);
    UseView(ItemPayHistVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Number",SerNr,false,SerNr);
    RlColKey(100,100,"Date",TransDate,false,TransDate);
    RlColKey(180,180,"Trans.No",TransNr,false,TransNrFN);
    RlColKey(260,260,"Invoice",IVNr,false,IVNr);
    RlColKey(340,340,"Item",ArtCode,false,ArtCode);
    RlColKey(420,420,"Client",CustCode,false,CustCode);
    RlCol(-150,-150,"Type",FileName,false);
    RlCol(-80,-80,"Sum",AmtValBaseCur,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window ItemPayHistDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;

  WindowBegin("Item payment history",ItemPayHistDClass,CGview,-);
    SetWRect(20,80,500,200);
    UseView(ItemPayHistVc);
    ActiveFieldOnNew("SerNr");
    h=130;h2=330;vs=20;
    EditField(h,v=12,100,"Number",Normal,SerNr,false,0);
    EditField(h,v+=vs,100,"Trans.No",Normal,TransNr,false,0);
    EditField(h,v+=vs,100,"Invoice",Normal,IVNr,false,0);
    EditField(h,v+=vs,100,"Date",Normal,TransDate,false,PasteCurDate);
    EditField(h,v+=vs,100,"Item",Normal,ArtCode,false,INSClass);
    EditField(h2,v=12,100,"Client",Normal,CustCode,false,CUSClass);
    EditField(h2,v+=vs,100,"Erf",Normal,BuildCode,false,BuildSClass);
    EditField(h2,v+=vs,100,"Premise",Normal,FlatCode,false,FlatsSClass);
    EditField(h2,v+=vs,100,"Contract",Normal,ContrSerNr,false,NAContractSClass);
    EditField(h2,v+=vs,100,"Row",Normal,RowNr,false,0);
    EditField(h,v+=vs*3,100,"Sum",Normal,AmtVal,false,0);
    EditField(h,v+=vs,100,"VAT sum",Normal,VATVal,false,0);
    EditField(h,v+=vs,100,"Currency",Normal,CurCode,false,0);
    EditField(h,v+=vs,100,"Sum in base cur.",Normal,AmtValBaseCur,false,0);
    EditField(h,v+=vs,100,"VAT sum in base cur.",Normal,VATValBaseCur,false,0);
  EndWindow;

  return;
end;

window ItemPayStatLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Item payment statics",ItemPayStatLClass,CGmlist,-);
    SetWRect(20,80,500,300);
    Sizeable(-1,-1,0,0);
    SpawnClass(ItemPayStatDClass);
    UseView(ItemPayStatVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"Contract",ContrSerNr,false,MainKey);
    RlColKey(80,80,"Erf",BuildCode,false,BuildCode);
    RlColKey(160,160,"Premises",FlatCode,false,FlatCode);
    RlCol(240,240,"Item",ArtCode,false);
    RlCol(320,320,"Date",TransDate,false);
    RlCol(400,400,"Client",CustCode,false);
    SearchField("Search");
  EndWindow;

  return;
end;

window ItemPayStatDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vs;

  WindowBegin("Item payment statistics",ItemPayStatDClass,CGview,-);
    SetWRect(20,80,500,200);
    UseView(ItemPayStatVc);
    ActiveFieldOnNew("ContrSerNr");
    h=130;h2=330;vs=20;
    EditField(h-40,v=12,100,"Contract",Normal,ContrSerNr,false,0);
    EditField(h-40,v+=vs,100,"Item",Normal,ArtCode,false,INSClass);
    EditField(h-40,v+=vs,100,"Date",Normal,TransDate,false,PasteCurDate);
    EditField(h2-40,v=12,100,"Client",Normal,CustCode,false,CUSClass);
    EditField(h2-40,v+=vs,100,"Erf",Normal,BuildCode,false,BuildSClass);
    EditField(h2-40,v+=vs,100,"Premises",Normal,FlatCode,false,0);
    EditField(h,v+=vs*2,100,"Debt sum",Normal,DebtVal,false,0);
    EditField(h,v+=vs,100,"Invoice sum",Normal,InvVal,false,0);
    EditField(h,v+=vs,100,"Credit sum",Normal,CredVal,false,0);
    EditField(h,v+=vs,100,"Payment sum",Normal,PayVal,false,0);
    EditField(h,v+=vs,100,"Cash sum",Normal,CashInVal,false,0);
    EditField(h,v+=vs,100,"Neg. item sum",Normal,CashInVal,false,0);
  EndWindow;

  return;
end;

window IntSumCalcLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin

  WindowBegin("Calculated penalties",IntSumCalcLClass,CGmlist,-);
    SetWRect(20,80,590,300);
    Sizeable(-1,-1,0,0);
    UseView(IntSumCalcVc);
    RecordList(4,17,-21,-39);
    RlColKey(4,4,"No.",SerNr,false,SerNr);
    RlColKey(90,90,"Source inv.",SourceIV,false,SourceIV);
    RlColKey(180,180,"Dest inv.",DestIV,false,DestIV);
    RlCol(270,270,"Sum",IntSum,true);
    RlCol(350,350,"Currency",CurCode,false);
    RlColKey(390,390,"Date",InvDate,false,InvDate);
    RlColKey(-100,-100,"Control",ControlStr,false,ControlStr);
    SearchField("Search");
  EndWindow;

  return;
end;
