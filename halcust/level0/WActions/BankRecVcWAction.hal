external function Integer InString2(string,string);
remote updating procedure BankAccountReconWClass_InvalidateBankPaymentRemote(string);
external updating procedure PayModeBankAccountImportBankStatmentData(string,string,string,string,Date,Date);
remote procedure PayModeBankAccountImportYodleeData(string,string,string,string,Date,Date);
external procedure DefaultPeriod(var string);
external function string 60 AddStringToStringList(string,string);
external function string 255 ServerDateFormat();
external function string 255 DateToStr(Date);
external function Date DateFromString(string,string);
remote updating procedure BankAccountReconWClass_ReconcileBankTransactionRemote(string);
remote procedure BankAccountReconWClass_FillDataAsync(Integer,string,string,string,Date,Date);
external procedure OpenVcFromTR(record TRVc);
external function Integer TypeOfCurncy(var string,var Integer);
remote updating procedure BankRecVc_PasteReconSum(var record BankRecVc);
remote updating procedure BankRecVc_PasteTyp(var record BankRecVc);
remote updating procedure BankRecVc_PasteCurncyCode(var record BankRecVc);
remote updating procedure BankRecVc_PasteRecDate(var record BankRecVc);
remote updating procedure BankRecVc_PasteAccNumber(var record BankRecVc);
remote updating procedure BankRecVc_PasteObjects(var record BankRecVc);
remote updating procedure BankRecVc_PastePeriod2Str(var record BankRecVc);
remote updating procedure UpdateBankRecW(var record BankRecVc);
remote updating procedure UpdateOnAmountBankRecW(var record BankRecVc);
remote updating procedure UpdateOnReconCodeBankRecW(var record BankRecVc);
external procedure ToStrTRCode(var string,Integer,LongInt);
external procedure In2Period(var string,var Date,var Date);
forward procedure BankAccountReconWClass_RefillData(string);
external remote procedure Do_RefreshBRPost(var record BankRecVc,Integer);
external remote procedure BankRecSortOnAmount(record BankRecVc);
external remote procedure BankRecSortOnReconCode(record BankRecVc);
remote function LongInt EmSzmalHistoryAccRecon(string,string);
remote function LongInt DateDiff(Date,Date);
remote updating procedure UpdateBRPost(var record BankRecVc,Boolean,Integer);
remote function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function Boolean IsDigit(string);
external procedure TRSumup(var record TRVc,var val);
remote procedure RunMainRn(var record RcVc,Boolean,Date,var Boolean,var val,var val,record SMVc,Boolean,var val,var val,var LongInt);
remote updating procedure AddBankTRRecordLinkToOP(var record OPVc,record BankTRVc);
remote updating procedure AddBankTRRecordLinkToIP(var record IPVc,record BankTRVc);
remote updating procedure AddBankTRRecordLinkToPP(var record PPVc,record BankTRVc);
remote updating procedure AddBankTRRecordLinkToTR(var record TRVc,record BankTRVc);
remote updating procedure UpdateBankTRFromIP(record IPVc);
external function Boolean ShouldUseEnableBanking(string,var string,var string,var Boolean,var string);
remote function LongInt DoAccountRequest(string,string,var string,date,date,string);
remote procedure EnableBankingReAuthBank(string,string);

function Boolean BankAccountNumberMatches(string pmbanknr,string bankacc)
begin
  Boolean res;
  Integer i;
  string 255 tstr;
  
  while (i<len(bankacc)) begin
    if (IsDigit(Mid(bankacc,i,1))) then begin
      tstr = right(bankacc,len(bankacc)-i);
      i = len(bankacc);
    end;
    i = i + 1;
  end;
  if (Right(pmbanknr,len(tstr))==tstr) then begin
    res = true;
  end;
  BankAccountNumberMatches = res;
  return;
end;

function Boolean GetBankAccPMRow(record PMBlock PMb,string sortcode,string bankacc,var row PMBlock PMbrw)
begin
  Boolean res;
  Integer i,rwcnt;
  
  ClearRow(PMb,PMbrw,1);
  res = true;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.SortCode==sortcode or blank(sortcode)) and (BankAccountNumberMatches(PMbrw.BankNr,bankacc)) then begin
      goto LGetBankAccPMRow;
    end;
  end;
  res = false;
  ClearRow(PMb,PMbrw,1);
LGetBankAccPMRow:;
  GetBankAccPMRow = res;
  return;
end;

procedure BankRecVc_PasteReconsf(var record BankRecVc BankRecp,Integer rownr)
BEGIN
  row BankRecVc brrw;
  Integer oldstyle;
  
  MatRowGet(BankRecp,rownr,brrw);
  if (brrw.Reconsf!=0) and (brrw.Reconsf!=1) then begin
    brrw.Reconsf = 0;
    goto LBankRecVc_PasteReconsf;
  end;
  if (nonblank(BankRecp.CurncyCode)) then begin
    if (BankRecp.CurncyCode==brrw.CurncyCode) then begin
      switch (TypeOfCurncy(brrw.CurncyCode,oldstyle)) begin
        case 1:
          if (brrw.Reconsf==0) then begin
            BankRecp.RecVal = BankRecp.RecVal - brrw.Val;
          end else begin
            BankRecp.RecVal = BankRecp.RecVal + brrw.Val;
          end;
        case 2:
          if (brrw.Reconsf==0) then begin
            BankRecp.RecVal = BankRecp.RecVal - brrw.Val2;
          end else begin
            BankRecp.RecVal = BankRecp.RecVal + brrw.Val2;
          end;
        case 3:
          if (brrw.Reconsf==0) then begin
            BankRecp.RecVal = BankRecp.RecVal - brrw.Val;
          end else begin
            BankRecp.RecVal = BankRecp.RecVal + brrw.Val;
          end;
        otherwise
          if (brrw.Reconsf==0) then begin
            BankRecp.RecVal = BankRecp.RecVal - brrw.CurVal;
          end else begin
            BankRecp.RecVal = BankRecp.RecVal + brrw.CurVal;
          end;
      end;
    end;
  end else begin
    if (brrw.Reconsf==0) then begin
      BankRecp.RecVal = BankRecp.RecVal - brrw.Val;
    end else begin
      BankRecp.RecVal = BankRecp.RecVal + brrw.Val;
    end;
  end;
LBankRecVc_PasteReconsf:;  
  MatRowPut(BankRecp,rownr,brrw);
  BankRecp.EndBal = BankRecp.StartBal + BankRecp.RecVal;
  BankRecp.Diff = BankRecp.EndBal - BankRecp.BankBal;
  RETURN;
END;

function Integer TestBankRecWChanges(row BankRecVc brrw)
begin
  Integer res;
  record TRVc TRr;
  row TRVc TRrw;
  
  TRr.Number = brrw.Number;
  TRr.IntYc = brrw.IntYc;
  if (ReadFirstMain(TRr,2,true)) then begin
    if (brrw.rownr<MatRowCnt(TRr)) then begin
      MatRowGet(TRr,brrw.rownr,TRrw);
      if (TRrw.ovst!=0) then begin
        res = 1;
      end;
      if ((TRrw.DebVal - TRrw.CredVal)!=brrw.Val) then begin
        res = 2;
      end;
      if ((TRrw.DebVal2 - TRrw.CredVal2)!=brrw.Val2) then begin
        res = 3;
      end;
      if ((TRrw.CurDebVal - TRrw.CurCredVal)!=brrw.CurVal) then begin
        res = 4;
      end;
    end;
  end;
  TestBankRecWChanges = res;
  return;
end;

global
function Integer TestReconsBankRecW(record BankRecVc brp,Integer wn)
begin
  Integer res;
  record ReconBlock Reconb;
  Integer i,rwcnt;
  row BankRecVc brrw;

  BlockLoad(Reconb);
  rwcnt = MatRowCnt(brp);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(brp,i,brrw);
    if (Reconb.RequireReconDate!=0) then begin
      if (blankdate(brp.ReconDate) and blankdate(brrw.ReconDate)) then begin
        res = 21390;
        WindowFieldGoto(wn,brp,-1,"ReconDate",true);
        goto LTestReconsBankRecW;
      end;
    end;
    if (Reconb.RequireReconCode!=0) then begin
      if (brrw.Reconsf==0) then begin
        res = 21393;
        WindowFieldGoto(wn,brp,i,"Reconsf",true);
        goto LTestReconsBankRecW;
      end;
      if (TestBankRecWChanges(brrw)!=0) then begin
        res = 21392;
        goto LTestReconsBankRecW;
      end;
    end;
  end;
  if (Reconb.RequireReconCode!=0) then begin
    if (blank(brp.ReconCode)) then begin
      res = 21391;
      WindowFieldGoto(wn,brp,-1,"ReconCode",true);
      goto LTestReconsBankRecW;
    end;
 end;
LTestReconsBankRecW:;
  TestReconsBankRecW = res;
  return;
end;

global
procedure BankRecSearch()
BEGIN
  Integer wn,nwn;
  record BankRecVc BankRecr;
  record RcVc RepSpec;
  
  wn = FindWindow("BankAccountReconWClass");
  GetWindowRecord(wn,BankRecr);
  ReportDefaults(RepSpec,"RecSearchRClass");
//  RepSpec.Media = mtScreen;
  nwn = OpenWindow("RecSearchRClass",0,0,"","",RepSpec);
  RepSpec.UsedOnly = wn;
  PutWindowRecord(nwn,RepSpec);  
  SelectWindow(nwn);
  RETURN;
END;

function Boolean RecSearchRClassf1EFAfter(Integer wn,Integer fn, Integer rownr,Integer changed)
BEGIN
  record RcVc RepSpec;
  record BankRecVc BankRecr;
  row BankRecVc BankRecrw;//BankRecRowType
  Integer i,rwcnt;
  Boolean res;
  string 255 rstr;
  
  res = true;
  GetWindowRecord(wn,RepSpec);
  if (RepSpec.UsedOnly>0) then begin
    GetWindowRecord(RepSpec.UsedOnly,BankRecr);
    DeselectWindow(RepSpec.UsedOnly,false);
    rwcnt = MatRowCnt(BankRecr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(BankRecr,i,BankRecrw);
      switch (RepSpec.flags[0]) begin
        case 0:
          ToStrTRCode(rstr,BankRecrw.IntYc,BankRecrw.Number);        
          if (Left(rstr,len(RepSpec.f1))==RepSpec.f1) then begin
            WindowFieldGoto(RepSpec.UsedOnly,BankRecr,i,"Number",true);
            goto LRecSearchRClassf1EFAfter;
          end;
        case 1:
          if (Left(BankRecrw.Comment,len(RepSpec.f1))==RepSpec.f1) then begin
            WINDOWFIELDGOTO(RepSpec.UsedOnly,BankRecr,i,"Comment",true);
            goto LRecSearchRClassf1EFAfter;
          end;
      end;
    end;
  end;
  WindowFieldGoto(RepSpec.UsedOnly,BankRecr,0,"Comment",true);
LRecSearchRClassf1EFAfter:;  
  RecSearchRClassf1EFAfter = res;
  RETURN;
END;

global
function Boolean RecSearchRClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
    case "f1": res = RecSearchRClassf1EFAfter(wn,fn,rownr,changed);
  end;
  RecSearchRClassAfterEditField = res;
  RETURN;
END;

updating function Boolean BankRecWClassPeriod2StrEFAfter(Integer wn,Boolean changedf)
BEGIN
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    BankRecVc_PastePeriod2Str(BankRecr);    
    PutWindowRecord(wn,BankRecr);
  end;  
  BankRecWClassPeriod2StrEFAfter = res;
  RETURN;
END;

updating function Boolean BankRecWClassd1EFAfter(Integer wn,Boolean changedf)
begin
  record BankRecVc BankRecr;
  Boolean res;
  Date td;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (blankdate(BankRecr.d1)) then begin
      td.day = 1; td.month = 1; td.year = 1980;
      BankRecr.d1 = td;
    end;
    BankRecr.Period2Str = BankRecr.d1;
    BankRecr.Period2Str = BankRecr.Period2Str & ":";
    BankRecr.Period2Str = BankRecr.Period2Str & BankRecr.d2;
    BankRecVc_PastePeriod2Str(BankRecr);
    PutWindowRecord(wn,BankRecr);
  end;  
  BankRecWClassd1EFAfter = res;
  return;
end;

updating function Boolean BankRecWClassd2EFAfter(Integer wn,Boolean changedf)
begin
  record BankRecVc BankRecr;
  Boolean res;
  Date td;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (blankdate(BankRecr.d1)) then begin
      td.day = 1; td.month = 1; td.year = 1980;
      BankRecr.d1 = td;
    end;
    BankRecr.Period2Str = BankRecr.d1;
    BankRecr.Period2Str = BankRecr.Period2Str & ":";
    BankRecr.Period2Str = BankRecr.Period2Str & BankRecr.d2;
    BankRecVc_PastePeriod2Str(BankRecr);
    PutWindowRecord(wn,BankRecr);
  end;  
  BankRecWClassd2EFAfter = res;
  return;
end;

updating function Boolean BankRecWClassCompCodeEFAfter(Integer wn,Boolean changedf)
begin
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (BankRecr.Recedf!=0 or BankRecr.Unrecedf!=0) then begin
      UpdateBankRecW(BankRecr);
      PutWindowRecord(wn,BankRecr);
    end;
  end;  
  BankRecWClassCompCodeEFAfter = res;
  return;
end;

updating function Boolean BankRecWClassReconCodeEFAfter(Integer wn,Boolean changedf)
begin
  record BankRecVc BankRecr;
  Boolean res;
integer sorting;

switch (sorting) begin
    case 1: BankRecSortOnAmount(BankRecr);
    case 2: BankRecSortOnReconCode(BankRecr);
end;    
  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (BankRecr.Recedf!=0 or BankRecr.Unrecedf!=0) then begin
      UpdateBankRecW(BankRecr);
      Do_RefreshBRPost(BankRecr,sorting)
      PutWindowRecord(wn,BankRecr);
    end;
  end;  
  BankRecWClassReconCodeEFAfter = res;
  return;
end;



updating function Boolean BankRecWClassAccNumberEFAfter(Integer wn,Boolean changedf)
BEGIN
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (BankRecr.Recedf!=0 or BankRecr.Unrecedf!=0) then begin
      BankRecVc_PasteAccNumber(BankRecr);
      PutWindowRecord(wn,BankRecr);
    end;
  end;  
  BankRecWClassAccNumberEFAfter = res;
  RETURN;
END;

procedure ApplySelected(var record BankRecVc BRr,record BankRecVc oldBRr)
begin
  row BankRecVc brrw;
  row BankRecVc oldbrrw;
  Integer orwcnt,rwcnt,i,oi;

  orwcnt = MatRowCnt(oldBRr);
  rwcnt = MatRowCnt(BRr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BRr,i,brrw);
    for (oi=0;oi<orwcnt;oi=oi+1) begin
      MatRowGet(oldBRr,oi,oldbrrw);
      if (oldbrrw.IntYc==brrw.IntYc) and (oldbrrw.Number==brrw.Number) and (brrw.Reconsf!=oldbrrw.Reconsf) then begin
        brrw.Reconsf = oldbrrw.Reconsf;
        MatRowPut(BRr,i,brrw);
        oi = orwcnt;
        BankRecVc_PasteReconsf(BRr,i);
      end;
    end;
  end;
  return;
end;

procedure BuildPerpetuateReconList(integer wn,record BankRecVc BankRecr)
begin
  string 255 BRWnStr,tmpstr;
  row BankRecVc brrw;
  integer rwcnt,i;

  rwcnt = MatRowCnt(BankRecr);
  for (i=0; i<rwcnt; i=i+1) begin
    MatRowGet(BankRecr,i,brrw);
    if (brrw.Reconsf!=0) then begin
      BRWnStr = AddStringToStringList(BRWnStr,brrw.IntYc & ";" & brrw.Number);
/*      
      if (nonblank(BRWnStr)) then begin 
        BRWnStr = BRWnStr & ",";
      end; 
      BRWnStr = BRWnStr & brrw.IntYc & ";" & brrw.Number;
*/      
    end;
  end;
  PutWindowString(wn,"gAccRec_ReconfListOK",BRWnStr);  
end;

procedure PastePerpetuateReconList(integer wn,var record BankRecVc BankRecr)
begin
  string 255 BRWnStr,BankRecMatStr,intyc,number;
  row BankRecVc brrw;
  longint charpos,charpos2;
  integer rwcnt,i;

  BRWnStr = GetWindowString(wn,"gAccRec_ReconfListOK"); 
  charpos = 0;
  while (GetNextSubstring(BRWnStr,charpos,",",BankRecMatStr)) begin
    if (nonblank(BankRecMatStr)) then begin
      charpos2 = 0;
      GetNextSubstring(BankRecMatStr,charpos2,";",intyc);
      GetNextSubstring(BankRecMatStr,charpos2,";",number);
      rwcnt = MatRowCnt(BankRecr);
      for (i=0; i<rwcnt; i=i+1) begin
        MatRowGet(BankRecr,i,brrw);
        if (brrw.IntYc==StringToInt(intyc) and brrw.Number==StringToInt(number)) then begin
          brrw.Reconsf = 1;
          MatRowPut(BankRecr,i,brrw);
          BankRecVc_PasteReconsf(BankRecr,i);
          i = rwcnt;               
        end;
      end;
    end;
  end;
end;

updating function Boolean BankRecWClassReconSumEFAfter(Integer wn,Boolean changedf)
begin
  record BankRecVc BankRecr;
  record BankRecVc oBRr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (BankRecr.Recedf!=0 or BankRecr.Unrecedf!=0) then begin
      RecordCopy(oBRr,BankRecr);
      if (nonblank(BankRecr.ReconSum)) then begin 
        BuildPerpetuateReconList(wn,BankRecr);
      end; 
      BankRecVc_PasteReconSum(BankRecr);
      ApplySelected(BankRecr,oBRr);
      PastePerpetuateReconList(wn,BankRecr);
      PutWindowRecord(wn,BankRecr);
    end;
  end;  
  BankRecWClassReconSumEFAfter = res;
  return;
end;

function Boolean BankRecWClassBankBalEFAfter(Integer wn,Boolean changedf)
begin
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    DeselectWindow(wn,false);
    BankRecr.Diff = BankRecr.EndBal - BankRecr.BankBal;
    PutWindowRecord(wn,BankRecr);
  end;  
  BankRecWClassBankBalEFAfter = res;
  return;
end;

updating function Boolean BankRecWClassCurncyCodeEFAfter(Integer wn,Boolean changedf)
BEGIN
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (BankRecr.Recedf!=0 or BankRecr.Unrecedf!=0) then begin
      BankRecVc_PasteCurncyCode(BankRecr);
      PutWindowRecord(wn,BankRecr);
    end;
  end;  
  BankRecWClassCurncyCodeEFAfter = res;
  RETURN;
END;

updating function Boolean BankRecWClassObjectsEFAfter(Integer wn,Boolean changedf)
BEGIN
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (BankRecr.Recedf!=0 or BankRecr.Unrecedf!=0) then begin
      BankRecVc_PasteObjects(BankRecr);
      PutWindowRecord(wn,BankRecr);
    end;
  end;  
  BankRecWClassObjectsEFAfter = res;
  RETURN;
END;

updating function Boolean BankRecWClassRecDateEFAfter(Integer wn,Boolean changedf)
BEGIN
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    DeselectWindow(wn,false);
    BankRecVc_PasteRecDate(BankRecr);
    PutWindowRecord(wn,BankRecr);
  end;  
  BankRecWClassRecDateEFAfter = res;
  RETURN;
END;

function Boolean BankRecWClassReconsfEFAfter(Integer wn,Integer rownr,Boolean changedf)
BEGIN
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    DeselectWindow(wn,false);
    BankRecVc_PasteReconsf(BankRecr,rownr);
    PutWindowRecord(wn,BankRecr);
  end;  
  BankRecWClassReconsfEFAfter = res;
  RETURN;
END;

updating function Boolean BankRecWClassTypEFAfter(Integer wn,Boolean changedf)
BEGIN
  record BankRecVc BankRecr;
  Boolean res;

  if (changedf) then begin
    GetWindowRecord(wn,BankRecr);
    if (BankRecr.Recedf!=0 or BankRecr.Unrecedf!=0) then begin
      BankRecVc_PasteTyp(BankRecr);
      PutWindowRecord(wn,BankRecr);
    end;
  end;  
  BankRecWClassTypEFAfter = res;
  RETURN;
END;

global
updating function Boolean BankRecWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
BEGIN
  Boolean res;

  switch (fieldname) begin
//    case "d1": res = BankRecWClassd1EFAfter(wn,changed!=0);
//    case "d2": res = BankRecWClassd2EFAfter(wn,changed!=0);
    case "Period2Str": res = BankRecWClassPeriod2StrEFAfter(wn,changed!=0);
    case "AccNumber": res = BankRecWClassAccNumberEFAfter(wn,changed!=0);
    case "Objects": res = BankRecWClassObjectsEFAfter(wn,changed!=0);
    case "RecDate": res = BankRecWClassRecDateEFAfter(wn,changed!=0);
    case "Reconsf": res = BankRecWClassReconsfEFAfter(wn,rownr,changed!=0);
    case "CurncyCode": res = BankRecWClassCurncyCodeEFAfter(wn,changed!=0);
    case "Typ": res = BankRecWClassTypEFAfter(wn,changed!=0);
    case "ReconSum": res = BankRecWClassReconSumEFAfter(wn,changed!=0);
    case "BankBal": res = BankRecWClassBankBalEFAfter(wn,changed!=0);
    case "CompCode": res = BankRecWClassCompCodeEFAfter(wn,changed!=0);
    case "ReconCode": res = BankRecWClassReconCodeEFAfter(wn,changed!=0);
  end;
  BankRecWClassAfterEditField = res;
  RETURN;
END;

global
function string 40 BankRecWClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record BankRecVc BankRecr;
  row BankRecVc BankRecrw;
  Integer rownr;
  
  psname = defpsname;
  switch (WindowActiveField(wn)) begin
    case "CompCode":
      GetWindowRecord(wn,BankRecr);
      rownr = WindowActiveRow(wn);
      if (rownr>=0) then begin
        MatRowGet(BankRecr,rownr,BankRecrw);
      end;
      switch (BankRecr.Typ) begin
        case 1: psname = "CUSClass";
        case 2: psname = "VESClass";
        otherwise psname = "";
      end;
  end;
  BankRecWClassSpecPasteName = psname;
  return;
end;

global
updating function Boolean BankRecWClassRecedfButtonAfter(Integer wn,Boolean changedf)
begin        
  record BankRecVc BankRecr;  
  Boolean res;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,BankRecr);
  UpdateBankRecW(BankRecr);
  PutWindowRecord(wn,BankRecr);
  BankRecWClassRecedfButtonAfter = res;  
  return;
end;

global
updating function Boolean BankRecWClassUnrecedfButtonAfter(Integer wn,Boolean changedf)
begin        
  record BankRecVc BankRecr;  
  Boolean res;
  record AccVc Accr;

  DeselectWindow(wn,false);
  GetWindowRecord(wn,BankRecr);
  Accr.AccNumber = BankRecr.AccNumber;
  if (ReadFirstMain(Accr,1,true)) then begin
    BankRecr.CurncyCode = Accr.Curncy;
  end;
  UpdateBankRecW(BankRecr);
  PutWindowRecord(wn,BankRecr);
  BankRecWClassUnrecedfButtonAfter = res;  
  return;
end;

global
function Boolean BankRecWClassIncompletefButtonAction(Integer wn,Integer value)
begin
  Boolean res;
 
  res = false;
  BankRecWClassIncompletefButtonAction = res;
  return;
end;

global 
function Boolean BankRecWClassDeleteRowTest(Integer wn,Integer rownr)
begin
  Boolean res;

  res = false;
  BankRecWClassDeleteRowTest = res;
  return;
end;

global 
function Boolean BankRecWClassInsertRowTest(Integer wn,Integer rownr)
begin
  Boolean res;

  res = false;
  BankRecWClassInsertRowTest = res;
  return;
end;

global
function Boolean BankRecWClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)
BEGIN
  Boolean res;
  
  res = true;
  if (rownr>=0) then begin  
    switch (fieldname) begin
      case "Reconsf": res = true;
      case "ReconCode": res = true;
      case "ReconDate": res = true;
      otherwise res = false;
    end;
  end;
  BankRecWClassActiveEditField = res;
  RETURN;
END;

procedure ResetReconState(record BankRecVc BankRecr,record BankRecVc prevBankRecr)
begin
  row BankRecVc BankRecrw;
  row BankRecVc prevBankRecrw;
  Integer i,rwcnt;
  Integer pi,prwcnt;
  
  prwcnt = MatRowCnt(prevBankRecr);
  rwcnt = MatRowCnt(BankRecr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BankRecr,i,BankRecrw);
    for (pi=0;pi<prwcnt;pi=pi+1) begin
      MatRowGet(prevBankRecr,pi,prevBankRecrw);
      if ((BankRecrw.IntYc==prevBankRecrw.IntYc) and (BankRecrw.Number==prevBankRecrw.Number)) then begin
        BankRecrw.Reconsf = prevBankRecrw.Reconsf;
        BankRecrw.ReconCode = prevBankRecrw.ReconCode;
        if (BankRecrw.Reconsf!=0) then begin
          BankRecr.RecVal = BankRecr.RecVal + BankRecrw.Val;
        end;
        MatRowPut(BankRecr,i,BankRecrw);
        pi = prwcnt;
      end;
    end;
  end;
  BankRecr.EndBal = BankRecr.StartBal + BankRecr.RecVal;
  BankRecr.Diff = BankRecr.EndBal - BankRecr.BankBal;
  return;
end;

global
updating procedure UpdateBankRecWsm()
BEGIN
  Integer wn;
  record BankRecVc BankRecr;
  record BankRecVc prevBankRecr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,BankRecr);
  GetWindowRecord(wn,prevBankRecr);
  BuildPerpetuateReconList(wn,BankRecr);
  UpdateBankRecW(BankRecr);
  ResetReconState(BankRecr,prevBankRecr);
  PastePerpetuateReconList(wn,BankRecr);  
  PutWindowRecord(wn,BankRecr);
  RETURN;
END;

global
updating function Integer ReconsBankRecW(var record BankRecVc BankRecp,Integer wn)
begin
  Integer res;

  res = TestReconsBankRecW(BankRecp,wn);
  if (res==0) then begin
    UpdateBRPost(BankRecp,true,0);
  end;
  
  ReconsBankRecW = res;
  return;
end;

global
updating procedure CommitBankRecWsm()
BEGIN
  Integer wn,err;
  record BankRecVc BankRecr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,BankRecr);
  err = ReconsBankRecW(BankRecr,wn);
  if (err!=0) then begin
    MessageBox(err,"");
    goto LCommitBankRecWsm;
  end;
  UpdateBankRecW(BankRecr);
  PutWindowRecord(wn,BankRecr);
LCommitBankRecWsm:;  
  RETURN;
END;

global
updating procedure SortAmountBankRecWsm()
BEGIN
  Integer wn;
  record BankRecVc BankRecr;
  
  wn = CurWindow;
  DeselectWindow(wn,false);
  GetWindowRecord(wn,BankRecr);
  BuildPerpetuateReconList(wn,BankRecr);
  UpdateOnAmountBankRecW(BankRecr);
  PastePerpetuateReconList(wn,BankRecr);
  PutWindowRecord(wn,BankRecr);
  RETURN;
END;

global
updating procedure SortReconCodeBankRecWsm()
begin
  Integer wn;
  record BankRecVc BankRecr;
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,BankRecr);
  BuildPerpetuateReconList(wn,BankRecr);
  UpdateOnReconCodeBankRecW(BankRecr);
  PastePerpetuateReconList(wn,BankRecr);
  PutWindowRecord(wn,BankRecr);
  return;
end;

global
updating function Boolean BankRecWClassOnOpenWindow(Integer wn)
begin
  record BankRecVc BankRecr;
  record BankRecBlock BRb;
  
  BlockLoad(BRb);
  GetWindowRecord(wn,BankRecr);
  BankRecr.RecDate = CurrentDate;
  if (GetDay(BankRecr.RecDate)!=1) then begin
    BankRecr.RecDate = AddMonth(BankRecr.RecDate,1);
    BankRecr.RecDate = AddDay(BankRecr.RecDate,-GetDay(BankRecr.RecDate)+1);
  end;
  if (nonblankdate(BRb.LastBankRecDate)) then begin
    BankRecr.RecDate = BRb.LastBankRecDate;
  end;
  BankRecr.Typ = kTransactionRowTypeAny;
  UpdateBankRecW(BankRecr);
  PutWindowRecord(wn,BankRecr);
  BankRecWClassOnOpenWindow = false;
  return;
end;

global
procedure MarkAsRecBankRecWsm()
BEGIN
  Integer wn;
  record BankRecVc BankRecr;
  row BankRecVc BankRecrw;
  Integer i,rwcnt;  
  
  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,BankRecr);
  rwcnt = MatRowCnt(BankRecr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(BankRecr,i,BankRecrw);
    BankRecrw.Reconsf = 1;
    MatRowPut(BankRecr,i,BankRecrw);
    BankRecVc_PasteReconsf(BankRecr,i);
  end;
  PutWindowRecord(wn,BankRecr);
  RETURN;
END;

global
procedure TRBankRecWsm()
BEGIN
  Integer wn,nwn;
  record BankRecVc BankRecr;
  record TRVc TRr;
  
  RecordNew(TRr);
  nwn = OpenWindow("TRDClass",0,0,"","",TRr);
  PutWindowRecord(nwn,TRr);  
  SelectWindow(nwn);
  RETURN;
END;

global
procedure OpenTRBankRecWsm()
BEGIN
  Integer wn,nwn;
  record BankRecVc BankRecr;
  row BankRecVc BankRecrw;
  record TRVc TRr;
  Integer rownr;

  wn = CurWindow;
  GetWindowRecord(wn,BankRecr);
  rownr = WindowActiveRow(wn);
  if (rownr>=0) then begin
    MatRowGet(BankRecr,rownr,BankRecrw);
    TRr.Number = BankRecrw.Number;
    TRr.IntYc = BankRecrw.IntYc;
    if (ReadFirstMain(TRr,2,true)) then begin
      nwn = OpenWindow("TRDClass",1,0,"","",TRr);
    end;
  end;
  RETURN;
END;

global
procedure ACReconRecWsm()
begin
  Integer wn;
  record BankRecVc BankRecr;
  record RcVc RepSpec;

  wn = CurWindow;
  GetWindowRecord(wn,BankRecr);
  ReportDefaults(RepSpec,"ACReconRClass");
  RepSpec.repname = "ACRecRn";
  In2Period(BankRecr.Period2Str,RepSpec.sStartDate,RepSpec.sEndDate);

  RepSpec.f1 = BankRecr.AccNumber;
  RepSpec.ObjStr = BankRecr.Objects;
  RepSpec.RegDate = BankRecr.RecDate;
  RepSpec.FirstAcc = BankRecr.ReconCode;
  RepSpec.Media = mtScreen;
  RepSpec.flags[1] = BankRecr.Recedf;
  RepSpec.flags[2] = BankRecr.Unrecedf;

  RepSpec.flags[4] = 0;
  RepSpec.flags[5] = BankRecr.ShowRefStr;
  RepSpec.basecurncy = 0;
  RunReport(RepSpec,0);  
  RETURN;
END;

/*
global
procedure RecordActionBankRec_Print(record BankRecVc BankRecr,string arg1)
BEGIN
  Boolean previewf;

  if (nonblank(arg1)) then begin
    if (StringToInt(arg1)!=0) then begin
      previewf = true;
    end;
  end;   
//  if (PrintDocument(BankRecr,"BankRecForm",previewf)) then begin end;
  RETURN;
END;

global
function Boolean BankRecWClassPrint(Integer wn,Boolean previewf)
BEGIN
  Boolean res;
  record BankRecVc BankRecr;
  Integer normalmode;
  
  normalmode = 0;//Rs_normal
  DeselectWindow(wn,false);
  GetWindowRecord(wn,BankRecr);
  if ((WindowState(wn)==normalmode) and (previewf==false)) then begin 
    RecordActionBankRec_Print(BankRecr,"");
  end else begin
//    if (PrintDocument(BankRecr,"BankRecForm",previewf)) then begin end;
  end;
  res = true;
  BankRecWClassPrint = res;
  RETURN;
END;
*/  

global
updating function Boolean BankRecWClassOnEnterKey(var Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record BankRecVc BankRecr;
  row BankRecVc BankRecrw;
  
  res = true;
  GetWindowRecord(wn,BankRecr);
  switch (fieldname) begin
    case "ReconSum":
      if (nonblank(BankRecr.ReconSum)) then begin
        if (MatRowCnt(BankRecr)>0) then begin
          WindowFieldGoto(wn,BankRecr,0,"Reconsf",true);
          res = false;
        end else begin
          Beep;
          WindowFieldGoto(wn,BankRecr,-1,"ReconSum",true);
          res = false;
        end;
      end;
    case "Reconsf":
      if (nonblank(BankRecr.ReconSum)) then begin
        MatRowGet(BankRecr,rownr,BankRecrw);
        if (BankRecrw.Reconsf==0) then begin
          BankRecrw.Reconsf = 1;
          MatRowPut(BankRecr,rownr,BankRecrw);
          ReconsBankRecW(BankRecr,wn);
          UpdateBankRecW(BankRecr);
          PutWindowRecord(wn,BankRecr);
          WindowFieldGoto(wn,BankRecr,-1,"ReconSum",true);
          res = false;
        end;
      end;
  end;
LBankRecWClassOnEnterKey:;  
  BankRecWClassOnEnterKey = res;
  return;
end;

global
function Boolean BankRecWClassOpenRecord(Integer wn,string fieldname,Integer fn,Integer rownr)
begin
  Boolean res;
  record BankRecVc BankRecr;
  row BankRecVc BankRecrw;
  record TRVc TRr;
  
  switch (fieldname) begin
    case "Number":
      GetWindowRecord(wn,BankRecr);  
      MatRowGet(BankRecr,rownr,BankRecrw);
      TRr.Number = BankRecrw.Number;
      TRr.IntYc = BankRecrw.IntYc;
      if (ReadFirstMain(TRr,2,true)) then begin
        if (TRr.IntYc>=IVYc) then begin
          OpenVcFromTR(TRr);
        end else begin
          OpenWindow("TRDClass",1,0,"","",TRr);          
        end;
      end;
  end;
  BankRecWClassOpenRecord = res;
  return;
end;

global
updating procedure CreateTemplTransBankRecWsm()
begin
  record BankRecVc BankRecr;
  row BankRecVc BankRecrw;
  record DanTRVc DTr;
  row DanTRVc DTrw;
  Integer wn,nwn;
  
  wn = CurWindow;
  GetWindowRecord(wn,BankRecr);
  
  RecordNew(DTr);

  ClearRow(DTr,DTrw,1);
  DTrw.RowTransDate = BankRecr.RecDate;
  DTrw.AccNumber1 = BankRecr.AccNumber;
  MatRowPut(DTr,0,DTrw);
  
  nwn = OpenWindow("DanTRDClass",1,0,"","",DTr);
  
  return;
end;

global
procedure InPeriod(string period,var Date sd,var Date ed)
begin
  LongInt pos;
  string 255 tstr;
  
  pos = 0;
  GetNextSubstring(period,pos," ",tstr);
  sd = StringToDate(tstr);
  GetNextSubstring(period,pos,",",tstr);
  ed = StringToDate(tstr);
  return;
end;

procedure BankAccountReconWClassPeriod(Integer wn,var Date sd,var Date ed)
begin
  string 255 tstr;
  
  sd = "";
  ed = "";
  tstr = GetWindowString(wn,"gAccRcn_vperiod");
  if (nonblank(tstr)) then begin
    InPeriod(tstr,sd,ed);
  end;
  if (blankdate(sd)) then begin
    sd = CurrentDate;
    sd.day = 1;
  end;
  if (blankdate(ed)) then begin
    ed = sd;
    ed.day = DaysInMonth(ed.year,ed.month);  
  end;
//  tstr = DateToString(sd,"DD-MM-YYYY") & " " & DateToString(ed,"DD-MM-YYYY");
  tstr = sd & " " & ed; //DateToStr(sd) & " " & DateToStr(ed);

  PutWindowString(wn,"gAccRcn_vperiod",tstr);
  return;
end;

procedure BankAccountReconWClassPMAccNr(Integer wn,var string pmaccnr,var string pmcode)
begin
  record PMBlock PMb;
  row PMBlock PMbrw;
  Integer i,rwcnt;
  
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    i = rwcnt;
  end;
  pmaccnr = PMbrw.AccNr;
  pmcode = PMBrw.Code;
  PutWindowString(wn,"gAccRcn_vpmaccnr",pmaccnr);
  PutWindowString(wn,"gAccRcn_vpmcode",pmcode);
  return;
end;

global
function Boolean BankAccountReconWClassOnOpenWindow(Integer wn)
begin
  Date sd,ed;
  string 255 pmaccnr,pmcode;
  
  BankAccountReconWClassPeriod(wn,sd,ed);
  BankAccountReconWClassPMAccNr(wn,pmaccnr,pmcode);
//  sd = "01/01/2017";
  threadremoteasync.BankAccountReconWClass_FillDataAsync(wn,pmaccnr,pmcode,"",sd,ed);
  BankAccountReconWClassOnOpenWindow = false;
  return;
end;

global
procedure BankAccountReconWClassReload(string arg)
begin
  Date sd,ed;
  string 255 pmaccnr,pmcode;

  BankAccountReconWClassPeriod(FindWindow("BankAccountReconWClass"),sd,ed);
  BankAccountReconWClassPMAccNr(FindWindow("BankAccountReconWClass"),pmaccnr,pmcode);
  threadremoteasync.BankAccountReconWClass_FillDataAsync(FindWindow("BankAccountReconWClass"),pmaccnr,pmcode,"",sd,ed);
  return;
end;

global
procedure BankAccountReconWClass_FillDataAsyncCallback(Integer wn,string html)
begin
  //WriteStringToFile(html,"bww.html",0);
  SetWebPageData(wn,"$BankAccountRecon",html);
  return;  
end;

global
procedure BankAccountReconWClass_CreateReceipt(string btnr)
begin
  record BankTRVc BTRr;
  record IPVc IPr;
  row IPVc IPrw;
  
  BTRr.SerNr = btnr;
  if (ReadFirstMain(BTRr,1,true)) then begin
    RecordNew(IPr);
//    IPr.PayDate = BTRr.TransDate;
    ClearRow(IPr,IPrw,1);
    IPr.TransDate = BTRr.TransDate;
    IPrw.Comment = BTRr.Comment;
    IPrw.BankCurncy = BTRr.CurncyCode;
    IPrw.BankVal = BTRr.Sum;
    MatRowPut(IPr,MatRowCnt(IPr),IPrw);
    qupdating.AddBankTRRecordLinkToIP(IPr,BTRr);
    OpenWindow("IPDClass",1,0,"","",IPr);
  end;
  return;
end;

global
procedure BankAccountReconWClass_CreatePayment(string btnr)
begin
  record BankTRVc BTRr;
  record OPVc OPr;
  row OPVc OPrw;
  
  BTRr.SerNr = btnr;
  if (ReadFirstMain(BTRr,1,true)) then begin
    RecordNew(OPr);
    OPr.PayDate = BTRr.TransDate;
    OPr.TransDate = BTRr.TransDate;

    ClearRow(OPr,OPrw,1);
    OPrw.Comment = BTRr.Comment;
    OPrw.BankCurncy = BTRr.CurncyCode;
    OPrw.BankVal = BTRr.Sum;
    OPrw.RecVal = BTRr.Sum;
    MatRowPut(OPr,MatRowCnt(OPr),OPrw);
    qupdating.AddBankTRRecordLinkToOP(OPr,BTRr);
    OpenWindow("OPDClass",1,0,"","",OPr);
  end;
  return;
end;

global
procedure BankAccountReconWClass_CreatePersonalPayment(string btnr)
begin
  record BankTRVc BTRr;
  record PPVc PPr;
  row PPVc PPrw;
  
  BTRr.SerNr = btnr;
  if (ReadFirstMain(BTRr,1,true)) then begin
    RecordNew(PPr);
    PPr.PayDate = BTRr.TransDate;
    PPr.TransDate = BTRr.TransDate;
    PPr.CurncyCode = BTRr.CurncyCode;
    ClearRow(PPr,PPrw,1);
    PPrw.Comment = BTRr.Comment;
    PPrw.PayVal = BTRr.Sum;
    MatRowPut(PPr,MatRowCnt(PPr),PPrw);
    qupdating.AddBankTRRecordLinkToPP(PPr,BTRr);
    OpenWindow("PPDClass",1,0,"","",PPr);
  end;
  return;
end;

global
procedure BankAccountReconWClass_CreateTransaction(string btnr)
begin
  record BankTRVc BTRr;
  record TRVc TRr;
  row TRVc TRrw;
  record BaseCurBlock BaseCurBl;
  record BaseERVc BERr;
  record PMBlock PMb;
  row PMBlock PMbrw;
  val t;
  BlockLoad(BaseCurBl);

  BTRr.SerNr = btnr;
  if (ReadFirstMain(BTRr,1,true)) then begin
    RecordNew(TRr);
    TRr.TransDate = BTRr.TransDate;
    ClearRow(TRr,TRrw,1);
    TRrw.Curncy = BTRr.CurncyCode;
    TRrw.Comment = BTRr.Comment;
    if (TRrw.Curncy==BaseCurBl.BaseCur1) then begin
      BERr.Date = TRr.TransDate;
      if (ReadLastMain(BERr,1,false)) then begin
        TRrw.BaseRate1 = BERr.Rate1;
        TRrw.BaseRate2 = BERr.Rate2;
      end;
    end;
    switch (Left(BTRr.TypeRef,1)) begin
      case "D": GetBankAccPMRow(PMb,"",BTRr.PayBankAcc,PMbrw);
                TRrw.CredVal = BTRr.Sum;
                TRrw.CredVal2 = MulRateToBase2(TRrw.Curncy,TRrw.CredVal,blankval,blankval,blankval,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
      case "C": GetBankAccPMRow(PMb,"",BTRr.RcpBankAcc,PMbrw);
                TRrw.DebVal = BTRr.Sum;
                TRrw.DebVal2 = MulRateToBase2(TRrw.Curncy,TRrw.DebVal,blankval,blankval,blankval,TRrw.BaseRate1,TRrw.BaseRate2,DefaultCurRoundOff);
    end;
    TRrw.AccNumber = PMbrw.AccNr;
    
    MatRowPut(TRr,MatRowCnt(TRr),TRrw);
    TRSumup(TRr,t);
    qupdating.AddBankTRRecordLinkToTR(TRr,BTRr);
    OpenWindow("TRDClass",1,0,"","",TRr);
  end;
  return;
end;

global
procedure BankAccountReconWClass_Create(string args)
begin
  string 255 filename,banktransnr;
  LongInt pos;

  pos = 0;
  GetNextSubstring(args,pos,",",filename);
  GetNextSubstring(args,pos,",",banktransnr);
  switch (filename) begin
    case "IPVc": BankAccountReconWClass_CreateReceipt(banktransnr);
    case "OPVc": BankAccountReconWClass_CreatePayment(banktransnr);
    case "PPVc": BankAccountReconWClass_CreatePersonalPayment(banktransnr);
    case "TRVc": BankAccountReconWClass_CreateTransaction(banktransnr);
  end;
  return;
end;


global
procedure BankAccountReconWClass_OpenRecordToReconcile(string arg)
begin
  record PPVc PPr;
  record OPVc OPr;
  record IPVc IPr;
  record TRVc TRr;
  string 255 filename,transnr,intyc;
  LongInt pos;

  pos = 0;
  GetNextSubstring(arg,pos,",",filename);
  GetNextSubstring(arg,pos,",",transnr);
  GetNextSubstring(arg,pos,",",intyc);
  
  switch (filename) begin
    case "IPVc":
      IPr.SerNr = StringToLongInt(transnr);
      if (ReadFirstMain(IPr,1,true)) then begin
        OpenWindow("IPDClass",1,0,"","",IPr);
      end;
      qupdating.UpdateBankTRFromIP(IPr); 
    case "OPVc":
      OPr.SerNr = StringToLongInt(transnr);
      if (ReadFirstMain(OPr,1,true)) then begin
        OpenWindow("OPDClass",1,0,"","",OPr);
      end;
    case "PPVc":
      PPr.SerNr = StringToLongInt(transnr);
      if (ReadFirstMain(PPr,1,true)) then begin
        OpenWindow("PPDClass",1,0,"","",PPr);
      end;
    case "TRVc":
      TRr.Number = StringToLongInt(transnr);
      TRr.IntYc = StringToLongInt(intyc);
      if (ReadFirstMain(TRr,2,true)) then begin
        OpenWindow("TRDClass",1,0,"","",TRr);
      end;
  end;
  return;
end;

global
procedure BankAccountReconWClass_OpenBankTransaction(string btnr)
begin
  record BankTRVc BTRr;
  
  BTRr.SerNr = btnr;
  if (ReadFirstMain(BTRr,1,true)) then begin
    OpenWindow("BankTRDClass",0,0,"","",BTRr);
  end;
  return;
end;

global
updating procedure BankAccountReconWClass_ReconcileBankTransaction(string arg)
begin
  Date sd,ed;
  string 255 tstr;
  string 255 pmaccnr,pmcode;

  if (nonblank(arg)) then begin
    BankAccountReconWClass_ReconcileBankTransactionRemote(arg);
    tstr = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vperiod");
    InPeriod(tstr,sd,ed);
    pmaccnr = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmaccnr");
    pmcode = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmcode");
    //RP - threadremotesync was missing
    threadremoteasync.BankAccountReconWClass_FillDataAsync(FindWindow("BankAccountReconWClass"),pmaccnr,pmcode,"",sd,ed);
  end;
  return;
end;

global
updating procedure BankAccountReconWClass_InvalidateBankPayment(string arg)
begin
  Date sd,ed;
  string 255 tstr;
  string 255 pmaccnr,pmcode;

  if (nonblank(arg)) then begin
    BankAccountReconWClass_InvalidateBankPaymentRemote(arg);
    tstr = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vperiod");
    InPeriod(tstr,sd,ed);
    pmaccnr = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmaccnr");
    pmcode = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmcode");
    //RP - threadremotesync was missing
    threadremoteasync.BankAccountReconWClass_FillDataAsync(FindWindow("BankAccountReconWClass"),pmaccnr,pmcode,"",sd,ed);
  end;
  return;
end;

global
procedure BankAccountRecon_RefreshStart(string arg)
begin
  Time t;

  t = CurrentTime;
  t.second = t.second + 10;
  NewTimedTask("RefreshBankAccountRecon","Reconciliation Refresh","BankAccountRecon_Refresh",arg,CurrentDate,t,"","");
  return;
end;

global
procedure BankAccountRecon_Refresh(string arg)
begin
  record BankTRVc BTRr;
  Time t;
  string 255 lastBankTRNr,cntstr,curwinstr,pmmode,periodstr;
  LongInt pos;
  
  pos = 0;
  GetNextSubstring(arg,pos,",",lastBankTRNr);
  GetNextSubstring(arg,pos,",",cntstr);
  GetNextSubstring(arg,pos,",",curwinstr);
  GetNextSubstring(arg,pos,",",pmmode);
  GetNextSubstring(arg,pos,",",periodstr);
  
  if (FindWindow("BankAccountReconWClass")!=StringToInt(curwinstr)) then begin
    goto LBankAccountRecon_Refresh;
  end;

  BTRr.SerNr = 2147483647;
  ReadLastMain(BTRr,1,false);

//Trace("lastBankTRNr " & lastBankTRNr," BTRr.SerNr " & BTRr.SerNr & " pmmode " & pmmode & " periodstr " & periodstr);

  if (StringToLongInt(lastBankTRNr)!=BTRr.SerNr) then begin
//    BankAccountReconWClass_RefillData(curwinstr & "," & pmmode & "," & periodstr);
    BankAccountReconWClass_RefillData(curwinstr);
  end else begin
    if (StringToInt(cntstr)<=10) then begin
      t = CurrentTime;
      t.second = t.second + 1;
      cntstr = StringToInt(cntstr) + 1;
      NewTimedTask("BankAccountRecon_RefreshStart","Reconciliation Refresh","BankAccountRecon_RefreshStart",BTRr.SerNr & "," & cntstr  & "," & curwinstr & "," & pmmode & "," & periodstr,CurrentDate,t,"","");
    end;
  end;
LBankAccountRecon_Refresh:;  
  return;
end;

global
updating procedure BankAccountReconWClass_ImportYodleeData(string arg)
begin
  Date sd,ed;
  string 255 periodstr,pmmode;
  record BankTRVc BTRr;
  Time t;
  record LocalMachineBlock LMb;

  if (UserCanAction("YodleeData",true)) then begin
    BlockLoad(LMb);
    periodstr = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vperiod");
    InPeriod(periodstr,sd,ed);
    pmmode = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmaccnr");
    BTRr.SerNr = 2147483647;
    ReadLastMain(BTRr,1,false);

    PayModeBankAccountImportYodleeData(CurrentUser,pmmode,DatabaseID,LMb.LocalMachineCode,sd,ed);
    t = CurrentTime;
    t.second = t.second + 1;
    NewTimedTask("BankAccountRecon_RefreshStart","Reconciliation Refresh","BankAccountRecon_RefreshStart",BTRr.SerNr & "," & "1" & "," & FindWindow("BankAccountReconWClass") & "," & pmmode & "," & periodstr,CurrentDate,t,"","");
  end else begin
    MessageBox(1274,StringFromStringSet(3,"YodleeData"));
  end;
  
  return;
end;

global
updating procedure BankAccountReconWClass_ImportBankStatmentData(string arg)
begin
  Date sd,ed;
  string 255 periodstr,pmmode,accountuid,errmsg,bankcode,pmcode;
  record BankTRVc BTRr;
  Time t;
  record LocalMachineBlock LMb;
  record EnableBankBlock EnableBankBl;
  Integer err;
  Boolean reactivatef;

  if (UserCanAction("BankStatmentData",true)) then begin
    BlockLoad(LMb);
    BlockLoad(EnableBankBl);
    periodstr = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vperiod");
    InPeriod(periodstr,sd,ed);
    pmmode = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmaccnr");
    if (EnableBankBl.Enable!=0) then begin
      if (ShouldUseEnableBanking(pmmode,accountuid,bankcode,reactivatef,pmcode)) then begin
        if (!reactivatef) then begin
          err = DoAccountRequest(accountuid,"transactions",errmsg,sd,ed,pmcode);
          if (err!=0 or nonblank(errmsg)) then begin
            MessageBox(err,": " & errmsg);
          end else begin
            CheckMarkBox(43862,"");
          end;    
        end else begin    
          EnableBankingReAuthBank(bankcode,accountuid);
        end;  
      end else begin
        MessageBox(43864,"");
      end;
    end else begin
      BTRr.SerNr = 2147483647;
      ReadLastMain(BTRr,1,false);
      PayModeBankAccountImportBankStatmentData(CurrentUser,pmmode,DatabaseID,LMb.LocalMachineCode,sd,ed);
      t = CurrentTime;
      t.second = t.second + 60;
      NewTimedTask("BankAccountRecon_RefreshStart","Reconciliation Refresh","BankAccountRecon_RefreshStart",BTRr.SerNr & "," & "1" & "," & FindWindow("BankAccountReconWClass") & "," & pmmode & "," & periodstr,CurrentDate,t,"","");
    end;
  end else begin
    MessageBox(1274,StringFromStringSet(3,"BankStatmentData"));
  end;
  
  return;
end;

global
procedure emSzmalGetBankData_AccountReconWClass(string arg)
begin
  Date sd,ed;
  string 255 periodstr,pmmode,accountnr;
  record BankTRVc BTRr;
  Time t;
  record LocalMachineBlock LMb;
  record PMBlock PMBl;
  row PMBlock PMBlrw;
  Integer rwcnt,i,wn;
  LongInt err;

  BlockLoad(PMBl);
  BlockLoad(LMb);
  wn = CurWindow;
  periodstr = GetWindowString(wn,"gAccRcn_vperiod");
  InPeriod(periodstr,sd,ed);
  pmmode = GetWindowString(wn,"gAccRcn_vpmaccnr");

  if (DateDiff(ed,sd)>7) then begin
    MessageBox(42972,"");
    goto LemSzmalGetBankData_AccountReconWClass;
  end;
  if (DateDiff(sd,CurrentDate)>30) then begin
    MessageBox(42976,"");
    goto LemSzmalGetBankData_AccountReconWClass;
  end;
  rwcnt = MatRowCnt(PMBl);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(PMBl,i,PMBlrw);
    if (PMBlrw.AccNr==pmmode) then begin
      accountnr = PMBlrw.BankNr;
      err = EmSzmalHistoryAccRecon(accountnr,periodstr);
      if (err!=0) then begin MessageBox(err,""); end;
      goto LemSzmalGetBankData_AccountReconWClass;
    end;
  end;
  LemSzmalGetBankData_AccountReconWClass:;
  return;
end;

global
procedure BankAccountReconWClassChangeEditField(string arg)
begin
  Date sd,ed;
  string 255 tstr,fieldname,fieldvalue,prevvpmaccnr,vpmaccnr,vperiod,vtyperef;
  string 255 prevpmcode,vpmcode;
  LongInt pos;

  pos = 0;
  GetNextSubstring(arg,pos,",",fieldname);
  GetNextSubstring(arg,pos,",",fieldvalue);

  vperiod = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vperiod");
  prevvpmaccnr = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmaccnr");
  prevpmcode = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmcode");
  vtyperef = GetWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vtyperef");
  switch (fieldname) begin
    case "AccRcn_pmaccnr":
      pos = 0;
      GetNextSubstring(fieldvalue,pos," ",vpmaccnr);
      GetNextSubstring(fieldvalue,pos," ",vpmcode);
      
      if (nonblank(fieldvalue) and prevpmcode!=vpmcode) then begin
        InPeriod(vperiod,sd,ed);
        PutWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmaccnr",vpmaccnr);
        PutWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vpmcode",vpmcode)
        PutWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vtyperef",vtyperef);
        //RP - threadremotesync was missing
        threadremoteasync.BankAccountReconWClass_FillDataAsync(FindWindow("BankAccountReconWClass"),vpmaccnr,vpmcode,vtyperef,sd,ed);
      end;
    case "AccRcn_period":
      if (vperiod!=fieldvalue and nonblank(fieldvalue)) then begin
        InPeriod(fieldvalue,sd,ed);
        PutWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vperiod",fieldvalue);
        PutWindowString(FindWindow("BankAccountReconWClass"),"gAccRcn_vtyperef",vtyperef);
        //RP - threadremotesync was missing
        threadremoteasync.BankAccountReconWClass_FillDataAsync(FindWindow("BankAccountReconWClass"),prevvpmaccnr,prevpmcode,vtyperef,sd,ed);
      end;
  end;

  return;
end;

global
procedure BankAccountReconWClass_RefillData(string arg)
begin
  Date sd,ed;
  string 255 tstr,pmmode,periodstr,typeref;
  Integer wn;
  LongInt pos;
  string 255 pmaccnr,pmcode;
  
  wn = FindWindow("BankAccountReconWClass");
  if (nonblank(arg)) then begin
    if (InString2(arg,"TypeRef")>=0) then begin
      pos = 0;
      GetNextSubstring(arg,pos,"=",tstr);
      GetNextSubstring(arg,pos,"=",typeref);
    end else begin
      wn = StringToInt(arg);
    end;
  end;
  if (FindWindow("BankAccountReconWClass")>0) then begin
    tstr = GetWindowString(wn,"gAccRcn_vperiod");
    InPeriod(tstr,sd,ed);
    pmaccnr = GetWindowString(wn,"gAccRcn_vpmaccnr");
    pmcode = GetWindowString(wn,"gAccRcn_vpmcode");
    PutWindowString(wn,"gAccRcn_vtyperef",typeref);
    //RP - threadremotesync was missing
    threadremoteasync.BankAccountReconWClass_FillDataAsync(wn,pmaccnr,pmcode,typeref,sd,ed);
  end;
  return;
end;
