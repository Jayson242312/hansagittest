//c85430339
external function Boolean HasJewelleryInterface();
external procedure CalcSum(val,val,val,val,var val,Integer);
external function Boolean GetItemPriceDiscount3(string,val,var record INVc,string,val,val,val,val,val,string,string,string,string,
                                                var val,var string,var val,var string,var val,var string,Integer,var Boolean,Date,Time,
                                                string,Boolean,var Boolean,string,var string,var val,string,string,var string);
external function Boolean HasItemGroups();
external procedure M4PadString(string,Integer,string,Boolean,var string);
external procedure GetStockValue(string,string,var record ItemStatusVc);//VN
external function val GetStockQty(string,string,Date,Boolean);//VN

procedure SearchItemRnResults(record RcVc RepSpec,Boolean printf,Array string aitem,Array string aitemname,Array val aitemprice,var Integer cnt)
begin
  record INVc INr;
  record LetVc Letr;
  boolean TrHs,testf,loop,continue,enginesearch,testf2;
  string 255 tstr,keystr;
  LongInt pos;
  vector Boolean vfound;

  string 255 curitemname,salesacc,vatcode,tax2code,tax2acc,taxtemplatecode,dummystr;
  val t,s,price,vreb,baseprice,temp,tax2prc;
  Boolean calcprice;
  Integer exportflag,rwcnt,i;
  Boolean dummyf;
  record GeneralOptionBlock GOb;
  val instock; // VN
  record EngineVc Enginer; //RP
  row EngineVc Enginerw;//RP
  record ITVc ITr; // RP
  string 40 prevgroup;
  record PLVc PLr; //RP

  BlockLoad(GOb);
  cnt = 0;
  if (nonblank(RepSpec.f2)) then begin
    keystr = "DICode:" & RepSpec.f2;
  end else begin
    keystr = "Group";
  end;

  pos = 0;

  TrHs = true;
  enginesearch = false; //RP
  prevgroup = ""; //RP

  // while (LoopKey(keystr,INr,1,TrHs)) begin RP
  while (LoopKey(keystr,INr,1,TrHs)) begin
    continue = true; //RP
/*
we searching for any data not just code  
    if (blank(RepSpec.f2)) then begin
      if (nonblank(RepSpec.f1)) then begin
        if (INr.Code!=RepSpec.f1) then begin TrHs = false; end;
      end;
    end;
*/

  //RP Start
  if(NonBlank(RepSpec.f6)) then begin
    enginesearch = true;
    continue = false;
  end;

  if(enginesearch) then begin
    Enginer.Code = RepSpec.f6;
    if(ReadFirstMain(Enginer,1,true)) then begin
      rwcnt = MatRowCnt(Enginer);

      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(Enginer,i,Enginerw);
        if(INr.Code == Enginerw.ArtCode)then begin
          continue = true;
          i = rwcnt;
        end;
      end;
    end;
  end;
  //RP Endpolo v

    if (continue and TrHs) then begin //RP
      testf = true;
      RecordClear(Letr);
      
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 1) then begin
        AddToText(INr.Code,Letr); 
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 2) then begin
        AddToText(INr.Name,Letr);
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 3) then begin
        AddToText(INr.Group,Letr);
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 4) then begin
        AddToText(INr.AlternativeCode,Letr);
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 4) or (RepSpec.ArtMode == 6) then begin //RP - GM Code
        AddToText(INr.UserStr1,Letr);
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 5) then begin
        AddToText(INr.UPrice1,Letr);
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 7) then begin //RP - Creation Date
        AddToText(INr.UserDate1,Letr);
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 8) then begin //TM - Only search when OEM is on 
        AddToText(INr.UserStr3,Letr);
        AddToText(" ",Letr);
      end;
      if (RepSpec.ArtMode == 0) or (RepSpec.ArtMode == 9) then begin //RP - BarCode
        AddToText(INr.BarCode,Letr);
        AddToText(" ",Letr);
      end;        
      if (nonblank(RepSpec.f4)) then begin
        if (INr.Group!=RepSpec.f4) then begin testf = false; end;
      end;
      if (INr.Terminated!=0) then begin
        testf = false;
      end;
      if (INr.NotForSales!=0) then begin
        testf = false;
      end;
      if (testf) then begin
        if (nonblank(RepSpec.f2)) then begin
          testf = false;
          if (nonblank(RepSpec.f1) or nonblank(RepSpec.f6)) then begin //RP
            loop = true;
            pos = 0;
            GetNextSubstring(RepSpec.f1,pos," ",tstr);
            while (loop) begin
              if (StringInText(tstr,Letr)) then begin
                testf = true;
                loop = false;
              end;
              if (loop) then begin
                GetNextSubstring(RepSpec.f1,pos," ",tstr);
                loop = nonblank(tstr);
              end;
            end;          
          end else begin
            testf = true;
          end;
        end else begin
          if (nonblank(RepSpec.f1) or nonblank(RepSpec.f6)) then begin //RP
            loop = true;
            pos = 0;
            GetNextSubstring(RepSpec.f1,pos,"+ ",tstr);
            while (loop) begin
              vfound[tstr] = false;
              GetNextSubstring(RepSpec.f1,pos,"+ ",tstr);
              loop = nonblank(tstr);
            end;

            loop = true;
            pos = 0;
            GetNextSubstring(RepSpec.f1,pos,"+ ",tstr);

            while (loop) begin
              if (StringInText(tstr,Letr)) then begin
                vfound[tstr] = true;
              end;
              if (loop) then begin
                GetNextSubstring(RepSpec.f1,pos,"+ ",tstr);
              end;
              loop = nonblank(tstr);
            end;      
                
            loop = true;
            pos = 0;
            GetNextSubstring(RepSpec.f1,pos,"+ ",tstr);
            testf = nonblank(tstr);
            while (loop) begin
              testf = testf and vfound[tstr];
              GetNextSubstring(RepSpec.f1,pos,"+ ",tstr);
              loop = nonblank(tstr);
            end;
          end;
        end;
      end;
      if(nonblank(RepSpec.f6) and Blank(RepSpec.f1))then begin //RP
        testf = true;
      end;
      if (testf) then begin
        if (printf) then begin
          //RP Start
          if (HasItemGroups) then begin
            if(prevgroup!=INr.Group) then begin
              StartFormat(15);
              OutString(600,0," ",false);
              EndFormat;
              StartFormat(15);
              resetloop(ITr);
              ITr.Code = INr.Group;
              testf2 = readfirstmain(ITr,1,true);
              Gray_divider(0,1);
              OutString(40,0,ITr.Code,false);
              OutString(120,0,ITr.Comment,false);
              EndFormat;
              prevgroup = INr.Group;
            end;
            // OutString(3,0,INr.Group,false); RP
          end;
          // RP

          StartFormat(15);
          switch (RepSpec.f3) begin
            case "IVDClass":       OutString(0,"DCPasteIVItem",INr.Code,false);  
            case "PODClass":       OutString(0,"DCPastePOItem",INr.Code,false);
            case "QTDClass":       OutString(0,"DCPasteQTItem",INr.Code,false);
            case "ORDClass":       OutString(0,"DCPasteOrderItem",INr.Code,false);
            case "StockTakeDClass":OutString(0,"DCPasteStockTakeItem",INr.Code,false);
            case "ProdDClass":     OutString(0,"DCPasteProdItem",INr.Code,false);
            case "RecDClass":      OutString(0,"DCPasteRecItem",INr.Code,false);
            case "VIDClass":       OutString(0,"DCPasteVIItem",INr.Code,false);
            case "POQTDClass":     OutString(0,"DCPastePOQTItem",INr.Code,false);
            case "IntORDClass":    OutString(0,"DCPasteIntORItem",INr.Code,false);
            case "SVODClass":      OutString(0,"DCPasteSVOItem",INr.Code,false);
            case "WODClass":       OutString(0,"DCPasteWOItem",INr.Code,false);
            case "WSDClass":       OutString(0,"DCPasteWSItem",INr.Code,false);
            case "PUDClass":       OutString(0,"DCPastePUItem",INr.Code,false);
            case "SDDClass":       OutString(0,"DCPasteSDItem",INr.Code,false);
            case "SRDClass":       OutString(0,"DCPasteSRItem",INr.Code,false);
            case "StockMovDClass": OutString(0,"DCPasteStockMovItem",INr.Code,false);
            case "RetDClass":      OutString(0,"DCPasteRetItem",INr.Code,false);
            case "IVCashDClass":   OutString(0,"DCPasteIVCashItem",INr.Code,false);//RKG;
            otherwise
              OutString(0,"DblINVc",INr.Code,false);
          end;
          OutString(60,0,INr.Name,false); //RP

          if (HasJewelleryInterface) then begin
            OutString(4,0,INr.UPrice1,true);
            OutImage(440,60,30,INr);
          end else begin
            OutString(330,0,INr.UserStr2,false);//VN
            instock = GetStockQty(INr.Code,RepSpec.AccStr,CurrentDate,false);//VN
            OutVal(370,0,instock,M4Val,false);//VN
            OutString(405,0,INr.UPrice1,false);

            //RP - STart
            PLr.ArtCode = INr.Code;
            PLr.PLCode = "CL1";

            if(ReadFirstMain(PLr,2,true)) then begin
              OutString(445,0,PLr.ExVatPrice,false);
            end;
            //RP - End
          end;
          EndFormat;
        end else begin
          if (cnt>100) then begin
            cnt = 0;
            aitem[cnt] = "";
            aitemname[cnt] = USetStr(24160);
            aitemprice[cnt] = 0;
            TrHs = false;
          end else begin
/*          
            M4PadString(INr.Code,17," ",false,tstr);
            tstr = tstr & INr.Name;
            aitem[cnt] = tstr;
*/            
            aitem[cnt] = INr.Code;
            aitemname[cnt] = INr.Name;
            if (printf==false) then begin
               GetItemPriceDiscount3(INr.Code,1.00,INr,RepSpec.CurncyCode,
                            blankval,blankval,blankval,blankval,blankval,
                            RepSpec.Language,RepSpec.f5,RepSpec.LastAcc,RepSpec.AccStr,
                            price,curitemname,vreb,vatcode,baseprice,salesacc,
                            exportflag,calcprice,RepSpec.d1,RepSpec.sStartTime,RepSpec.FirstAcc,true,dummyf,RepSpec.TransStr,
                            tax2code,tax2prc,RepSpec.Stext,RepSpec.ObjStr,taxtemplatecode);
              CalcSum(1.00,price,blankval,vreb,price,GOb.UseDiscount);
              aitemprice[cnt] = price;
            end;
          end;
        end;
        cnt = cnt + 1;
      end;
    end;
  end;
  if (cnt==0) then begin
    if (printf==false) then begin
//      aitem[cnt] = USetStr(19390);
      aitem[cnt] = " ";
      aitemname[cnt] = USetStr(19390);
      cnt = cnt + 1;
    end;
  end;
  return;
end;

global
procedure SearchItemRn(record RcVc RepSpec)
begin
  string 255 tstr;
  integer cnt,rw; 
  Array string 255 aitem;
  Array string 255 aitemname;
  Array val aitemprice;
 
  rw = 1;
  StartReportJob(USetStr(13500));
  if (nonblank(RepSpec.f1) or nonblank(RepSpec.f6)) then begin //RP
    switch (RepSpec.ArtMode) begin
      case 0:tstr = USetStr(13501) & RepSpec.f1;
      case 1:tstr = USetStr(13502) & RepSpec.f1;
      case 2:tstr = USetStr(13503) & RepSpec.f1;
      case 3:tstr = USetStr(13504) & RepSpec.f1;
      case 4:tstr = USetStr(13505) & RepSpec.f1;
      case 5:tstr = USetStr(13506) & RepSpec.f1;
      case 6:tstr = "GM Code: " & RepSpec.f1;//VN
      case 7:tstr = "Creation Date: " & RepSpec.f1;//VN
      case 7:tstr = "Creation Date: " & RepSpec.f1;//VN
    end;
    Header(rw,tstr,1);
    rw = rw + 1;  
  end;
  EndHeader;
  if (blank(RepSpec.f1)) and (blank(RepSpec.f2) and blank(RepSpec.f6)) then begin //RP
    goto LSearchItemRn;
  end;
  SetRepCol(2,90);
  SetRepCol(3,180);//VN Changed from 300
    if (HasJewelleryInterface) then begin
    SetRepCol(4,400);  
  end;
  SetRepCol(4,270);//VN
  SetRepCol(5,360);//VN
  StartFormat(15);
  OutString(0,0,USetStr(13507),false);
  OutString(60,0,USetStr(13508),false);
  if (HasItemGroups) then begin
    OutString(120,0,USetStr(13509),false)
  end;
  OutString(330,0,"Yr. Model",false);//VN
  OutString(370,0,"Loc. Qty",false);//VN
  if (HasJewelleryInterface) then begin
    OutString(4,0,USetStr(13510),true);
  end else begin
  OutString(405,0,USetStr(13510),false);
  OutString(445,0,"Exc. VAT Pr.",false);
  end;
  EndFormat;
  Gray_Divider(0,1);
  SearchItemRnResults(RepSpec,true,aitem,aitemname,aitemprice,cnt);
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(13511),false);
  OutVal(100,0,cnt,M40Val,true);
  EndFormat;
  
LSearchItemRn:;
  EndJob;
  return;
end;

global
procedure INNPTSSClassArrayOnOpen(record RcVc RepSpec,var Array string aitem,var Array string aitemname,var Array val aitemprice,var Integer acnt)
begin

  SearchItemRnResults(RepSpec,false,aitem,aitemname,aitemprice,acnt);
  return;
end;
