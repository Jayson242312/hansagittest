// external inner procedure ExtractObj(string,var Integer,var string);
// external inner function Boolean TouchScreenLookVertical();
// external inner procedure AddTouchScreenPasteButton(integer,integer,Integer,Integer,string,integer,string,integer);
// external inner function Boolean HasJewelleryInterface();

// global
// procedure DrawPOSButtons_ENG(longint ah2,longint av,longint width,longint height,longint dh,longint dv,record POSButtonsVc POSBr,string ovrclass,Integer stackspace)
// begin
//   row POSButtonsVc POSBrw;
//   record POSButtonsVc POSB2r;
//   Integer i,rwcnt;
//   Real h,v,v2;
//   //hs,h1,h2,h3,h4,h5,h6,h7,hm,v2,l,vs,vm,f,t,x;
//   string 255 procstr;
//   Integer wn;
//   boolean ItemPage;
//   string 60 ostr;
//   Integer pos;
//   string 255 stack;
//   string 255 lblstr;
//   string 255 tagstr;
//   integer selitemline,LateralButtonAmtMax;
//   longint heighttemp,ah;
//   record LocalMachineBlock LMb;
  
//   BlockLoad(LMb);
//   heighttemp = height;
//   ah = ah2;
//   h = ah;
//   v = av;

//   ItemPage = false;
//   if (ItemPage) then begin
//     SoftEditField(h=80,v+=49, 80,"Item",Normal ,"touchscreenitem",false,INSClass,M4Str,255);
//     //  SoftEditField(h+=140,v, 80,"Serial No.",Normal ,"touchscreenitemserialnr",false,SerialNrSClass,M4Str,255);
//     //no stock updating    SoftEditField(h+=120,v, 40,"Qty",Normal ,"touchscreenitemqty",false,0,M4Str,255);
//     SoftEditField(h+=120,v, 60,"Price",Normal ,"touchscreenitemprice",false,0,M4Str,255);
//     SoftEditField(h=80,v+=20,-500,"",ViewOnly ,"touchscreenitemname",false,0,M4Str,255);
//   end;
  
//   //outside of screen
//   SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpage",false,0,M4Str,255);
//   SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpagestack",false,0,M4Str,255);
//   SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowprinterstack",false,0,M4Str,255);
//   SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenwindowpageprevious",false,0,M4Str,255);
//   //SoftEditField(2000,2000,70,"",ViewOnly ,"touchscreenselecteditemtag",false,0,M4Str,255);
  
//   wn = CurWindow;
//   stack = GetWindowString(wn,"touchscreenwindowpagestack");
  
//   if (stack=="") then begin
//     //PutWindowString(wn,"touchscreenwindowpage",1)
//     //PutWindowString(wn,"touchscreenwindowpagestack",1)
//     stack = "1";
//   end;
  
//   pos = 0;
//   ExtractObj(stack,pos,ostr);
//   h = ah;
//   v = v + stackspace;
//   if (GuiType==kGuiAndroid) then begin
//     heighttemp = heighttemp + 8;
//     v = v - 55; v2 = v;
//   end;  
//   if (GuiType==kGuiiPhone) then begin
//     heighttemp = heighttemp + 8;
//   end;
//   while (nonblank(ostr)) begin
//     if (ovrclass<>"") then begin
//       procstr = "IVCashDClass";
//     end else begin
//       procstr = POSBr.WindowClass;
//     end;
    
//     procstr = procstr & "TouchScreenStackButton";
    
//     POSB2r.WindowClass = POSBr.WindowClass;
//     POSB2r.POSButtonGroupCode = POSBr.POSButtonGroupCode;
//     POSB2r.Page = StringToInt(ostr);
    
//     if (ReadFirstMain(POSB2r,3,true)) then begin
//       lblstr = POSB2r.Comment;
//     end else begin
//       lblstr = "Page: " & ostr;
//     end;

//     if (POSB2r.KeyCode!=kFunctionKeyNone) then begin
//       lblstr = lblstr & "<BR>";
//       switch (POSB2r.Modifiers) begin
//         case kKeyModifierNone:
//         case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
//         case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
//         case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
//       end;
//       lblstr = lblstr & "F" & POSB2r.KeyCode;
//     end;

 
//     ColourPushButtonTag(h,v,h + width,v + heighttemp,procstr,lblstr,2,ostr); // time color no. 2

//     if (GuiType==kGuiAndroid) then begin
//       v = v + heighttemp + dv;
//     end else begin
//       h = h + width + dh;
//     end;
//     ExtractObj(stack,pos,ostr);
//   end;

//   //v = v - 80;
//   v = v + heighttemp + dv;
//   h = ah;

//   //ButtonFrame(h,v+=82,400,0,"");
//   switch (LMb.POSPanelSize) begin
//     case kPOSPanelSizeSmall:
//       ButtonFrame(h,v+=5,795,0,"");
//     otherwise
//       ButtonFrame(h,v+=5,400,0,"");    
//   end;

//   if (GuiType!=kGuiiPhone or GuiType==kGuiAndroid) then begin
//     v = v + 10;
//   end else begin
//     v = v - dv;
//     heighttemp = heighttemp - 8;
//   end;
  
//   if (GuiType==kGuiAndroid) then begin
//     v = v2;
//     h = h + width + dh + 8;
//     ah = h;
//   end;
//   switch (GuiType) begin
//     case kGuiiPhone: // Possible need for kGuiiPad ? Use CompileType==ctiPad if so
//       if (TouchScreenLookVertical) then begin
//         LateralButtonAmtMax = 4;
//       end else begin
//         LateralButtonAmtMax = 7;
//       end;
//     case kGuiAndroid:
//         LateralButtonAmtMax = 4;
//     otherwise
//       switch (LMb.POSPanelSize) begin
//         case kPOSPanelSizeSmall:
//           LateralButtonAmtMax = 8;
//         otherwise
//           LateralButtonAmtMax = 4;
//       end;
//   end;

//   rwcnt = MatRowCnt(POSBr);

//   for (i = 0; i<rwcnt; i = i + 1) begin
//     MatRowGet(POSBr,i,POSBrw);
//     procstr = POSBr.WindowClass;

//     if (procstr=="NPTSIVCashDClass") then begin
//       procstr = "IVCashDClass";
//     end;

//     lblstr = POSBrw.Label;

//     if (POSBrw.KeyCode<>kFunctionKeyNone) then begin
//       lblstr = lblstr & "<BR>";
//       switch (POSbrw.Modifiers) begin
//         case kKeyModifierNone:
//         case kKeyModifierCtrl: lblstr = lblstr & USetStr(24185) & "+";
//         case kKeyModifierShift: lblstr = lblstr & USetStr(24186) & "+";
//         case kKeyModifierCtrlShift: lblstr = lblstr & USetStr(24185) & "+" & USetStr(24186) & "+";
//       end;
//       lblstr = lblstr & "F" & POSBrw.KeyCode;
//     end;

//     switch (POSBrw.ButtonType) begin
//       case kPOSButtonTypeItem:
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeInstructions:
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeModifier:
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeLevelTop:
//         procstr = procstr & "PageTop";
//         /*
//         case kPOSButtonTypeLevelUp:
//         procstr = procstr & "LevelUp";
//         */
//       case kPOSButtonTypeGotoPage:
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       /*
//       case kPOSButtonTypeLevelDown:
//         procstr = procstr & "LevelDown";
//       */
//       case kPOSButtonTypeCashPayment:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypePayment:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypePaymentButtonsLayout:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypePaymentOneMode:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeChequePayment:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeCreditCardPayment:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeCreditCardPaymentReversal:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeDebitCardPayment:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeGiftVoucherPayment:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeOnAccountPayment:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeOnHotelGuestAccount:  
//         procstr = procstr & "TouchScreenPasteButton";
//         //procstr = procstr & i+1;
//         tagstr = i + 1;
//       case kPOSButtonTypeFinish:  
//         procstr = procstr & "TouchScreenFinishButton";
//       case kPOSButtonTypeVoidRow:  
//         procstr = procstr & "TouchScreenVoidRow";
//         tagstr = POSBrw.Code;
//       case kPOSButtonTypeAmendLine:  
//         procstr = procstr & "TouchScreenAmendLine";
//       case kPOSButtonTypeAddOrderDiscount:  
//         procstr = procstr & "TouchScreenAddOrderDiscount";
//       case kPOSButtonTypeKitchenOrder:  
//         procstr = procstr & "TouchScreenKitchenOrder";
//       case kPOSButtonTypeLoyaltyCard:  
//         procstr = procstr & "TouchScreenLoyaltyCard";
//       case kPOSButtonTypeEnterReferenceNumber:  
//         procstr = procstr & "TouchScreenEnterReferenceNumber";
//       case kPOSButtonTypeSeniorCitizenDiscount:  
//         procstr = procstr & "TouchScreenSeniorCitizenCard";
//       case kPOSButtonTypeSplitItem:  
//         procstr = procstr & "TouchScreenSplitItem";
//       case kPOSButtonTypeTransfertoSL:  
//         procstr = procstr & "TouchScreenTransfertoSL";
//       case kPOSButtonTypeTransfertoInvoice:  
//         procstr = procstr & "TouchScreenTransfertoInvoice";
//       case kPOSButtonTypeTransfertoOrder:  
//         procstr = procstr & "TouchScreenTransfertoOrder";
//       case kPOSButtonTypeTransfertoQuotation:  
//         procstr = procstr & "TouchScreenTransfertoQuotation";
//       case kPOSButtonTypeInvalidateInvoice:  
//         procstr = procstr & "TouchScreenInvalidateInvoice";
//       case kPOSButtonTypeAddCommentLine:  
//         procstr = procstr & "TouchScreenCommentLine";
//       case kPOSButtonTypeAddHeaderLine:  
//         procstr = procstr & "TouchScreenHeaderLine";
//       case kPOSButtonTypeAddHiddenLine:  
//         procstr = procstr & "TouchScreenHiddenLine";
//       case kPOSButtonTypeAddSubtotalLine:  
//         procstr = procstr & "TouchScreenSubtotalLine";
//       case kPOSButtonTypeInvoiceStatus:  
//         procstr = procstr & "TouchScreenInvoiceStatus";
//       case kPOSButtonTypeOpenNLTransaction:  
//         procstr = procstr & "TouchScreenOpenNLTransaction";
//       case kPOSButtonTypeSendToFiscalDevice:  
//         procstr = procstr & "TouchScreenSendToFiscalDevice";
//       case kPOSButtonTypePrintProformaInvoice:  
//         procstr = procstr & "TouchScreenProformaInvoice";
//       case kPOSButtonTypeConnectToPrepayment:  
//         procstr = procstr & "TouchScreenConnectToPrepayment";
//       case kPOSButtonTypeCreateCashOut:  
//         procstr = procstr & "TouchScreenCreateCashout";
//       case kPOSButtonTypeCreateCashin:  
//         procstr = procstr & "TouchScreenCreateCashin";
//       case kPOSButtonTypeCreateCreditNote:  
//         procstr = procstr & "TouchScreenCreateCreditNote";
//       case kPOSButtonTypeCreateCorrectionInvoice:  
//         procstr = procstr & "TouchScreenCreateCorrectionInvoice";
//       case kPOSButtonTypeEditItemRecord:  
//         procstr = procstr & "TouchScreenEditItemRecord";
//       case kPOSButtonTypeSendEMail:  
//         procstr = procstr & "TouchScreenSendEmail";
//       case kPOSButtonTypePreviousSalesPrices:  
//         procstr = procstr & "TouchScreenPreviousSalesPrices";
//       case kPOSButtonTypeEditCustomerRecord:  
//         procstr = procstr & "TouchScreenEditCustomerRecord";
//       case kPOSButtonTypeEditDate:  
//         procstr = procstr & "TouchScreenEditDate";
//       case kPOSButtonTypeCreateCreditEMail:  
//         procstr = procstr & "TouchScreenCreateCreditEMail";
//       case kPOSButtonTypeCreateActivity:  
//         procstr = procstr & "TouchScreenCreateActivity";
//       case kPOSButtonTypeOpenCalendar:  
//         procstr = procstr & "TouchScreenOpenCalendar";
//       case kPOSButtonTypeChangeTerms:  
//         procstr = procstr & "TouchScreenChangeTerms";
//       case kPOSButtonTypeChangeAddress:  
//         procstr = procstr & "TouchScreenChangeAddress";
//       case kPOSButtonTypeChangeDiscountMatrix:  
//         procstr = procstr & "TouchScreenChangeDiscountMatrix";
//       case kPOSButtonTypeCashupReport:  
//         procstr = procstr & "TouchScreenCashupReport";
//       case kPOSButtonTypeOpenSession:  
//         procstr = procstr & "TouchScreenOpenSession";
//       case kPOSButtonTypeCloseSession:  
//         procstr = procstr & "TouchScreenCloseSession";
//       case kPOSButtonTypeCorrectionInvoice:  
//         procstr = procstr & "TouchScreenCorrectionInvoice";
//       case kPOSButtonTypePutCashFloat:  
//         procstr = procstr & "TouchScreenPutCashFloat";
//       case kPOSButtonTypeGetCashFloat:  
//         procstr = procstr & "TouchScreenGetCashFloat";
//       case kPOSButtonTypeManagerDiscountOverride:  
//         procstr = procstr & "TouchScreenManagerDiscountOverride";
//       case kPOSButtonTypeOpenTaxMatrix:  
//         procstr = procstr & "TouchScreenOpenTaxMatrix";
//       case kPOSButtonTypeReturn:  
//         procstr = procstr & "TouchScreenReturn";
//       case kPOSButtonTypeCreditNote:  
//         procstr = procstr & "TouchScreenCreditNote";
//       case kPOSButtonTypeReturnReason:  
//         procstr = procstr & "TouchScreenReturnReason";
//         tagstr = POSBrw.Code;
//       case kPOSButtonTypeReturnInvoiceNo:  
//         procstr = procstr & "TouchScreenReturnInvNo";
//         tagstr = POSBrw.Code;
//       case kPOSButtonTypeLookupSerialNr:  
//         procstr = procstr & "TouchScreenLookupSerialNr";
//       case kPOSButtonTypeMainSerialNr:  
//         procstr = procstr & "TouchScreenMainSerialNr";
//       case kPOSButtonTypeAppleWarrantyStatusCheck:  
//         procstr = procstr & "TouchScreenAppleWarrantyStatusCheck";
//       case kPOSButtonTypeAppleCreateAEOrder:  
//         procstr = procstr & "TouchScreenAppleCreateAEOrder";
//       case kPOSButtonTypeAppleCancelAEOrder:  
//         procstr = procstr & "TouchScreenAppleCancelAEOrder";
//       case kPOSButtonTypeLogin:  
//         procstr = procstr & "TouchScreenButtonLogin";
//       case kPOSButtonTypeDeleteItem:
//         procstr = procstr & "TouchScreenDeleteItem";
//       case kPOSButtonTypeLoyaltyPointsPayment:
//         procstr = procstr & "TouchScreenLoyaltyPointsPayment";
//       case kPOSButtonTypeLoyaltyPointsBonus:
//         procstr = procstr & "TouchScreenLoyaltyPointsBonus";
//       case kPOSButtonTypeGiftVoucherSales:
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeCreateGC:
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeGiftReceipt:
//         procstr = procstr & "TouchScreenGiftReceipt";
//       case kPOSButtonTypePasteQuotation:  
//         procstr = procstr & "TouchScreenPasteQT";
//       case kPOSButtonTypePasteSalesOrder:  
//         procstr = procstr & "TouchScreenPasteOR";
//       case kPOSButtonTypePauseSales:  
//         procstr = procstr & "TouchScreenPauseSales";
//       case kPOSButtonTypeResumeSales:  
//         procstr = procstr & "TouchScreenResumeSales";
//       case kPOSButtonTypeOverrideOfficialSerNr:  
//         procstr = procstr & "TouchScreenOverrideOfficialSerNr";
//       case kPOSButtonTypePriceLookup:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypePOSCommand:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeCustomerSearch:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeSelectSalesman:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeBaggerSearch:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeSupervisorSearch:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeVolumetricBarCodeScan:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeSalesAssistant:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeItemSearch:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeItemStatus:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeOpenCashDrawer:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypOpenInvoices:  
//         procstr = procstr & "TouchScreenOpenInvoices";
//       case kPOSButtonTypSaveInvoice:  
//         tagstr = i + 1;
//         procstr = procstr & "TouchScreenPasteButton";
//       case kPOSButtonTypeBookings:  
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypePrintInvoice:  
//         procstr = procstr & "TouchScreenPrint";
//       case kPOSButtonTypePrintOrder:
//         procstr = procstr & "TouchScreenPrint";
//       case kPOSButtonTypePrintFireOrder:  
//         procstr = "RestAccPrintFireOrder";
//       case kPOSButtonTypePrintCancellation:  
//         procstr = "RestAccPrintCancel";
//       case kPOSButtonTypePrintOrderToKitchen:  
//         procstr = "RestAccPrintToKitchen";
// //      case kPOSButtonTypeOpenCashDrawer:  //already above
// //        procstr = "OpenCashDrawer";
//       case kPOSButtonTypeCalculateTip:  
//         procstr = "RestAccTip";
//       case kPOSButtonTypeServiceCharge:  
//         procstr = "RestAccServiceCharge";
//       case kPOSButtonTypeHotelGuests:  
//         procstr = "StayingTool";
//       case kPOSButtonTypeSetTable:  
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeOpenRecord:  
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeSetCovers:  
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeSetBarTabClass:  
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeMergeBarTabs:  
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeMoveToBarTab:  
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeSplitBarTabs:  
//         procstr = procstr & "TouchScreenPasteButton";
//         tagstr = i + 1;
//       case kPOSButtonTypeSpecialMenu:  
//         procstr = procstr & "TouchScreenSpecialMenu";
//         tagstr = POSBrw.Code;
//       case kPOSButtonTypeReprintReceipt:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeXReading:
//         procstr = procstr & "TouchScreenXReading";
//       case kPOSButtonTypeYReading:
//         procstr = procstr & "TouchScreenYReading";
//       case kPOSButtonTypeZReading:
//         procstr = procstr & "TouchScreenZReading";
//       case kPOSButtonTypeAllInvoices:
//         procstr = procstr & "TouchScreenAllInvoices";
//       case kPOSButtonTypeSyncNow:
//         procstr = procstr & "TouchScreenSyncNow";
//       case kPOSButtonTypeRunReportOnServer:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeFinishAndPrint:  
//         procstr = procstr & "TouchScreenFinishAndPrintButton";      
//       case kPOSButtonTypePrintPreview:  
//         procstr = procstr & "TouchScreenPrintPreview";         
//       case kPOSButtonTypeInsertFreeTextOnMatrix:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeReprintLastCCSlip:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeConnectToCCTerminal:
//         AddTouchScreenPasteButton(h,v,width,heighttemp,procstr,i+1,lblstr,POSBrw.colnr);
//         procstr = "";
//       case kPOSButtonTypeBlank:
//         goto LLDrawPOSButtons_ENG;
//     end;
    
//     if (procstr<>"") then begin
//       if (LMb.POSShowButtonPictures) then begin
//         POSButtonWithPicture(h,v,h + width,v + heighttemp,procstr,lblstr,POSBrw.colnr,tagstr,"POSButtonPictureVc",POSBrw.POSButtonPictureCode);
//       end else begin
//         if (tagstr<>"") then begin
//           ColourPushButtonTag(h,v,h + width,v + heighttemp,procstr,lblstr,POSBrw.colnr,tagstr);
//         end else begin
//           ColourPushButton(h,v,h + width,v + heighttemp,procstr,lblstr,POSBrw.colnr);
//         end;
//       end;
//     end;
//   LLDrawPOSButtons_ENG:;   
//     h = h + width + dh;
//     if (Mod(i+1,LateralButtonAmtMax)==0) then begin
//       v = v + heighttemp + dv;
//       h = ah;
//     end;
//   end;
  
//   return;
// end;


// function LongInt POSButtonsNeededHeight(LongInt width,LongInt height,LongInt dh,LongInt dv,record POSButtonsVc POSBr,Integer stackspace,Integer minrows,Integer maxrows)
// begin
//   Integer i,rwcnt,rownr;
//   LongInt h,v;
//   Integer wn;
//   string 60 ostr;
//   Integer pos;
//   string 255 stack;
//   Integer LateralButtonAmtMax;
//   LongInt heighttemp;
//   record LocalMachineBlock LMb;
  
//   BlockLoad(LMb);
//   heighttemp = height;
//   h = 0;
//   v = 0;
  
//   wn = CurWindow;
//   stack = GetWindowString(wn,"touchscreenwindowpagestack");
  
//   if (stack=="") then begin
//     stack = "1";
//   end;
  
//   pos = 0;
//   ExtractObj(stack,pos,ostr);
//   v = v + stackspace;
//   if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
//     heighttemp = heighttemp + 8;
//   end;
//   v = v + heighttemp + dv;

//   if (GuiType!=kGuiiPhone and GuiType!=kGuiAndroid) then begin
//     v = v + 10;
//   end else begin
//     v = v - dv;
//     heighttemp = heighttemp - 8;
//   end;
  
//   if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin    // Possible need for kGuiiPad ?
//     if (TouchScreenLookVertical) then begin
//       LateralButtonAmtMax = 4;
//     end else begin
//       LateralButtonAmtMax = 7;
//     end;  
//   end else begin
//     switch (LMb.POSPanelSize) begin
//       case kPOSPanelSizeSmall:
//         LateralButtonAmtMax = 8;
//       otherwise
//         LateralButtonAmtMax = 4;
//     end;
//   end;
  
//   rownr = 0;
//   rwcnt = MatRowCnt(POSBr);

//   for (i = 0; i<rwcnt or rownr<minrows; i = i + 1) begin  
//     h = h + width + dh;
//     if (Mod(i+1,LateralButtonAmtMax)==0) then begin
//       v = v + heighttemp + dv;
//       h = 0;
//       rownr = rownr + 1;
//       if (rownr>=maxrows) then begin
//         i = i + 1;
//         goto LPOSButtonsNeededHeight;
//       end;
//     end;
//   end;
  
// LPOSButtonsNeededHeight:;
//   if (Mod(i,LateralButtonAmtMax)==0) then begin
//     v = v + (heighttemp + dv) * 0.5;
//   end else begin
//     v = v + (heighttemp + dv) * 1.5;
//   end;
  
//   POSButtonsNeededHeight = v;
// end;

// global
// procedure DrawPOSInterface_ENG(string bc1,string bc2,record POSButtonsVc POSBr,Integer acnt,string ovrclass,Integer stackspace)
// begin
//   record LocalMachineBlock LMb;
//   record CashierDefBlock CDb;

//   longint h,v,i,h4,tx,ty,bx,by,wn,dh,dv,height,width,btnpnlh;
//   Integer minrows,maxrows,stackspaceh,imageFrameSz,imageFrameX;
  
//   BlockLoad(LMb);
//   BlockLoad(CDb);

//   stackspaceh = stackspace;
//   if (HasJewelleryInterface) then begin stackspaceh = stackspaceh + 30; end;
//   h = 20; v = 26;
  
//   //h2 = -150; h3 = -70;
  
//   h4 = -24;
//   if (LMb.WideScrollBars!=0) then begin
//     h4 = -44;
//   end;
  
//   switch (GuiType) begin
//     case kGuiiPhone:
//       dh = 3; dv = 3; height = 70; width = 101;
//       if (TouchScreenLookVertical) then begin
//         minrows = 1; maxrows = 3; // Should perhaps come from setting?
//       end else begin
//         minrows = 3; maxrows = 6; // Should perhaps come from setting?
//       end;
//       btnpnlh = POSButtonsNeededHeight(width,height,dh,dv,POSBr,stackspaceh,minrows,maxrows);
//     otherwise
//       dh = 2; dv = 5; height = 55; width = 98;
//   end;
  
//   if (GuiType==kGuiiPhone) then begin
//     tx = 0; 
//     wn = CurWindow;
//     if (wn>0) then begin
//       switch (GetWindowClass(wn)) begin
//         case "RestAccDClass": ty = 120; by = -345; bx = -8; h = 8; v = 525;
//         otherwise
//           if (TouchScreenLookVertical) then begin
//             ty = 8; by = -130; bx = -430; h = -420; v = -85;
//           end else begin
//             switch (LMb.TouchScreenLookPicture) begin
//               case 1: 
//                 by = -445;
//               otherwise
//                 by = -345; 
//             end;
//             ty = 120; bx = -1;  h = 20; v = 517;
//           end;
//       end;
//       v = -btnpnlh;
//       by = v + stackspaceh - 40;
//     end;  
//   end else begin
//     // DrawPOSStringList();
//     switch (LMb.POSButtonsPosition) begin
//       case kPOSButtonsPositionLeft:
//         tx = 420; 
//         ty = 180;
//         bx = h4;
//         by = -10;    
//         h = 8;      
//         switch (LMb.POSPanelSize) begin
//           case kPOSPanelSizeSmall:
//             tx = tx+395;
//         end;
//       case kPOSButtonsPositionRight:
//         tx = 8; 
//         ty = 180;
//         bx = -430;
//         by = -10;        
//         h = -410;
//         switch (LMb.POSPanelSize) begin
//           case kPOSPanelSizeSmall:
//             bx = bx-395;
//             h = h-395;
//         end;
//     end;
//     if (GuiType==kGuiMetro) then begin
//       ty = 120;
//     end;
//     if (GuiType==kGuiAndroid) then begin
//        tx = 0; ty = 8; bx = 380;  by = -230; v = 0; h = 390; height = 84; width = 155; dh = 2; dv = 2;
//     end;
//   end;
//   if (LMb.POSButtonHeight>0) then begin height = LMb.POSButtonHeight; end;
//   if (LMb.POSButtonWidth>0) then begin width = LMb.POSButtonWidth; end;
  
//   DataList(tx,ty,bx,by,"receipt");

//   switch (GuiType) begin
//     case kGuiiPhone:
//       if (TouchScreenLookVertical) then begin
//         DataListColumn(1,6,90,AdjLeft,"qty","Qty",M4Val);
//         DataListColumn(1,95,-130,AdjLeft,"artcode","Code",M4Code);
//         DataListColumn(1,-125,-8,AdjRight,"rowsum","Sum",M4Val);
//         DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);
//         DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
//         DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
//         DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
//         DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
//         DataListColumn(3,324,360,AdjLeft,"s","",M4Str);
//       end else begin
//         DataListColumn(1,8,90,AdjLeft,"artcode","Code",M4Code);
//         DataListColumn(1,105,-340,AdjLeft,"spec","Description",M4Str);
//         DataListColumn(1,-335,-270,AdjRight,"qty","Qty",M4Val);
//         DataListColumn(1,-265,-190,AdjRight,"price","Price",M4Val);
//         DataListColumn(1,-185,-130,AdjRight,"rebate","Disc.",M4Val);
//         DataListColumn(1,-125,-8,AdjRight,"rowsum","Sum",M4Val);
//         //DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.

//         DataListColumn(2,6,-1,AdjLeft,"spec","",M4Str);

//         DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
//         DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
//         DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
//         DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
//         DataListColumn(3,324,360,AdjLeft,"s","",M4Str);
//       end;
//     case kGuiAndroid:
//       DataListColumn(1,8,70,AdjLeft,"artcode","Code",M4Code);
//       DataListColumn(1,72,180,AdjLeft,"spec","Description",M4Str);
//       DataListColumn(1,185,215,AdjRight,"qty","Qty",M4Val);
//       DataListColumn(1,222,275,AdjRight,"price","Price",M4Val);
//       DataListColumn(1,280,320,AdjRight,"rebate","Disc.",M4Val);
//       DataListColumn(1,325,-1,AdjRight,"rowsum","Sum",M4Val);
//       //DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.

//       DataListColumn(2,6,-1,AdjLeft,"spec","",M4Str);

//       DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
//       DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
//       DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
//       DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
//       DataListColumn(3,324,360,AdjLeft,"s","",M4Str);
//     otherwise
//       DataListColumn(1,6,90,AdjLeft,"artcode","Code",M4Code);
//       if (HasJewelleryInterface) then begin
//         if (POSBr.WindowClass=="IVDClass") then begin//in 71 should be in for SL and POS Invoice
//           DataListColumn(1,91,-500,AdjLeft,"spec","Description",M4Str);
//           DataListColumn(1,-495,-460,AdjRight,"vatcode","#V-Cd#",M4Str);
//           DataListColumn(1,-455,-380,AdjRight,"location","Location",M4Str);
//         end else begin
//           DataListColumn(1,91,-460,AdjLeft,"spec","Description",M4Str);
//           DataListColumn(1,-455,-380,AdjRight,"vatcode","#V-Cd#",M4Str);
//         end;
//         DataListColumn(1,-375,-300,AdjRight,"qty","Quantity",M4Val);
//         DataListColumn(1,-295,-210,AdjRight,"price","Price",M4Val);
//         DataListColumn(1,-205,-150,AdjRight,"rebate","Discount",M4Val);
//         DataListColumn(1,-145,-21,AdjRight,"rowsum","Sum",M4Val);
//       end else begin
//         DataListColumn(1,91,-340,AdjLeft,"spec","Description",M4Str);
//         DataListColumn(1,-335,-270,AdjRight,"qty","Quantity",M4Val);
//         DataListColumn(1,-265,-190,AdjRight,"price","Price",M4Val);
//         DataListColumn(1,-185,-130,AdjRight,"rebate","Disc.",M4Val);
//         DataListColumn(1,-125,-21,AdjRight,"rowsum","Sum",M4Val);
//       end;
//       DataListColumn(1,-20,-6,AdjRight,"","",M4Str); // Added to provide some extra space for scroll bar.

//       DataListColumn(2,6,-6,AdjLeft,"spec","",M4Str);

//       DataListColumn(3,6,60,AdjLeft,"artcode1","",M4Code);
//       DataListColumn(3,64,160,AdjLeft,"spec","",M4Str);
//       DataListColumn(3,164,210,AdjRight,"qty","",M4Val);
//       DataListColumn(3,214,320,AdjLeft,"artcode2","",M4Code);
//       DataListColumn(3,324,360,AdjLeft,"s","",M4Str);

// /*
//       DataListColumn(4,6,60,AdjLeft,"qtytotal","",M4Str);
//       DataListColumn(4,64,160,AdjLeft,"subtotaltext","",M4Str);
//       DataListColumn(4,164,210,AdjRight,"subtotal","",M4Val);
//       DataListColumn(4,214,320,AdjLeft,"vattotaltext","",M4Str);
//       DataListColumn(5,324,360,AdjRight,"vattotal","",M4Val);
// */      
//   end;
//   if (GuiType==kGuiiPhone) then begin
//     if (TouchScreenLookVertical==false and GetWindowClass(wn)!="RestAccDClass") then begin
//       SoftEditField(-226,by+5,200,"Item/Command"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
//     end;
//   end;
//   if (GuiType==kGuiAndroid) then begin
//     if (TouchScreenLookVertical==false and GetWindowClass(wn)!="RestAccDClass") then begin
//       StaticTextWithColor(20,by+5,"$POSfoot_rebate",false,9,patM4black);
//       StaticTextWithColor(bx-10,by+5,"$POSfoot_subtotal",true,9,patM4black);
//       StaticTextWithColor(20,by+28,"$POSfoot_CHANGE",false,9,patM4black);
//       StaticTextWithColor(bx-10,by+28,"$POSfoot_VAT",true,9,patM4black);
//       StaticTextWithColor(bx-10,by+51,"$POSfoot_total",true,9,patM4black);
//       SoftEditField(20,by+60,200,"Item/Command"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
//     end;
//   end;
  
//   // DrawPOSData();
//   if (CDb.ItemPictureCashier!=kPOSItemPictureOff) then begin
//     imageFrameSz = 150;
//     if (LMb.POSButtonsPosition==kPOSButtonsPositionLeft) then begin
//       imageFrameX = 20;
//     end else begin
//       imageFrameX = -20-imageFrameSz;
//     end;
//     Pict_Field(imageFrameX,-40-imageFrameSz,imageFrameX+imageFrameSz,-40,"");
//   end;

  
//   if (acnt>0) then begin
//     DrawPOSButtons_ENG(h,v,width,height,dh,dv,POSBr,ovrclass,stackspaceh);
//   end else begin
//     RecordClear(POSBr);
//     DrawPOSButtons_ENG(h,v,width,height,dh,dv,POSBr,ovrclass,stackspaceh);
//   end;
  
//   //selitemline = StringToInt(GetWindowString(wn,"touchscreenselecteditemtag"));
//   //SetSelectedListLine(wn,selitemline);
  
//   return;
// end;
