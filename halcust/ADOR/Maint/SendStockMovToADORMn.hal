external procedure AddTextToAreaNL(string,area);
external updating procedure SendToAdor(area,var record ADORQueueVc,string);
external function string 255 GMSFromatDate(date);

global
updating procedure SendStockMovToADOR(record StockMovVc StockMovr,record ADORQueueVc ADORQueuer)
begin
  area apost,aresponse;
  record StockMovVc StockMov2r;
  record HALAdorBlock ADRb;
  row StockMovVc StockMovrw;
  row ADORQueueVc ADORQueuerw;
  integer rwcnt,i,serno;
  string 255 filename;
  boolean oncef, testf;
  testf = false; 
//delete this 
/*
  BlockLoad(ADRb);
  AddTextToAreaNL("{",apost);
  AddTextToAreaNL("  ""interfaceName"" : ""PurchaseOrder_GregsMotors"",",apost);
  AddTextToAreaNL("  ""returnDetailedData"" : true,",apost);
  AddTextToAreaNL("  ""data"": [{",apost);
  AddTextToAreaNL("    ""PONo"": """ & StockMovr.SerNr & """,",apost);
  AddTextToAreaNL("    ""PODesc"": """ & StockMovr.Comment & """,",apost);
  AddTextToAreaNL("    ""POSource"": ""StockMvt"",",apost);
  AddTextToAreaNL("    ""ClientNo"": """ & ADRb.ADORClientNo & """,",apost);
  AddTextToAreaNL("    ""POType"": ""StockMvt"",",apost);
  AddTextToAreaNL("    ""Ref1"": """ & StockMovr.FrLocation & """,",apost);
  AddTextToAreaNL("    ""Ref2"": """ & StockMovr.ThrouLocation & """,",apost);
  AddTextToAreaNL("    ""Ref3"": """ & StockMovr.ToLocation & """,",apost);
  AddTextToAreaNL("    ""DeliveryDate"": """ & GMSFromatDate(StockMovr.OrdTransDate) & """,",apost); // needs to be in yyyy-mm-dd format
  AddTextToAreaNL("    ""Location"": {",apost);
  AddTextToAreaNL("      ""LocationNo"": """ & StockMovr.FrLocation & """,",apost);
  //AddTextToAreaNL("      ""LocationName1"": """ & PUr.VEName & """",apost);
  AddTextToAreaNL("    },",apost);
  AddTextToAreaNL("    ""Lines"": [",apost);
  rwcnt = MatRowCnt(StockMovr);
  if (rwcnt > 0) then begin
    
    for (i = 0; i < rwcnt; i = i + 1) begin
      MatRowGet(StockMovr, i, StockMovrw);
      if(oncef) then begin 
        AddTextToAreaNL("      ,",apost);
      end; 
      AddTextToAreaNL("      {",apost);
      AddTextToAreaNL("        ""LineNo"": """ & i + 1 & """,",apost); // should start at 1
      AddTextToAreaNL("        ""CustomerNo"": """ & ADRb.ADORClientNo & """,",apost);
      AddTextToAreaNL("        ""SKUNo"": """ & StockMovrw.ArtCode & """,",apost);
      AddTextToAreaNL("        ""OrderedQty"":" & StockMovrw.OrdQuant,apost);
      AddTextToAreaNL("       }",apost); 
      oncef = true; 
    end;
    AddTextToAreaNL("       }",apost);  
  end;
  AddTextToAreaNL("     ]",apost);
  AddTextToAreaNL("   }]",apost);
  AddTextToAreaNL("}",apost);
*/
//end of delete 

//replace with 
 BlockLoad(ADRb);
  AddTextToAreaNL("{",apost);
  AddTextToAreaNL("  ""interfaceName"" : ""OrderInstruction_GregsMotors"",",apost);
  AddTextToAreaNL("  ""returnDetailedData"" : true,",apost);
  AddTextToAreaNL("  ""data"": [{",apost);
  AddTextToAreaNL("    ""ClientNo"": """ & ADRb.ADORClientNo & """,",apost);
  AddTextToAreaNL("    ""CustomerNo"": """ & ADRb.ADORClientNo & """,",apost);
  AddTextToAreaNL("    ""OrderNo"": """ & StockMovr.SerNr & """,",apost);
  AddTextToAreaNL("    ""Priority"": 5,",apost);
  AddTextToAreaNL("    ""DueDate"": """ & GMSFromatDate(StockMovr.OrdTransDate) & """,",apost); // needs to be in yyyy-mm-dd format
  AddTextToAreaNL("    ""OrderSource"": ""SERP"",",apost);
  AddTextToAreaNL("    ""OrderTypeNo"": ""StkMv"",",apost);
  AddTextToAreaNL("    ""OrderTypeDesc"": """ & StockMovr.Comment & """,",apost);
  AddTextToAreaNL("    ""ShipFromDate"": """ & GMSFromatDate(StockMovr.OrdTransDate) & """,",apost);
  AddTextToAreaNL("    ""DestNo"": """ & StockMovr.ToLocation & """,",apost); //make sure the to locations are predefined in ADOR 
  AddTextToAreaNL("    ""DestName1"": null,",apost);
  AddTextToAreaNL("    ""DestName2"": null,",apost);
  AddTextToAreaNL("    ""DestAddress1"": null,",apost);
  AddTextToAreaNL("    ""DestAddress2"": null,",apost);
  AddTextToAreaNL("    ""DestCity"": null,",apost);
  AddTextToAreaNL("    ""DestTownCode"": null,",apost);
  AddTextToAreaNL("    ""DestPostalCode"": null,",apost);
  AddTextToAreaNL("    ""DestCountryCode"": null,",apost);
  AddTextToAreaNL("    ""DestHub"": null,",apost);
  AddTextToAreaNL("    ""DestContact"": null,",apost);
  AddTextToAreaNL("    ""DestTelephone"": null,",apost);
  AddTextToAreaNL("    ""DestRef"": """ & StockMovr.Comment & """,",apost);
  AddTextToAreaNL("    ""DestRef2"": null,",apost);
  AddTextToAreaNL("    ""Reference1"": """ & StockMovr.FrLocation & """,",apost);
  AddTextToAreaNL("    ""Reference2"": """ & StockMovr.ThrouLocation & """,",apost);
  AddTextToAreaNL("    ""Reference3"": """ & StockMovr.ToLocation & """,",apost);
  AddTextToAreaNL("    ""Note1"": null,",apost);
  AddTextToAreaNL("    ""Note2"": null,",apost);
  AddTextToAreaNL("    ""CourierName"": null,",apost);
  AddTextToAreaNL("    ""ServiceLevelCode"": null,",apost);
  AddTextToAreaNL("    ""Lines"": [",apost);
  rwcnt = MatRowCnt(StockMovr);
  if (rwcnt > 0) then begin
    for (i = 0; i < rwcnt; i = i + 1) begin
      MatRowGet(StockMovr, i, StockMovrw);
      if(oncef) then begin 
        AddTextToAreaNL("      ,",apost);
      end; 
      AddTextToAreaNL("      {",apost);
      AddTextToAreaNL("        ""LineNo"": " & i + 1 & " ,",apost); // should start at 1
      AddTextToAreaNL("        ""SKUNo"": """ & StockMovrw.ArtCode & """,",apost);
      AddTextToAreaNL("        ""OrderedQty"":" & StockMovrw.OrdQuant,apost);
      AddTextToAreaNL("       }",apost); 
      oncef = true; 
    end;
      
  end;
  AddTextToAreaNL("     ]",apost);
  AddTextToAreaNL("   }]",apost);
  AddTextToAreaNL("}",apost);
//end of replace 

  if (StockMovr.ADORLocked != 1) then begin
    RecordCopy(StockMov2r,StockMovr);
    StockMovr.ADORLocked = 1;
    RecordUpdate(StockMov2r,StockMovr,true);
  end;
  CreateRecordLink(StockMovr,CurrentCompany,ADORQueuer,CurrentCompany);
  CreateRecordLink(ADORQueuer,CurrentCompany,StockMovr,CurrentCompany);

  LogText(0,"ADORTools: SendToAdor");
  SendToAdor(apost,ADORQueuer,"Outbound");
 
  return;
end;

global
updating procedure AddOneStockMovToADORQueue(record StockMovVc StockMovr)
begin
  record ADORQueueVc ADORQueuer;
  record StockMovVc StockMov2r;
  row ADORQueueVc ADORQueuerw;
  record HALAdorBlock HALAdorb;
  record LocationVc Locationr;
  string 255 key;
  integer i,rwcnt;
  boolean testf;

  testf = true;
  BlockLoad(HALAdorb);
  if (HALAdorb.ADORIntegr != 1) then begin
    testf = false;
  end;

  if (testf) then begin
    if (StockMovr.OrdFlag == 1 and StockMovr.SentOKFlag == 1) then begin
      testf = false;
    end;
  end;

  if (testf) then begin
    Locationr.Code = StockMovr.FrLocation;
    if (ReadFirstMain(Locationr,1,true)) then begin
      if (Locationr.ADORControl != 1) then begin
        testf = false;
      end;
    end;  
  end;
  
  if (testf) then begin
    ADORQueuer.RegisterCode = "StockMovVc";
    ADORQueuer.RecordNumber = StockMovr.SerNr;
    key = "RegCodeNumber";
    if (ReadFirstKey(key,ADORQueuer,2,true)) then begin
      ADORQueuer.Operation = 2; // update
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 2;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Updated";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end else begin
      ADORQueuer.SerNr = NextSerNr("ADORQueueVc",CurrentDate,0,false,"");
      ADORQueuer.RegisterCode = "StockMovVc";
      ADORQueuer.RecordNumber = StockMovr.SerNr;
      ADORQueuer.CreationDate = CurrentDate;
      ADORQueuer.CreationTime = CurrentTime;
      ADORQueuer.Operation = 1; // create
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 1;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Created";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end;
    LogText(0,"Queued: SendStockMovToADOR");
    SendStockMovToADOR(StockMovr,ADORQueuer);
  end;

  return;
end;

global
updating procedure SendStockMovToADORMn(record RcVc RepSpec)
begin
  record StockMovVc StockMovr;
  boolean TrHs;

  TrHs = true;
  if (BlankDate(RepSpec.sEndDate)) then begin
    StockMovr.OrdTransDate = CurrentDate;  
  end else begin
    StockMovr.OrdTransDate = RepSpec.sEndDate;  
  end;
  while (LoopBackKey("SerNr", StockMovr, 1, TrHs)) begin 
    if (TrHs) then begin
      if (NonBlank(RepSpec.sStartDate)) then begin
        if (StockMovr.OrdTransDate < RepSpec.sStartDate) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      if (StockMovr.OrdFlag != 1 and StockMovr.SentOKFlag != 1  ) then begin
        AddOneStockMovToADORQueue(StockMovr);
      end;
    end;
  end;
  return;
end;