external procedure AddTextToAreaNL(string,area);
external updating procedure SendToAdor(area,var record ADORQueueVc,string);
external function string 255 GMSFromatDate(date);

global
updating procedure SendPOToADOR(record POVc POr,record ADORQueueVc ADORQueuer)
begin
  area apost,aresponse;
  record POVc PO2r;
  record HALAdorBlock ADRb;
  row POVc POrw;
  row ADORQueueVc ADORQueuerw;
  integer rwcnt,i;
  string 255 filename;
  boolean oncef; 

  BlockLoad(ADRb);
  AddTextToAreaNL("{",apost);
  AddTextToAreaNL("  ""interfaceName"" : ""PurchaseOrder_GregsMotors"",",apost);
  AddTextToAreaNL("  ""returnDetailedData"" : true,",apost);
  AddTextToAreaNL("  ""data"": [{",apost);
  AddTextToAreaNL("    ""PONo"": """ & POr.SerNr & """,",apost);
  AddTextToAreaNL("    ""PODesc"": """ & POr.Comment & """,",apost);
  AddTextToAreaNL("    ""POSource"": ""SERP"",",apost);
  AddTextToAreaNL("    ""ClientNo"": """ & ADRb.ADORClientNo & """,",apost);
  //AddTextToAreaNL("    ""Ref1"": """ & POr.PONr & """,",apost);
  AddTextToAreaNL("    ""DeliveryDate"": """ & GMSFromatDate(POr.TransDate) & """,",apost); // needs to be in yyyy-mm-dd format
  AddTextToAreaNL("    ""POType"": ""PO"",",apost);
  AddTextToAreaNL("    ""Location"": {",apost);
  //AddTextToAreaNL("    ""Location"": """ & POr.Location & """,",apost);
  AddTextToAreaNL("      ""LocationNo"": """ & POr.VECode & """",apost);
  //AddTextToAreaNL("      ""LocationName1"": """ & POr.VEName & """",apost);
  AddTextToAreaNL("    },",apost);
  AddTextToAreaNL("    ""Lines"": [",apost);
  rwcnt = MatRowCnt(POr);
  if (rwcnt > 0) then begin
    for (i = 0; i < rwcnt; i = i + 1) begin
      MatRowGet(POr, i, POrw);
      if(oncef) then begin 
        AddTextToAreaNL("      ,",apost);
      end; 
      AddTextToAreaNL("      {",apost);
      AddTextToAreaNL("        ""LineNo"": """ & i + 1 & """,",apost); // should start at 1
      //AddTextToAreaNL("        ""SKUNo"": """ & POrw.OrdRow & """,",apost); // ADOR to give rowno field 
      AddTextToAreaNL("        ""CustomerNo"": """ & ADRb.ADORClientNo & """,",apost);
      AddTextToAreaNL("        ""SKUNo"": """ & POrw.ArtCode & """,",apost);
      AddTextToAreaNL("        ""OrderedQty"":" & POrw.Quant,apost);
      AddTextToAreaNL("       }",apost);  
      oncef = true; 
    end;
    
  end;
  AddTextToAreaNL("     ]",apost);
  AddTextToAreaNL("   }]",apost);
  AddTextToAreaNL("}",apost);

  if (POr.ADORLocked != 1) then begin
    RecordCopy(PO2r,POr);
    POr.ADORLocked = 1;
    RecordUpdate(PO2r,POr,false);
  end;
  CreateRecordLink(POr,CurrentCompany,ADORQueuer,CurrentCompany);
  CreateRecordLink(ADORQueuer,CurrentCompany,POr,CurrentCompany);

  //logtext(0,"this is the json: " & AreaToString(apost)) 

  SendToAdor(apost,ADORQueuer,"Inbound");

  return;
end;

global
updating procedure AddOnePOToADORQueue(record POVc POr)
begin
  record ADORQueueVc ADORQueuer;
  record POVc PO2r;
  row ADORQueueVc ADORQueuerw;
  record HALAdorBlock HALAdorb;
  record LocationVc Locationr;
  string 255 key;
  integer i,rwcnt;
  boolean testf;

  testf = true;
  BlockLoad(HALAdorb);
  if (HALAdorb.ADORIntegr != 1) then begin
    testf = false;
  end;

  if (testf) then begin
    if (POr.OKFlag != 1) then begin
      testf = false;
    end;
  end;

  if (testf) then begin
    Locationr.Code = POr.Location;
    if (ReadFirstMain(Locationr,1,true)) then begin
      if (Locationr.ADORControl != 1) then begin
        testf = false;
      end;
    end;  
  end;
  
  if (testf) then begin
    ADORQueuer.RegisterCode = "POVc";
    ADORQueuer.RecordNumber = POr.SerNr;
    key = "RegCodeNumber";
    if (ReadFirstKey(key,ADORQueuer,2,true)) then begin
      ADORQueuer.Operation = 2; // update
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 2;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Updated";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end else begin
      ADORQueuer.SerNr = NextSerNr("ADORQueueVc",CurrentDate,0,false,"");
      ADORQueuer.RegisterCode = "POVc";
      ADORQueuer.RecordNumber = POr.SerNr;
      ADORQueuer.CreationDate = CurrentDate;
      ADORQueuer.CreationTime = CurrentTime;
      ADORQueuer.Operation = 1; // create
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 1;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Created";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end;
    LogText(0,"Queued: SendPOToADOR");
    SendPOToADOR(POr,ADORQueuer);
  end;

  return;
end;

global
updating procedure SendPOToADORMn(record RcVc RepSpec)
begin
  record POVc POr;
  boolean TrHs;

  TrHs = true;
  if (BlankDate(RepSpec.sEndDate)) then begin
    POr.TransDate = CurrentDate;  
  end else begin
    POr.TransDate = RepSpec.sEndDate;  
  end;
  while (LoopBackKey("TransDate", POr, 1, TrHs)) begin
    if (TrHs) then begin
      if (NonBlank(RepSpec.sStartDate)) then begin
        if (POr.TransDate < RepSpec.sStartDate) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      if (POr.OKFlag == 1) then begin
        AddOnePOToADORQueue(POr);
      end;
    end;
  end;
  return;
end;
