external procedure AddTextToAreaNL(string,area);
external updating procedure SendToAdor(area,var record ADORQueueVc,string);

global
updating procedure SendCUToADOR(record CUVc CUr,record ADORQueueVc ADORQueuer)
begin
  area apost,aresponse;
  record HALAdorBlock ADRb;
  row ADORQueueVc ADORQueuerw;
  string 255 filename;
/*  ADOR must define the Interface end point for Contacts on their side before we can proceed. 
  BlockLoad(ADRb);
  AddTextToAreaNL("{",apost);
  AddTextToAreaNL("  ""interfaceName"" : ""ProductMaster_GregsMotors"",",apost);
  AddTextToAreaNL("  ""returnDetailedData"" : true,",apost);
  AddTextToAreaNL("  ""data"": [{",apost);
  AddTextToAreaNL("    ""TypeNo"": """ & "1" & """,",apost);
  AddTextToAreaNL("    ""StyleNo"": """ & CUr.Code & """,",apost);
  AddTextToAreaNL("    ""StyleDesc"": """ & CUr.Name & """,",apost);
  AddTextToAreaNL("    ""SKUNo"": """ & CUr.Code & """,",apost);
  AddTextToAreaNL("    ""GroupNo"": """ & CUr.Group & """,",apost);
  AddTextToAreaNL("    ""DepartmentNo"": """ & CUr.Objects & """,",apost);
  if (nonblank(CUr.Weight)) then begin
  AddTextToAreaNL("    ""Weight"": " & CUr.Weight & ",",apost);  
  end;
  AddTextToAreaNL("    ""CostPrice"": " & CUr.CostPricePerLocation & ",",apost);
  AddTextToAreaNL("    ""SellPrice"": " & CUr.BasePriceComp & ",",apost);
  AddTextToAreaNL("    ""SerialControlled"": " & CUr.SerNrf & ",",apost);
  AddTextToAreaNL("    ""Barcodes"": []",apost);
  AddTextToAreaNL("   }]",apost);
  AddTextToAreaNL("}",apost);

  CreateRecordLink(CUr,CurrentCompany,ADORQueuer,CurrentCompany);
  CreateRecordLink(ADORQueuer,CurrentCompany,CUr,CurrentCompany);

  SendToAdor(apost,ADORQueuer,"Product");
 */ 
  RecordStore(ADORQueuer,true); 

  return;
end;

global
updating procedure AddOneCUToADORQueue(record CUVc CUr)
begin
  record ADORQueueVc ADORQueuer;
  record CUVc CU2r;
  row ADORQueueVc ADORQueuerw;
  record HALAdorBlock HALAdorb;
  string 255 key;
  integer i,rwcnt;
  boolean testf;

  testf = true;
  BlockLoad(HALAdorb);
  if (HALAdorb.ADORIntegr != 1) then begin
    testf = false;
  end;

  if (testf) then begin
    if (CUr.SendToADORf == 1) then begin
      testf = false;
    end;
  end;
  
  if (testf) then begin
    ADORQueuer.RegisterCode = "CUVc";
    ADORQueuer.RecordNumber = CUr.Code;
    key = "RegCodeNumber"; //This index is made up of RegisterCode, RecordNumber fields 
    if (ReadFirstKey(key,ADORQueuer,2,true)) then begin
      ADORQueuer.Operation = 2; // update
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 2;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Updated";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end else begin
      ADORQueuer.SerNr = NextSerNr("ADORQueueVc",CurrentDate,0,false,"");
      ADORQueuer.RegisterCode = "CUVc";
      ADORQueuer.RecordNumber = CUr.Code;
      ADORQueuer.CreationDate = CurrentDate;
      ADORQueuer.CreationTime = CurrentTime;
      ADORQueuer.Operation = 1; // create
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 1;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Created";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
     
    end;
    LogText(0,"Queued: SendCUToADOR");
    SendCUToADOR(CUr,ADORQueuer);
  end;
    
  return;
end;

global
updating procedure SendCUToADORMn(record RcVc RepSpec)
begin
  record CUVc CUr;
  boolean TrHs;

  TrHs = true;
  while (LoopMain(CUr, 1, TrHs)) begin
    if (TrHs) then begin
      AddOneCUToADORQueue(CUr);  
    end;
  end;
  return;
end;