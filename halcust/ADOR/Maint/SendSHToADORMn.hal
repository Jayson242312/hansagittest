external procedure AddTextToAreaNL(string,area);
external updating procedure SendToAdor(area,var record ADORQueueVc,string);
external function string 255 GMSFromatDate(date);

global
updating procedure SendSHToADOR(record SHVc SHr,record ADORQueueVc ADORQueuer)
begin
  area apost,aresponse;
  record SHVc SH2r;
  record HALAdorBlock ADRb;
  row SHVc SHrw;
  row ADORQueueVc ADORQueuerw;
  integer rwcnt,i;
  string 255 filename;
  boolean oncef; 

  BlockLoad(ADRb);
  AddTextToAreaNL("{",apost);
  AddTextToAreaNL("  ""interfaceName"" : ""OrderInstruction_GregsMotors"",",apost);
  AddTextToAreaNL("  ""returnDetailedData"" : true,",apost);
  AddTextToAreaNL("  ""data"": [{",apost);
  AddTextToAreaNL("    ""ClientNo"": """ & ADRb.ADORClientNo & """,",apost);
  AddTextToAreaNL("    ""CustomerNo"": """ & ADRb.ADORClientNo & """,",apost);
  AddTextToAreaNL("    ""OrderNo"": """ & SHr.SerNr & """,",apost);
  AddTextToAreaNL("    ""Priority"": 5,",apost);
  AddTextToAreaNL("    ""DueDate"": """ & GMSFromatDate(SHr.ShipDate) & """,",apost); // needs to be in yyyy-mm-dd format
  AddTextToAreaNL("    ""OrderSource"": ""SERP"",",apost);
  AddTextToAreaNL("    ""OrderTypeNo"": ""Del"",",apost);
  AddTextToAreaNL("    ""OrderTypeDesc"": """ & SHr.OrderNr & """,",apost);
  AddTextToAreaNL("    ""ShipFromDate"": """ & GMSFromatDate(SHr.ShipDate) & """,",apost);
  AddTextToAreaNL("    ""DestNo"": """ & SHr.CustCode & """,",apost);
  AddTextToAreaNL("    ""DestName1"": """ & SHr.Addr0 & """,",apost);
  AddTextToAreaNL("    ""DestName2"": """ & SHr.Location & """,",apost);
  AddTextToAreaNL("    ""DestAddress1"": """ & SHr.Addr1 & """,",apost);
  AddTextToAreaNL("    ""DestAddress2"": """ & SHr.Addr2 & """,",apost);
  AddTextToAreaNL("    ""DestCity"": """ & SHr.ToCity & """,",apost);
  AddTextToAreaNL("    ""DestTownCode"": """ & SHr.ToCity & """,",apost);
  AddTextToAreaNL("    ""DestPostalCode"": null,",apost);
  AddTextToAreaNL("    ""DestCountryCode"": """ & SHr.DelCountry & """,",apost);
  AddTextToAreaNL("    ""DestHub"": null,",apost);
  AddTextToAreaNL("    ""DestContact"": """ & SHr.Comment & """,",apost);
  AddTextToAreaNL("    ""DestTelephone"": null,",apost);
  AddTextToAreaNL("    ""DestRef"": null,",apost);
  AddTextToAreaNL("    ""DestRef2"": null,",apost);
  AddTextToAreaNL("    ""Reference1"": null,",apost);
  AddTextToAreaNL("    ""Reference2"": null,",apost);
  AddTextToAreaNL("    ""Reference3"": null,",apost);
  AddTextToAreaNL("    ""Note1"": null,",apost);
  AddTextToAreaNL("    ""Note2"": null,",apost);
  AddTextToAreaNL("    ""CourierName"": null,",apost);
  AddTextToAreaNL("    ""ServiceLevelCode"": null,",apost);
  AddTextToAreaNL("    ""Lines"": [",apost);
  rwcnt = MatRowCnt(SHr);
  if (rwcnt > 0) then begin
    for (i = 0; i < rwcnt; i = i + 1) begin
      MatRowGet(SHr, i, SHrw);
      if(oncef) then begin 
        AddTextToAreaNL("      ,",apost);
      end; 
      AddTextToAreaNL("      {",apost);
      AddTextToAreaNL("        ""LineNo"": " & i + 1 & " ,",apost); // should start at 1
      AddTextToAreaNL("        ""SKUNo"": """ & SHrw.ArtCode & """,",apost);
      AddTextToAreaNL("        ""OrderedQty"":" & SHrw.Ordered,apost);
      AddTextToAreaNL("       }",apost); 
      oncef = true; 
    end;
      
  end;
  AddTextToAreaNL("     ]",apost);
  AddTextToAreaNL("   }]",apost);
  AddTextToAreaNL("}",apost);

  if (SHr.ADORLocked != 1) then begin
    RecordCopy(SH2r,SHr);
    SHr.ADORLocked = 1;
    RecordUpdate(SH2r,SHr,true);
  end;
  CreateRecordLink(SHr,CurrentCompany,ADORQueuer,CurrentCompany);
  CreateRecordLink(ADORQueuer,CurrentCompany,SHr,CurrentCompany);

  SendToAdor(apost,ADORQueuer,"Outbound");
  
  return;
end;

global
updating procedure AddOneSHToADORQueue(record SHVc SHr)
begin
  record ADORQueueVc ADORQueuer;
  record SHVc SH2r;
  row ADORQueueVc ADORQueuerw;
  record HALAdorBlock HALAdorb;
  record LocationVc Locationr;
  string 255 key;
  integer i,rwcnt;
  boolean testf;

  testf = true;
  BlockLoad(HALAdorb);
  if (HALAdorb.ADORIntegr != 1) then begin
    testf = false;
  end;

  if (testf) then begin
    if (SHr.OKFlag == 1) then begin
      testf = false;
    end;
  end;

  if (testf) then begin
    Locationr.Code = SHr.Location;
    if (ReadFirstMain(Locationr,1,true)) then begin
      if (Locationr.ADORControl != 1) then begin
        testf = false;
      end;
    end;  
  end;
  
  if (testf) then begin
    ADORQueuer.RegisterCode = "SHVc";
    ADORQueuer.RecordNumber = SHr.SerNr;
    key = "RegCodeNumber";
    if (ReadFirstKey(key,ADORQueuer,2,true)) then begin
      ADORQueuer.Operation = 2; // update
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 2;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Updated";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end else begin
      ADORQueuer.SerNr = NextSerNr("ADORQueueVc",CurrentDate,0,false,"");
      ADORQueuer.RegisterCode = "SHVc";
      ADORQueuer.RecordNumber = SHr.SerNr;
      ADORQueuer.CreationDate = CurrentDate;
      ADORQueuer.CreationTime = CurrentTime;
      ADORQueuer.Operation = 1; // create
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 1;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Created";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end;
    LogText(0,"Queued: SendSHToADOR");
    SendSHToADOR(SHr,ADORQueuer);
  end;

  return;
end;

global
updating procedure SendSHToADORMn(record RcVc RepSpec)
begin
  record SHVc SHr;
  boolean TrHs;

  TrHs = true;
  if (BlankDate(RepSpec.sEndDate)) then begin
    SHr.ShipDate = CurrentDate;  
  end else begin
    SHr.ShipDate = RepSpec.sEndDate;  
  end;
  while (LoopBackKey("ShipDate", SHr, 1, TrHs)) begin
    if (TrHs) then begin
      if (NonBlank(RepSpec.sStartDate)) then begin
        if (SHr.ShipDate < RepSpec.sStartDate) then begin
          TrHs = false;
        end;
      end;
    end;
    if (TrHs) then begin
      if (SHr.OKFlag != 1) then begin
        AddOneSHToADORQueue(SHr);
      end;
    end;
  end;
  return;
end;