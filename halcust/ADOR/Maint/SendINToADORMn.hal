external procedure AddTextToAreaNL(string,area);
external updating procedure SendToAdor(area,var record ADORQueueVc,string);

global
updating procedure SendINToADOR(record INVc INr,record ADORQueueVc ADORQueuer)
begin
  area apost,aresponse;
  record HALAdorBlock ADRb;
  row ADORQueueVc ADORQueuerw;
  string 255 filename,data;

  BlockLoad(ADRb);
  AddTextToAreaNL("{",apost);
  AddTextToAreaNL("  ""interfaceName"" : ""ProductMaster_GregsMotors"",",apost);
  AddTextToAreaNL("  ""returnDetailedData"" : true,",apost);
  AddTextToAreaNL("  ""data"": [{",apost);
  AddTextToAreaNL("    ""ProductDepartment"": {""DepartmentNo"": """ & INr.Objects & """,""DepartmentDesc"": """ & INr.Objects & """},",apost);
  AddTextToAreaNL("    ""TypeNo"": """ & "1" & """,",apost);
  AddTextToAreaNL("    ""StyleNo"": """ & INr.Code & """,",apost);
  AddTextToAreaNL("    ""StyleDesc"": """ & INr.Name & """,",apost);
  AddTextToAreaNL("    ""SKUNo"": """ & INr.Code & """,",apost);
  AddTextToAreaNL("    ""GroupNo"": """ & INr.Group & """,",apost);
  AddTextToAreaNL("    ""DepartmentNo"": """ & INr.Objects & """,",apost);
  if (nonblank(INr.Weight)) then begin
    AddTextToAreaNL("    ""Weight"": " & INr.Weight & ",",apost);  
  end;
  AddTextToAreaNL("    ""CostPrice"": " & INr.CostPricePerLocation & ",",apost);
  AddTextToAreaNL("    ""SellPrice"": " & INr.BasePriceComp & ",",apost);
  AddTextToAreaNL("    ""SerialControlled"": " & INr.SerNrf & ",",apost);
  AddTextToAreaNL("    ""Barcodes"": []",apost);
  AddTextToAreaNL("   }]",apost);
  AddTextToAreaNL("}",apost);

  CreateRecordLink(INr,CurrentCompany,ADORQueuer,CurrentCompany);
  CreateRecordLink(ADORQueuer,CurrentCompany,INr,CurrentCompany);
 
  SendToAdor(apost,ADORQueuer,"Product");

  return;
end;

global
updating procedure AddOneINToADORQueue(record INVc INr)
begin
  record ADORQueueVc ADORQueuer;
  record INVc IN2r;
  row ADORQueueVc ADORQueuerw;
  record HALAdorBlock HALAdorb;
  string 255 key;
  integer i,rwcnt;
  boolean testf;

  testf = true;
  BlockLoad(HALAdorb);
  if (HALAdorb.ADORIntegr != 1) then begin
    testf = false;
  end;

  if (testf) then begin
    if (INr.SendToADORf == 1) then begin
      testf = false;
    end;
  end;
  
  if (testf) then begin
    ADORQueuer.RegisterCode = "INVc";
    ADORQueuer.RecordNumber = INr.Code;
    key = "RegCodeNumber";
    if (ReadFirstKey(key,ADORQueuer,2,true)) then begin
      ADORQueuer.Operation = 2; // update
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 2;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Updated";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end else begin
      ADORQueuer.SerNr = NextSerNr("ADORQueueVc",CurrentDate,0,false,"");
      ADORQueuer.RegisterCode = "INVc";
      ADORQueuer.RecordNumber = INr.Code;
      ADORQueuer.CreationDate = CurrentDate;
      ADORQueuer.CreationTime = CurrentTime;
      ADORQueuer.Operation = 1; // create
      ADORQueuer.Status = 1; // Queued
      ADORQueuerw.Operation = 1;
      ADORQueuerw.LogDate = CurrentDate;
      ADORQueuerw.LogTime = CurrentTime;
      ADORQueuerw.Details = "Created";
      MatRowInsert(ADORQueuer,MatRowCnt(ADORQueuer),ADORQueuerw);
    end;
    LogText(0,"Queued: SendINToADOR");
    SendINToADOR(INr,ADORQueuer);
  end;

  return;
end;

global
updating procedure SendINToADORMn(record RcVc RepSpec)
begin
  record INVc INr;
  boolean TrHs;

  TrHs = true;
  while (LoopMain(INr, 1, TrHs)) begin
    if (TrHs) then begin
      AddOneINToADORQueue(INr);  
    end;
  end;
  return;
end;
