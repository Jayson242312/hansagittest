//  VER: 7.1 71120450 (2013-10-13) - AG 2013-11-04 - upgraded
//  VER 6.4 64241500

/*  //  AG 2013-06-13 - ORB001-130523-001 - FIX Commented out - re-written below
function val GetInvoicePriceOLD(date TransDate, string ItemCode,var val invCost)   //  AG 2013-06-03 -- ORB001-130523-001 - added invCost
begin
  record ItemHistVc ItemHistr;
  record IVVc IVr;
  row IVVc IVrw;
  integer rwcnt, i;
  val ItemPrice;

  ItemHistr.ArtCode = ItemCode;
  while (LoopKey("ArtCode",ItemHistr,1,true)) begin
    if ((ItemHistr.ArtCode == ItemCode) AND (ItemHistr.FileName=="IVVc")) then begin
      if (ItemHistr.TransDate == TransDate) then begin
        IVr.SerNr = ItemHistr.TransNr;
        if (ReadFirstKey("SerNr",IVr,1,true)) then begin
          rwcnt = MatRowCnt(IVr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IVr,i,IVrw);
            if (IVrw.ArtCode == ItemHistr.ArtCode) then begin
              ItemPrice = IVrw.Price;
              invCost = IVrw.BasePrice;    //  AG 2013-06-03 -- ORB001-130523-001
              goto Lquit;
            end;
          end;
        end;
      end;
    end;
  end;

  Lquit:;
  GetInvoicePriceOLD = ItemPrice;
  return;
end;
*/
//  AG 2013-06-13 -- ORB001-130523-001 - FIX: re-write GetInvoicePrice function to get the actual invoice price and cost
function val GetInvoicePrice(LongInt TransNr,string ItemCode,integer rownr,var val invCost)   //  AG 2013-06-03 -- ORB001-130523-001 - added invCost
begin
  record IVVc IVr;
  row IVVc IVrw;
  val ItemPrice;

  ResetLoop(IVr);
  IVr.SerNr = TransNr;
  if (ReadFirstMain(IVr,1,true)) then begin
    MatRowGet(IVr,rownr,IVrw);
    if (IVrw.ArtCode == ItemCode) then begin
      ItemPrice = IVrw.Price;
      invCost = IVrw.BasePrice;
    end;
  end;

  GetInvoicePrice = ItemPrice;
  return;
end;

procedure GetShipDetails(record INVc INr, Date DateD)
begin
  record ItemHistVc IHr;
  record IVVc IVr;
  row IVVc IVrw;
  Boolean TrHs;
  LongInt oldserno;
  Integer i,rwcnt;
  val CrQty,Qty,Uprice,invCost;  //  AG 2013-06-03 -- ORB001-130523-001 - added invCost

  oldserno = -1;
  IHr.ArtCode = INr.Code;
  IHr.TransDate = DateD;
  TrHs = true;
  while (LoopKey("ArtCode",IHr,2,TrHs)) begin
    invCost = 0;
    if (IHr.TransDate<>DateD) then begin
      TrHs = false;
    end;
    if (TrHs) then begin
      if (IHr.ArtCode<>INr.Code) then begin
        TrHs = false;
      end;
    end;
    if (TrHs) then begin
      if ((IHr.FileName=="IVVc") and (IHr.TransNr!=oldserno)) then begin
        if (IHr.Qty <> 0) then begin
          ExportString(IHr.Location);
          ExportString(IHr.ArtCode);
          ExportDate(DateD);
          IHr.Qty = IHr.Qty * -1;
          ExportVal(IHr.Qty,M4Val);
          Uprice = GetInvoicePrice(IHr.TransNr,IHr.ArtCode,IHr.Row,invCost);  //  AG 2013-06-03 -- ORB001-130523-001 - Added invCost for Cost from Invoice
          ExportVal(invCost,M4Val);  //  AG 2013-06-03 -- ORB001-130523-001 - Cost from Invoice
          if (Blank(UPrice)) then begin
            UPrice = 0;
          end;
          ExportVal(UPrice,M4Val);
          newLine;
          oldserno = IHr.TransNr;
        end;
      end;
    end;

  end;
  return;
end;

procedure SalesIN2En(record RcVc RepSpec, Date DateD)
begin
  record INVc INr;
  record IVCashVc IVCashr;
  record ItemHistVc IHr;
  row IVCashVc IVCashrw;
  boolean TrHs;
  integer i,rwcnt;

  while(LoopMain(INr,1,true)) begin
    GetShipDetails(INr,DateD);
  end;

  TrHs = true;
  IVCashr.TransDate = DateD;
  
  while(LoopKey("TransDate",IVCashr,1,true)) begin
    if(IVCashr.TransDate == DateD and IVCashr.OKFlag <> 0) then begin
        rwcnt = MatRowCnt(IVCashr);
        for (i=0;i<rwcnt;i=i+1) begin
          MatRowGet(IVCashr, i, IVCashrw);
          ResetLoop(INr);
          INr.Code = IVCashrw.ArtCode;

          if(ReadFirstMain(INr,1,true)) then begin
            ExportString(IVCashr.Location);
            ExportString(IVCashrw.ArtCode);
            ExportString(DateD);
            ExportVal(IVCashrw.Quant,M4Val);
            ExportVal(IVCashrw.BasePrice,M4Val);
            ExportVal(IVCashrw.Price,M4Val);
            NewLine;
          end;
      end;
    end;
  end;

  return;
end;

//  SalesHistory.txt - Choose Period  >>
global
procedure SalesINEn(record RcVc RepSpec)
begin
  record INVc INr;
  string 255 SiteCode,DateStr;
  longint lastYear,MonthDays;
  Date Date1, Date2, tmpD;
  val q;

  SiteCode = "WARE";

    ExportString("SiteCode");
    ExportString("ItemCode");
    ExportString("SalesHistoryDate");
    ExportString("SalesQTY");
    ExportString("CostPrice");
    ExportString("SellingPrice");
    newLine;

    Date1 = RepSpec.sEndDate;
    Date2 = RepSpec.sStartDate;

    while ((Date2 < Date1) or (Date2 == Date1)) begin
      SalesIN2En(RepSpec,Date2);
      Date2 = AddDay(Date2,1);
    end;

  return;
end;

//  SalesHistory.txt - 6 Months Mandatory
global
procedure Sales2INEn(record RcVc RepSpec)
begin
  record INVc INr;
  record JEBlock JEb;
  string 255 SiteCode,DateStr;
  longint lastYear,MonthDays;
  Date Date1, Date2, tmpD;
  val q;
  Date CutOffDate;
  Boolean testf;

  /*
  BlockLoad(JEb);

  if (CurrentCompany == 1) then begin
    CreateFile(JEb.Path & "SalesHistory.txt");
  end;
  if (CurrentCompany == 3) then begin
    CreateFile(JEb.Path2 & "SalesHistory.txt");
  end;
  */
    ExportString("SiteCode");
    ExportString("ItemCode");
    ExportString("SalesHistoryDate");
    ExportString("SalesQTY");
    ExportString("CostPrice");
    ExportString("SellingPrice");
    newLine;

    Date1 = CurrentDate;
    Date2 = AddMonth(CurrentDate,-6);
    Date2.Day = 01;
    while (Date2 <= Date1) begin
      SalesIN2En(RepSpec,Date2);
      Date2 = AddDay(Date2,1);
    end;

    Lendit:;
    //CloseFile;
  return;
end;

//  SalesHistory.txt - 14 Days Mandatory
global
procedure Sales3INEn(record RcVc RepSpec)
begin
  record INVc INr;
  string 255 SiteCode,DateStr;
  longint lastYear,MonthDays;
  Date Date1, Date2, tmpD;
  val q;
  Date CutOffDate;
  Boolean testf;

  ExportString("SiteCode");
  ExportString("ItemCode");
  ExportString("SalesHistoryDate");
  ExportString("SalesQTY");
  ExportString("CostPrice");
  ExportString("SellingPrice");
  newLine;
  //  6.1 Block below removed and replaced with code from 6.2
  /*
  DateStr = DateToString(CurrentDate,"DDMMYYYY");
  lastYear = StringToLongint(DateStr) - 1;

  Date1 = CurrentDate;
  Date2 = CurrentDate;
  MonthDays = DaysInMonth(Date2.year,Date2.month);

  if (Date2.day < 15) then begin
    Date2.day = MonthDays - (15 - Date2.day);
    Date2.month = Date2.month - 1;
    if (Date2.month == 0) then begin
      Date2.month = 12;
      Date2.year = Date2.year - 1;
    end;
  end else begin
    Date2.day = Date2.day - 14;
  end;

  while (Date2.day <= MonthDays) begin

     Date2.day = Date2.day + 1;

    if (Date2.day == MonthDays) then begin
      Date2.day = 1;
      Date2.month = Date2.month + 1;
    end;
    if (Date2.month == 13) then begin
      Date2.year = Date2.year + 1;
      Date2.month = 1;
    end;

    SalesIN2En(RepSpec,Date2);
    //stopalert("Date2: "&Date2);
    if (Date2 == Date1) then begin
      goto Lendit;
    end;
  end;
  */
  // 6.2 code
  Date1 = CurrentDate;
  Date2 = AddDay(CurrentDate,-14);
  //stopalert("Date: " & Date2);
  while (Date2 <= Date1) begin
    SalesIN2En(RepSpec,Date2);
    Date2 = AddDay(Date2,1);
  end;

  Lendit:;
  CloseFile;

  return;
end;

//  AG 2013-06-24 -- ORB001-130624-001 - Creating the split between Nightly Export and user run exports
global
procedure Sales3IN_NightlyEn(record RcVc RepSpec)
begin
  record JEBlock JEb;

  BlockLoad(JEb);

  if (CurrentCompany == 1) then begin
    CreateFile(JEb.Path & "SalesHistory.txt");
  end;
  if (CurrentCompany == 3) then begin
    CreateFile(JEb.Path2 & "SalesHistory.txt");
  end;

  Sales3INEn(RepSpec);

  return;
end;