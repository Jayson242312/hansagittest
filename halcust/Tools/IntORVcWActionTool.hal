external inner procedure GetFullCurncyRate (var string,Date,var val,var val,var val,var val,var val);
external inner procedure ExplodeString(string,string,var array string,var integer); 

global
updating procedure PasteIntOrdInStockMov(record IntORVc IntORp,record StockMovVc StockMovp)
BEGIN
  record INVc INr;
  record StockMovVc StockMovAFlr; 
  record StockMovVc StockMovBFlr; 
  record StockMovVc StockMovCFlr;
  record IntORVc newIntORp; 
  row StockMovVc StockMovrw;
  row StockMovVc StockMovAFlrw;
  row StockMovVc StockMovBFlrw;
  row StockMovVc StockMovCFlrw;
  row IntORVc IntORrw;
  Integer i,j,k,rwcnt,stcnt,ordQuant,acount,prev;
  val fr,to1,to2,br1,br2;
  string 20 curncy,theString,shelfCode,itemCode,spec;
  record IntORSettingBlock IntORRec;
  Date nodate;
  val remn;
  record LocationVc Locr;
  record MinPerLocVc MinPerLocr; 
 // array integer arrItemQuant; 
  array String 255 arrItem,oneStr,newString,aFlr,bFlr,cFlr; 
  boolean testf,newSM; 

  
 if (IntORp.OKFlag == 0) then begin
        testf = true;
  end;

  if(testf) then begin 

                  
                  if (blank(IntORp.Location)) then begin goto LPasteIntOrdInStockMov; end;
                  BlockLoad(IntORRec);
                  StockMovp.IntORNo = IntORp.SerNr;
                  StockMovp.FrLocation = IntORp.FrLocation;
                  StockMovp.ToLocation = IntORp.Location; 
                  Locr.Code = StockMovp.ToLocation;
                  ReadFirstMain(Locr,1,true);
                  if (nonblank(Locr.ThrouLocation)) then begin
                    StockMovp.ThrouLocation = Locr.ThrouLocation;
                  end;
                  GetFullCurncyRate(curncy,StockMovp.TransDate,fr,to1,to2,br1,br2);
                  StockMovp.CurncyCode = curncy;
                  StockMovp.FrRate = fr;
                  StockMovp.ToRateB1 = to1;
                  StockMovp.ToRateB2 = to2;
                  StockMovp.BaseRate1 = br1;
                  StockMovp.BaseRate2 = br2;
                  //LogText(0,"executed in this third and last step 1"); 
                  if (IntORRec.SentQuantToStockMov==1) then begin
                    StockMovp.SentTransDate = CurrentDate;
                  end else begin
                    StockMovp.SentTransDate = nodate;
                  end;  
                // LogText(0,"executed in this third and last step 1"); 
                  if (IntORRec.QuantToStockMov==1) then begin
                    StockMovp.TransDate  = CurrentDate;
                  end else begin
                    StockMovp.TransDate  = nodate;
                  end;  
                  //stcnt = 0;
                  
                  rwcnt = MatRowCnt(IntORp);
                  //LogText(0,"Max matrix rows " & rwcnt); 
                  for (i=0;i<rwcnt;i=i+1) begin
                    MatRowGet(IntORp,i,IntORrw);
                    //INr.Code = IntORrw.ArtCode;
                    
                  
                //      if ((INr.SerNrf==1) and (MainStockRec.NoSerOnPU==0)) then begin
                    
                        /* ClearRow(StockMovp,StockMovrw,1);    
                          StockMovrw.ArtCode = IntORrw.ArtCode;
                          StockMovrw.OrdQuant = IntORrw.Quant - IntORrw.Shipd1;
                          StockMovrw.Spec = IntORrw.Spec;
                          StockMovrw.SerialNr = IntORrw.SerialNr;
                          StockMovrw.NewPrice = blankval;
                          StockMovrw.OldPrice = blankval;
                          
                          StockMovrw.ExtraSCost = "";
                          StockMovrw.OldPrice = IntORrw.Price;
                          StockMovrw.Objects = IntORrw.Objects;
                          //please look carefully BasePrice is twice !
                          StockMovrw.BasePrice = INr.UPrice1;
                          StockMovrw.BasePrice = blankval;
                          StockMovrw.Coefficient = INr.UnitCoefficient;
                          StockMovrw.IntORRow = i;
                          MatRowPut(StockMovp,stcnt,StockMovrw);      
                          stcnt = stcnt + 1; */
                          //Building the array 
                            MinPerLocr.ItemCode = IntORrw.ArtCode;
                            MinPerLocr.Location = IntORp.FrLocation;
                            if(ReadFirstMain(MinPerLocr,2,true)) then begin 
                            ordQuant = IntORrw.Quant - IntORrw.Shipd1; 
                            arrItem[i] = MinPerLocr.ShelfCode & " " & IntORrw.ArtCode & " " & ordQuant & " " & " " & IntORrw.Price & " " & IntORrw.Objects; 
                           // LogText(0,"Array Values: " & arrItem[i]); 
                            end else begin 
                              MessageBox(0,"This item " & IntORrw.ArtCode & " doesnt have a shelfcode. Please give it a shefcode and try again"); 
                              goto LPasteIntOrdInStockMov; 
                            end; 
                          //end of building the array 
                        
                      
                    end;  
                  
                    //sorting 
                        SortStringArray(arrItem); 
                        // for(i=0; i<arrItem.length;i=i+1) begin 
                        //   LogText(0,"This is what is in the array at line: " & i & arrItem[i]); 
                        // end; 
                        
                    //end of sorting 

                        //creating movement for A flow 
                        for(i=0; i<arrItem.length; i=i+1) begin 
                            if(left(arrItem[i],1) == "A") then begin 
                                //LogText(0,"A executed " & i & " times"); 
                                //replaced
                                                      
                                        aFlr[i] = arrItem[i]; 
                                        prev = i; 
                                
                                
                                //replaced
                            end; 
                        end; 

                        for(i=0; i<arrItem.length; i=i+1) begin 
                            //building b flr array 
                            if(left(arrItem[i],1) == "B") then begin 
                                  //LogText(0,"B executed " & i & " times"); 
                              //replaced
                              
                                  bFlr[i] = arrItem[i]; 
                                
                                //replaced

                            end; 
                        end; 

                        for(i=0; i<arrItem.length; i=i+1) begin 
                            //building c flr array 
                            if(left(arrItem[i],1) == "C") then begin 
                                  //LogText(0,"C executed " & i & " times"); 
                              
                                  cFlr[i] = arrItem[i]; 
                            

                            end; 
                        end; 

                      


                        // for(i=0; i<aFlr.length;i=i+1) begin 
                        //   LogText(0,"This is A Flr Array: " & i & " " & aFlr[i]);
                        //   LogText(0," ");  
                        // end; 

                        //   for(i=0; i<bFlr.length;i=i+1) begin 
                        //   LogText(0,"This is B Flr Array: " & i & " " & bFlr[i]);
                        //   LogText(0," ");  
                        // end; 

                        //   for(i=0; i<cFlr.length;i=i+1) begin 
                        //   LogText(0,"This is C Flr Array: " & i & " " & cFlr[i]);
                        //   LogText(0," ");  
                        // end; 

                        //putting the headers in order for flrA
                        StockMovAFlr.IntORNo = StockMovp.IntORNo;
                        StockMovAFlr.FrLocation = StockMovp.FrLocation;
                        StockMovAFlr.ToLocation = StockMovp.ToLocation;
                        StockMovAFlr.ThrouLocation = StockMovp.ThrouLocation;
                        StockMovAFlr.Comment = IntORp.Reference;
                        //putting the headers in order for flrB
                        StockMovBFlr.IntORNo = StockMovp.IntORNo; 
                        StockMovBFlr.FrLocation = StockMovp.FrLocation;
                        StockMovBFlr.ToLocation = StockMovp.ToLocation;
                        StockMovBFlr.ThrouLocation = StockMovp.ThrouLocation;
                        StockMovBFlr.Comment = IntORp.Reference;
                        //putting the headers in order for flrC
                        StockMovCFlr.IntORNo = StockMovp.IntORNo;
                        StockMovCFlr.FrLocation = StockMovp.FrLocation;
                        StockMovCFlr.ToLocation = StockMovp.ToLocation;
                        StockMovCFlr.ThrouLocation = StockMovp.ThrouLocation;
                        StockMovCFlr.Comment = IntORp.Reference;

                        //building the matrices for the A Flr stock movements 
                        k=0; 
                        for(i=0;i<aFlr.length;i=i+1) begin 
                          if(aFlr[i] != "") begin 
                                      theString =  aFlr[i];              
                                      ExplodeString(theString," ",oneStr,acount);
                                      shelfcode = oneStr[0]; 
                                      itemcode = oneStr[1];
                                      
                                      StockMovAFlrw.ArtCode = itemcode; 
                                      StockMovAFlrw.OrdQuant = StringToVal(oneStr[2],M4Val); 
                                      INr.Code = itemcode; 
                                      if(ReadFirstMain(INr,1,true)) then begin 
                                          StockMovAFlrw.Spec = INr.Name;
                                          StockMovAFlrw.BasePrice = INr.UPrice1; 
                                      end; 
                                      StockMovAFlrw.OldPrice = StringToVal(oneStr[3],M4Val);
                                      StockMovAFlrw.Objects = oneStr[4];
                                      
                                      MatRowPut(StockMovAFlr,k,StockMovAFlrw); 
                                      k=k+1; 
                          end; 
                        end; 

                        //building the matrices for the B Flr stock movements 
                        k=0; 
                        for(i=0;i<bFlr.length;i=i+1) begin 
                          if(bFlr[i] != "") begin 
                                      theString =  bFlr[i];              
                                      ExplodeString(theString," ",oneStr,acount);
                                      shelfcode = oneStr[0]; 
                                      itemcode = oneStr[1];

                                      StockMovBFlrw.ArtCode = itemcode; 
                                      StockMovBFlrw.OrdQuant = StringToVal(oneStr[2],M4Val); 
                                      INr.Code = itemcode; 
                                      if(ReadFirstMain(INr,1,true)) then begin 
                                          StockMovBFlrw.Spec = INr.Name;
                                          StockMovBFlrw.BasePrice = INr.UPrice1; 
                                      end; 
                                      StockMovBFlrw.OldPrice = StringToVal(oneStr[3],M4Val);
                                      StockMovBFlrw.Objects = oneStr[4];
                                        
                                        
                                      MatRowPut(StockMovBFlr,k,StockMovBFlrw); 
                                      k=k+1; 
                          end;    
                        end; 

                            //building the matrices for the C Flr stock movements 
                            k=0; 
                        for(i=0;i<cFlr.length;i=i+1) begin 
                          if(cFlr[i] != "") begin 
                                      theString =  cFlr[i];              
                                      ExplodeString(theString," ",oneStr,acount);
                                      shelfcode = oneStr[0]; 
                                      itemcode = oneStr[1];

                                      StockMovCFlrw.ArtCode = itemcode; 
                                      StockMovCFlrw.OrdQuant = StringToVal(oneStr[2],M4Val); 
                                      INr.Code = itemcode; 
                                      if(ReadFirstMain(INr,1,true)) then begin 
                                          StockMovCFlrw.Spec = INr.Name;
                                          StockMovCFlrw.BasePrice = INr.UPrice1; 
                                      end; 
                                      StockMovCFlrw.OldPrice = StringToVal(oneStr[3],M4Val);
                                      StockMovCFlrw.Objects = oneStr[4];
                                      
                                      MatRowPut(StockMovCFlr,k,StockMovCFlrw);
                                      k=k+1; 
                          end;  
                        end; 
                      
                        //Creating SM for A flr  
                        
                        if(MatRowCnt(StockMovAFlr) > 0) then begin 
                          newSM = true; 
                        end; 
                        if(newSM) then begin 
                            StockMovAFlr.SerNr = NextSerNr("StockMovVc",CurrentDate,0,false,"");
                            if(RecordStore(StockMovAFlr,false)) then begin 
                                    //LogText(0,"New SM for the A flow created"); 
                                    
                                    if (IntORp.OKFlag != 1) then begin
                                        RecordCopy(newIntORp,IntORp);
                                        IntORp.OKFlag = 1;
                                        RecordUpdate(newIntORp,IntORp,true); 
                                      end;

                                    CreateRecordLink(StockMovAFlr,CurrentCompany,IntORp,CurrentCompany);
                                    CreateRecordLink(IntORp,CurrentCompany,StockMovAFlr,CurrentCompany);
                                  end else begin   
                                    LogText(0,"New SM for the A flow could not be created"); 
                                  end; 
                        end; 
                      
                        //

                        //Creating SM for B flr  
                        newSM = false; 
                        if(MatRowCnt(StockMovBFlr) > 0) then begin 
                          newSM = true; 
                        end; 
                        if(newSM) then begin 
                                StockMovBFlr.SerNr = NextSerNr("StockMovVc",CurrentDate,0,false,"");
                                if(RecordStore(StockMovBFlr,false)) then begin 
                                  //LogText(0,"New SM for the B flow created"); 
                                  
                                    if (IntORp.OKFlag != 1) then begin
                                        RecordCopy(newIntORp,IntORp);
                                        IntORp.OKFlag = 1;
                                        RecordUpdate(newIntORp,IntORp,true); 
                                      end;

                                  CreateRecordLink(StockMovBFlr,CurrentCompany,IntORp,CurrentCompany);
                                  CreateRecordLink(IntORp,CurrentCompany,StockMovBFlr,CurrentCompany);
                                end else begin   
                                  LogText(0,"New SM for the B flow could not be created"); 
                                end; 
                        end; 
                        //

                        //Creating SM for C flr  
                        newSM = false; 
                         if(MatRowCnt(StockMovCFlr) > 0) then begin 
                          newSM = true; 
                        end; 
                        if(newSM) then begin 
                            StockMovCFlr.SerNr = NextSerNr("StockMovVc",CurrentDate,0,false,"");
                            if(RecordStore(StockMovCFlr,false)) then begin 
                              //LogText(0,"New SM for the C flow created"); 

                                if (IntORp.OKFlag != 1) then begin
                                    RecordCopy(newIntORp,IntORp);
                                    IntORp.OKFlag = 1;
                                    RecordUpdate(newIntORp,IntORp,true); 
                                  end;
                              
                              CreateRecordLink(StockMovCFlr,CurrentCompany,IntORp,CurrentCompany);
                              CreateRecordLink(IntORp,CurrentCompany,StockMovCFlr,CurrentCompany);
                            end else begin   
                              LogText(0,"New SM for the C flow could not be created"); 
                            end; 
                        end; 
                        //


  end; 

  //end;  
LPasteIntOrdInStockMov:; 
  RETURN;
END;
