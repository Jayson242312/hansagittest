//  VER: 7.1 71120450 (2013-10-13) - AG 2013-11-04 - upgraded
//  VER 6.4 64241500
// 23.12.2010 Developed for version 6.1 100512

global
updating procedure ItemsVcIn()
begin
  record PIVc PIr;
  record PIVc PI2r;
  record INVc INr, oldINr;
  row INVc INrw;
  record CUVc CUr;
  string 255 inputline;
  Boolean pCh;
  Integer updatecnt;

  while(TestEOF==false) begin
    inputline=importField;
    if(inputline=="ItemCode") then begin
      goto LA1;
    end else begin
      INr.Code=inputline;  //ItemCode
      pCh = ReadFirstMain(INr,1,true);
      if(pCh) then begin
        RecordCopy(oldINr,INr);
        inputline=importField;
        //if (INr.Name <> inputline) then begin diff = true; end; //Check for updated Record
        INr.Name=inputline;  //Description
        inputline=importField;
        INr.Group=inputline; //Group
        inputline=importField;
        INr.InPrice=StringToVal(inputline,M4Val); //CostPrice
        inputline=importField;
        // INr.ABCUPrice=StringToVal(inputline,M4Val); //Weighed
        // inputline=importField;
        // INr.ABC=inputline; //abc
        // inputline=importField;
        INr.WeighedAvPrice=StringToVal(inputline,M4Val);  //Weighed
        inputline=importField;
        INr.LastPurchPrice = StringToVal(inputline,M4Val);  //LastPurchCost
        inputline=importField;
        INr.LastPurchPrice2 = StringToVal(inputline,M4Val);  //LatPurchPrice
        inputline=importField;
        INr.UPrice1=StringToVal(inputline,M4Val); //BasePrice
        inputline=importField;
        INr.DispGroups=inputline; //Classification
        inputline = importField;
        INr.ItemType=StringToVal(inputline,M40Val);  //ItemType
        inputline = importField;
        INr.UpdateCost = StringToVal(inputline,M40Val);  //WeightedAvg
        inputline=importField;
        INr.MinLevel=StringToVal(inputline,M40Val); //MinLevel
        inputline=importField;
        INr.MaxLevel=StringToVal(inputline,M40Val); //MaxLevel
        inputline = importField;
        INr.Terminated = StringToVal(inputline,M40Val); //Closed
        inputline = importField;
        INr.Unittext = inputline;  //Unit
        inputline = importField;
        INr.InvCode = inputline; //ShelfCode
        inputline = importField;
        INr.SerNrf = StringToVal(inputline,M40Val);  //Serialised
        inputline = importField;
        INr.Width = StringToVal(inputline,M4Val);  //Width
        inputline = importField;
        INr.Height = StringToVal(inputline,M4Val);  //Height
        inputline = importField;
        INr.Depth = StringToVal(inputline,M4Val);  //Depth
        inputline = importField;
        INr.Volume = StringToVal(inputline,M4Val);  //Volume
        inputline = importField;
        INr.Density = StringToVal(inputline,M4Val);  //Density
        inputline = importField;
        INr.Weight = StringToVal(inputline,M4Val);  //Weight
        inputline = importField;
        INr.Unittext2 = inputline;  //Unit 2
        /*SKIP ROWS
        inputline = importField;
        INrw.Text = inputline;
        MatRowInsert(INr,MatRowCnt(INr),INrw);  //text1
        inputline = importField;
        INrw.Text = inputline;
        MatRowInsert(INr,MatRowCnt(INr),INrw);  //text2
        inputline = importField;
        INrw.Text = inputline;
        MatRowInsert(INr,MatRowCnt(INr),INrw);  //text3
        */
        inputline = importField;
        INr.BarCode = inputline; //Barcode
        inputline = importField;
        INr.UserStr1 = inputline; //Userdef1
        inputline = importField;
        INr.UserStr2 = inputline; //Userdef2
        inputline = importField;
        INr.UserStr3 = inputline; //Userdef3
        inputline = importField;
        INr.UserStr4 = inputline; //Userdef4
        inputline = importField;
        INr.UserStr5 = inputline; //Userdef5
        inputline = importField;
        INr.UserVal1 = StringToVal(inputline,M4UVal); //Userval1
        inputline = importField;
        INr.UserVal2 = StringToVal(inputline,M4UVal); //Userval2
        inputline = importField;
        INr.UserVal3 = StringToVal(inputline,M4UVal); //Userval3
        inputline = importField;
        INr.UserDate1 = StringToDate(inputline); //Userdate1
        inputline = importField;
        INr.UserDate2 = StringToDate(inputline); //Userdate2
        inputline = importField;
        INr.UserDate3 = StringToDate(inputline); //Userdate3
        inputline = importField;
        INr.Objects = inputline;  //Objects
        inputline = importField;
        INr.AlternativeCode = inputline;  //AlternativeCode
        inputline = importField;
        INr.Redundant = StringToInt(inputline);  //isRedundant
        inputline = importField;
        INr.OldUPrice1 = StringToVal(inputline,M4Val);  //OldBasePrice
        inputline = importField;
        INr.Department = inputline;  //Department

        if(RecordStore(INr,true))then begin end;
      end;
    end;
    LA1:;
    if(NextImportLine(true)) then begin end;
  end;
  return;
end;
