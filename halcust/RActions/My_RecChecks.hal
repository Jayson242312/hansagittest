//  VER: 7.1 71120450 (2013-10-13) - AG 2013-11-11 - upgraded
//  VER 6.4 64241500

//Item Group
global
updating function LongInt ITVcRecordCheck(var record ITVc ITr,record ITVc IT2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = 0;
  // EVS: GREG-1 (added inner. line) there *are* standard record checks, unless they were omitted intentionally,
  // but that is not specified (should be if that is the case so as not to confuse others)
  res = inner.ITVcRecordCheck(ITr,IT2r,stat,long4);
  
  if (res != -1) then begin
   if (Blank(ITr.MrkUpPerc)) then begin
    RecordCheckError(23016,"",-1,"MrkUpPerc");
    res = -1;
    goto LITVcRecordCheck;
   end;
  end;

LITVcRecordCheck:;
ITVcRecordCheck = res;
  RETURN;
END;

global
updating function LongInt INVcRecordCheck(var record INVc INr,record INVc IN2r,LongInt stat,LongInt long4)
begin
  LongInt res,wnst;

  // EVS: GREG-1 removing WindowState and replacing with appropriate code. RecordCheck is executed on the
  // server and this could cause some weird issues.

//  wnst = WindowState(CurWindow);

  res = inner.INVcRecordCheck(INr,IN2r,stat,long4);
  
//  if (res<>-1 and wnst==1) then begin
  if (res<>-1 and stat == Rs_update) then begin // EVS: GREG-1
    if  (Blank(INr.UserDate1)) then begin
      RecordCheckError(23016,"",-1,"UserDate1");
      res = -1;
    end;
  end;

  //LHCVcRecordCheck:;
  INVcRecordCheck = res;
  return;
end;

global
updating function LongInt ORVcRecordCheck(record ORVc ORr,record ORVc OR2r,LongInt stat,LongInt check)
begin
  LongInt res;

  res = inner.ORVcRecordCheck(ORr,OR2r,stat,check);
  
  if (res<>-1) then begin
    if  (Blank(ORr.Location)) then begin
      RecordCheckError(23016,"",-1,"Location");
      res = -1;
    end;
  end;

  //LHCVcRecordCheck:;
  ORVcRecordCheck = res;
  return;
end;

global
updating function LongInt OPVcRecordCheck(record OPVc OPp,record OPVc OP2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  row OPVc OPrw;
  integer rwcnt,i;
  String 50 VECode;

  res = inner.OPVcRecordCheck(OPp,OP2p,stat,long4);
  if (res<>-1) then begin
    MatRowGet(OPp,0,OPrw);
    VECode = OPrw.VECode;
    rwcnt = MatRowCnt(OPp);
    for (i=1;i<rwcnt;i=i+1) begin
      MatRowGet(OPp,i,OPrw);
      if (OPrw.VECode <> VECode) then begin
        MatRowDelete(OPp,i);
        RecordCheckError(23017,"",i,"VECode");
        res = -1;
        goto LOPVcRecordCheck;
      end;
    end;
  end;
  LOPVcRecordCheck:;
  OPVcRecordCheck = res;
  return;
end;

global
function LongInt POVcRecordCheck(var record POVc POr,record POVc PO2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = inner.POVcRecordCheck(POr,PO2r,stat,long4);
  if (res<>-1) then begin
    if  (Blank(POr.Location)) then begin
      RecordCheckError(23016,"",-1,"Location");
      res = -1;
    end;
  end;

  //LHCVcRecordCheck:;
  POVcRecordCheck = res;
  return;
end;

//Stock depreciation
global
updating function LongInt SDVcRecordCheck(var record SDVc SDr,record SDVc SD2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  row SDVc SDrw;
  record StandProblemVc problemr;
  record ReasonLimitSDVc RLsdr;
  Integer i,rwcnt;

  res = inner.SDVcRecordCheck(SDr,SD2r,stat,long4);
  
//   if (res<>-1) then begin
//     if (NonBlank(SDr.Reason)) then begin
//       RLsdr.UserCode = CurrentUser;
//       if (ReadFirstMain(RLsdr,1,true)) then begin
//         if (SetInSet(SDr.Reason,RLsdr.Reasons)==false) then begin
//           RecordCheckError(3100024,"",-1,"Reason");
//           res = -1;
//           goto LHCVcRecordCheck;
//         end;
//       end else begin
//         RecordCheckError(3100024,"",-1,"Reason");
//         res = -1;
//         goto LHCVcRecordCheck;
//       end;
//     end;

//     if (Blank(SDr.Reason)) then begin
//       RecordCheckError(3100022,"",-1,"Reason");
//       res = -1;
//       goto LHCVcRecordCheck;
//     end;
//     problemr.Code = SDr.Reason;
//     if (ReadFirstMain(problemr,1,true)) then begin
//         //Do nothing
//     end else begin
//       beep;
//       RecordCheckError(3100022,"",-1,"Reason");
//       res = -1;
//       goto LHCVcRecordCheck;
//     end;

//     rwcnt = MatRowCnt(SDr);
//       for (i=0;i<rwcnt;i=i+1) begin
//         MatRowGet(SDr,i,SDrw);
//         if (NonBlank(SDr.Reason) and Blank(SDrw.CostAcc)) then begin
//           RecordCheckError(23016,": SDrw.CostAcc",i,"CostAcc");
//           res = -1;
//           goto LHCVcRecordCheck;
//         end;
//         if (NonBlank(SDrw.CostAcc)) then begin
//           problemr.Code = SDr.Reason;
//           if (ReadFirstMain(problemr,1,true)) then begin
//             if (SDrw.CostAcc <> problemr.Account) then begin
//               RecordCheckError(3100023,": SDrw.CostAcc",i,"CostAcc");
//               res = -1;
//               goto LHCVcRecordCheck;
//             end;
//           end;
//         end;
//       end;
//   end;
// LHCVcRecordCheck:;
SDVcRecordCheck = res;
  RETURN;
END;

// //Goods Receipt
// /*
// global
// updating function LongInt PUVcRecordCheck(var record PUVc PUr,record PUVc PU2r,LongInt stat,LongInt long4)
// begin
//   LongInt res;
//   record StandProblemVc problemr;
//   row PUVc PUrw;
//   Integer i,rwcnt;
//   record ReasonLimitGRVc RLgrvr;
//   boolean testf;
//   res = 0; 
//   //res = inner.PUVcRecordCheck(PUr,PU2r,stat,long4);
//  /* if (res<>-1) then begin
//     testf = false;
//    if (NonBlank(PUr.Reason)) then begin
//       RLgrvr.UserCode = CurrentUser;
//       if (ReadFirstMain(RLgrvr,1,true)) then begin
//         if (SetInSet(PUr.Reason,RLgrvr.Reasons)==false) then begin
//           RecordCheckError(3100024,"",-1,"Reason");
//           res = -1;
//         goto LHCVcRecordCheck;
//         end;
//       end else begin
//         RecordCheckError(3100024,"",-1,"Reason");
//         res = -1;
//         goto LHCVcRecordCheck;
//       end;
//     end;
    
//     if (PUr.ADORLocked == 1) then begin
//       RecordCheckError(3100040,"",-1,"ADORLocked");
//       res = -1;
//     end;

//     if (Blank(PUr.Reason)) then begin
//       RecordCheckError(3100022,"",-1,"Reason");
//       res = -1;
//       goto LHCVcRecordCheck;
//     end;
//     problemr.Code = PUr.Reason;
//     if (ReadFirstMain(problemr,1,true)) then begin
//         //Do nothing
//     end else begin
//       beep;
//       RecordCheckError(3100022,"",-1,"Reason");
//       res = -1;
//       goto LHCVcRecordCheck;
//     end;

//   end;
// LHCVcRecordCheck:; 
// PUVcRecordCheck = res;
//   RETURN;
// END; */

//Location Items
function LongInt MinPerLocVcRecordCheck(var record MinPerLocVc LITr,record MinPerLocVcVc LIT2r,LongInt stat,LongInt long4)
begin
  LongInt res;
  record MinPerLocVc LIr;

  res = inner.MinPerLocVcRecordCheck(LITr,LIT2r,stat,long4);
  LIr.ItemCode = LITr.ItemCode;
  LIr.Location = LITr.Location;
  if (res<>-1) then begin
    if (ReadFirstMain(LIr,2,true)) then begin
      if ((LIr.ItemCode == LITr.ItemCode) and (LIr.Location == LITr.Location)) then begin
        RecordCheckError(3100025,"",-1,"ItemCode");
        res = -1;
        goto LMinPerLocVcRecordCheck;
      end;
    end;
  end;

LMinPerLocVcRecordCheck:;
MinPerLocVcRecordCheck = res;
  return;
end;

//  AG 2013-06-05 -- ORB001-130523-001 -- Inventory Export Rules >>
global
updating function LongInt InvExpRulesVcRecordCheck(var record InvExpRulesVc IERr,record InvExpRulesVc IER2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = 0;
  if  (Blank(IERr.Location)) then begin
    RecordCheckError(23016,"",-1,"Location");
    res = -1;
    goto LInvExpRulesVcRecordCheck;
  end;

  LInvExpRulesVcRecordCheck:;
  InvExpRulesVcRecordCheck = res;
  return;
end;
//  AG 2013-06-05 <<