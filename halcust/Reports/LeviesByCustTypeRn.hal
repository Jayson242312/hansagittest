external inner function string 255 MonthName(Date);

//
global
procedure LeviesByCustTypeRn(record RcVc RepSpec)
begin
  Record ItemPayHistVc ItemPayHistr;
  record NAContractVc COr;
  record AccountTypeVc AccountTyper;
  boolean wloop,found;
  Integer arr_size,i,j;
  date datePeriod,periodEnd;
  string 255 accType;

  array String 225 arr_acctype;
  Date sd,ed;
  Date sd_Over120,ed_Over120;

  array val arr_invoice;
  array val arr_invoice30;
  array val arr_invoice60;
  array val arr_invoice90;
  array val arr_invoice120;
  array val arr_invoiceOver120;

  array val arr_monthSum;
  array val arr_itemSum;


  // start report job
  StartReportJob("Levies Aged by Customer-Type");
  
  // no period
  if(blank(RepSpec.f2)) then begin
    RepSpec.f2 = CurrentDate; // default period
  end;

  arr_size = 0;
  wloop = true;

  // set date for over 120 days
  datePeriod = RepSpec.f2;
  sd_Over120 = AddMonth(datePeriod,-5);
  ed_Over120 = sd_Over120;
  ed_Over120.day = DaysInMonth(GetYear(sd_Over120),GetMonth(sd_Over120));


  // loop item-payment-history
  ItemPayHistr.SerNr = 1;
  While LoopKey("SerNr",ItemPayHistr,1,wloop) begin


    // get contract -> account type
    accType = "";
    COr.SerNr = ItemPayHistr.ContrSerNr;
    if(ReadFirstMain(COr,1,true)) then begin

      // if account.no matches
      if((nonblank(RepSpec.f1)) AND (RepSpec.f1 != COr.AccountType)) then begin
        goto LSkip;
      end;

      // -> account type name
      accType = COr.AccountType;
      // AccountTyper.Code = COr.AccountType;
      // if(ReadFirstMain(AccountTyper,1,true)) then begin
      //   accType = AccountTyper.Name;
      // end;
    end else begin
      if(nonblank(RepSpec.f1)) then begin
        goto LSkip;
      end;
    end;


    // is transaction a levy - invoice or credit.note
    if(ItemPayHistr.FileName == 1 OR ItemPayHistr.FileName == 2) then begin
      
      j = 0;
      While(j >= -4) begin
        //
        datePeriod = RepSpec.f2;
        sd = AddMonth(datePeriod,j);
        sd.day = 1;
        ed = sd;
        ed.day = DaysInMonth(GetYear(sd),GetMonth(sd));

        // is transaction within spec.date.range
        if(DateInRange(ItemPayHistr.TransDate,sd,ed)) then begin
          
          // -> CURRENT
          if(j == 0) then begin
            found = false;
            for(i=0; i<arr_size; i=i+1) begin
              // if item in array
              if(accType == arr_acctype[i]) then begin
                // 
                if(ItemPayHistr.FileName == 2) then begin // if credit note
                  arr_invoice[i] = arr_invoice[i] - ItemPayHistr.AmtVal;  
                end else begin
                  arr_invoice[i] = arr_invoice[i] + ItemPayHistr.AmtVal;
                end;
                found = true;
              end;
            end;
            // if item not in array
            if(found==false) then begin
              arr_acctype[arr_size] = accType;
              //
              if(ItemPayHistr.FileName == 2) then begin // if credit note
                arr_invoice[arr_size] = arr_invoice[arr_size] - ItemPayHistr.AmtVal;
              end else begin
                arr_invoice[arr_size] = arr_invoice[arr_size] + ItemPayHistr.AmtVal;
              end;
              arr_size = arr_size + 1;
            end;
          end;

          // -> 30 DAYS
          if(j == -1) then begin
            found = false;
            for(i=0; i<arr_size; i=i+1) begin
              // if item in array
              if(accType == arr_acctype[i]) then begin
                if(ItemPayHistr.FileName == 2) then begin // if credit note                
                  arr_invoice30[i] = arr_invoice30[i] - ItemPayHistr.AmtVal;
                end else begin
                  arr_invoice30[i] = arr_invoice30[i] + ItemPayHistr.AmtVal;
                end;
                found = true;
              end;
            end;
            // if item not in array
            if(found==false) then begin
              arr_acctype[arr_size] = accType;
              //
              if(ItemPayHistr.FileName == 2) then begin // if credit note
                arr_invoice30[arr_size] = arr_invoice30[arr_size] - ItemPayHistr.AmtVal;
              end else begin
                arr_invoice30[arr_size] = arr_invoice30[arr_size] + ItemPayHistr.AmtVal;
              end;
              arr_size = arr_size + 1;
            end;
          end;

          // -> 60 DAYS
          if(j == -2) then begin
            found = false;
            for(i=0; i<arr_size; i=i+1) begin
              // if item in array
              if(accType == arr_acctype[i]) then begin
                if(ItemPayHistr.FileName == 2) then begin // if credit note            
                  arr_invoice60[i] = arr_invoice60[i] - ItemPayHistr.AmtVal;
                end else begin
                  arr_invoice60[i] = arr_invoice60[i] + ItemPayHistr.AmtVal;
                end;
                found = true;
              end;
            end;
            // if item not in array
            if(found==false) then begin
              arr_acctype[arr_size] = accType;
              //
              if(ItemPayHistr.FileName == 2) then begin // if credit note
                arr_invoice60[arr_size] = arr_invoice60[arr_size] - ItemPayHistr.AmtVal;
              end else begin
                arr_invoice60[arr_size] = arr_invoice60[arr_size] + ItemPayHistr.AmtVal;
              end;
              arr_size = arr_size + 1;
            end;
          end;

          // -> 90 DAYS
          if(j == -3) then begin
            found = false;
            for(i=0; i<arr_size; i=i+1) begin
              // if item in array
              if(accType == arr_acctype[i]) then begin
                if(ItemPayHistr.FileName == 2) then begin // if credit note 
                  arr_invoice90[i] = arr_invoice90[i] - ItemPayHistr.AmtVal;
                end else begin
                  arr_invoice90[i] = arr_invoice90[i] + ItemPayHistr.AmtVal;
                end;
                found = true;
              end;
            end;
            // if item not in array
            if(found==false) then begin
              arr_acctype[arr_size] = accType;
              //
              if(ItemPayHistr.FileName == 2) then begin // if credit note
                arr_invoice90[arr_size] = arr_invoice90[arr_size] - ItemPayHistr.AmtVal;
              end else begin
                arr_invoice90[arr_size] = arr_invoice90[arr_size] + ItemPayHistr.AmtVal;
              end;
              arr_size = arr_size + 1;
            end;
          end;

          // -> 120 DAYS
          if(j == -4) then begin
            found = false;
            for(i=0; i<arr_size; i=i+1) begin
              // if item in array
              if(accType == arr_acctype[i]) then begin
                if(ItemPayHistr.FileName == 2) then begin // if credit note          
                  arr_invoice120[i] = arr_invoice120[i] - ItemPayHistr.AmtVal;
                end else begin
                  arr_invoice120[i] = arr_invoice120[i] + ItemPayHistr.AmtVal;
                end;
                found = true;
              end;
            end;
            // if item not in array
            if(found==false) then begin
              arr_acctype[arr_size] = accType;
              //
              if(ItemPayHistr.FileName == 2) then begin // if credit note
                arr_invoice120[arr_size] = arr_invoice120[arr_size] - ItemPayHistr.AmtVal;
              end else begin
                arr_invoice120[arr_size] = arr_invoice120[arr_size] + ItemPayHistr.AmtVal;
              end;
              arr_size = arr_size + 1;
            end;
          end;
        end;
        j = j-1;
      end;


      // is transaction after 120 spec.date.range
      if(ItemPayHistr.TransDate <= ed_Over120) then begin
        found = false;
        for(i=0; i<arr_size; i=i+1) begin
          // if item in array
          if(accType == arr_acctype[i]) then begin
            if(ItemPayHistr.FileName == 2) then begin // if credit note            
              arr_invoiceOver120[i] = arr_invoiceOver120[i] - ItemPayHistr.AmtVal;
            end else begin
              arr_invoiceOver120[i] = arr_invoiceOver120[i] + ItemPayHistr.AmtVal;
            end;
            found = true;
          end;
        end;
        // if item not in array
        if(found==false) then begin
          arr_acctype[arr_size] = accType;
          //
          if(ItemPayHistr.FileName == 2) then begin // if credit note
            arr_invoiceOver120[arr_size] = arr_invoiceOver120[arr_size] - ItemPayHistr.AmtVal;
          end else begin
            arr_invoiceOver120[arr_size] = arr_invoiceOver120[arr_size] + ItemPayHistr.AmtVal;
          end;
          arr_size = arr_size + 1;
        end;
      end;

    LSkip:;
    end;
  end;



  periodEnd = RepSpec.f2;
  periodEnd.day = DaysInMonth(GetYear(RepSpec.f2),GetMonth(RepSpec.f2));

  if(nonblank(RepSpec.f1)) then begin
    StartFormat(15);
      OutString(1,0,"Levies Aged by Customer-Type: " & RepSpec.f1 & ", To: " & periodEnd,true);
    EndHeader;
    EndFormat;
    // AccountTyper.Code = RepSpec.f1;
    // if(ReadFirstMain(AccountTyper,1,true)) then begin
    //   StartFormat(15);
    //     OutString(1,0,"Levies Aged by Customer-Type: " & AccountTyper.Name & ", To: " & periodEnd,true);
    //   EndHeader;
    //   EndFormat;
    // end;
  end else begin
    StartFormat(15);  
      OutString(1,0,"Levies Aged by Customer-Type, To: " & periodEnd,true);
    EndHeader;
    EndFormat;
  end;

  StartFormat(15); // -> show heading
    OutString(0,0,"",false);
    OutString(5,0,"Types",false);
    OutString(210,0,MonthName(RepSpec.f2),true);
    OutString(250,0,"30 days",true);
    OutString(290,0,"60 days",true);
    OutString(330,0,"90 days",true);
    OutString(380,0,"120 days",true);
    OutString(430,0,"Over 120 days",true);
    OutString(1,0,"Total",true);
  EndFormat;

  Gray_Divider(0,1);

  for(i=0; i<arr_size; i=i+1) begin
  StartFormat(15); // -> show data
    OutString(0,0,"",false);
    // -> if unkown
    if(blank(arr_acctype[i])) then begin
      OutString(5,0,"",false);
    end else begin
      OutString(5,0,arr_acctype[i],false);
    end;
    OutString(210,0,arr_invoice[i],true);
    OutString(250,0,arr_invoice30[i],true);
    OutString(290,0,arr_invoice60[i],true);
    OutString(330,0,arr_invoice90[i] ,true);
    OutString(380,0,arr_invoice120[i],true);
    OutString(430,0,arr_invoiceOver120[i],true);
    // -> item total
    arr_itemSum[i] = arr_invoice[i] + arr_invoice30[i] + arr_invoice60[i] + arr_invoice90[i] + arr_invoice120[i] + arr_invoiceOver120[i];
    OutString(1,0,arr_itemSum[i],true);

    // -> period total
    arr_monthSum[0] = arr_monthSum[0] + arr_invoice[i];
    arr_monthSum[1] = arr_monthSum[1]  + arr_invoice30[i];
    arr_monthSum[2] = arr_monthSum[2]  + arr_invoice60[i];
    arr_monthSum[3] = arr_monthSum[3]  + arr_invoice90[i];
    arr_monthSum[4] = arr_monthSum[4]  + arr_invoice120[i];
    arr_monthSum[5] = arr_monthSum[5]  + arr_invoiceOver120[i];
  EndFormat;
  end;
  
  Gray_Divider(0,1);

  StartFormat(15); // show sum by period
    OutString(0,0,"",false);
    OutString(5,0,"Total Levied:",false); 
    OutString(210,0,arr_monthSum[0],true);
    OutString(250,0,arr_monthSum[1],true);
    OutString(290,0,arr_monthSum[2],true);
    OutString(330,0,arr_monthSum[3],true);
    OutString(380,0,arr_monthSum[4],true);
    OutString(430,0,arr_monthSum[5],true);
    OutString(1,0,(arr_monthSum[0] + arr_monthSum[1] + arr_monthSum[2] + arr_monthSum[3] + arr_monthSum[4] + arr_monthSum[5]),true);
  EndFormat;

  Gray_Divider(0,1);
  
  EndJob;

end;