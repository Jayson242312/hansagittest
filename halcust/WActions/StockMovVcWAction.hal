remote updating procedure AddOneStockMovToADORQueue(record StockMovVc); // TM - DESK 5130 
remote procedure AddOneStockMovInToADORQueue(record StockMovVc); // TM - DESK 5130 

global
function Boolean StockMovDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode,insertmode;
  record StockMovVc StockMovr;
  record StockMovVc prevStockMovr;
  
  res = true;
  normalmode = 0;//Rs_normal
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,StockMovr);
    if (StockMovr.OKFlag!=0) then begin
      res = false;
      //VN Block
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
        res = true;
      end;
      //End
    end;
  end;
  if (WindowState(wn)==insertmode) then begin
    GetWindowRecord(wn,StockMovr);
    if (StockMovr.SentOKFlag!=0) then begin
      res = false;
      //VN Block
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
        res = true;
      end;
      //End
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetWindowRecord(wn,StockMovr);
    GetPrevWindowRecord(wn,prevStockMovr);

    if (prevStockMovr.SentOKFlag==0) then begin
      if (StockMovr.SentOKFlag!=0) then begin
        res = false;
        //VN Block
        if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
          res = true;
        end;
        //End
      end;
    end;
  end;
  StockMovDClassOKFlagButtonAction = res;
  return;
end;

global
function Boolean StockMovDClassSentOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  Integer normalmode,updatemode,insertmode;
  record StockMovVc StockMovr;
  record StockMovVc StockMov2r;

  res = true;
  normalmode = 0;//Rs_normal
  insertmode = 1;//Rs_insert
  updatemode = 2;//Rs_update
  GetWindowRecord(wn,StockMovr);
  if (WindowState(wn)==normalmode) then begin
    if (StockMovr.SentOKFlag!=0) then begin
      res = false;
      //VN Block
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
        res = true;
      end;
      //End
    end;
    if (StockMovr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==insertmode) then begin
    if (StockMovr.OKFlag!=0) then begin
      res = false;
      //VN Block
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
        res = true;
      end;
      //End
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,StockMov2r);
    if (StockMov2r.SentOKFlag!=0) then begin
      res = false;
      //VN Block
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
        res = true;
      end;
      //End
    end;
    if (StockMov2r.OKFlag!=0) then begin
      res = false;
    end;
    if (StockMovr.OKFlag!=0) then begin
      res = false;
    end;
  end;
  if (blank(StockMovr.ThrouLocation)) then begin
    MessageBox(20080,"");
    res = false;
  end;
  StockMovDClassSentOKFlagButtonAction = res;
  return;
end;

global
function Boolean StockMovDClassOrdFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record StockMovVc StockMovr;
  record StockMovVc StockMov2r;

  res = true;
  GetWindowRecord(wn,StockMovr);
  if (WindowState(wn)==Rs_normal) then begin
    if (StockMovr.OrdFlag!=0) then begin
      res = false;
      //VN Block
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
        res = true;
      end;
      //End
    end;
    if (StockMovr.OKFlag!=0) then begin
      res = false;
    end;
    if (StockMovr.SentOKFlag!=0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,StockMov2r);
    if (StockMov2r.SentOKFlag!=0) then begin
      res = false;
    end;
    if (StockMov2r.OKFlag!=0) then begin
      res = false;
    end;
    if (StockMov2r.OrdFlag!=0) then begin
      res = false;
      //VN Block
      if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
        res = true;
      end;
      //End
    end;
  end; 
  if (StockMovr.OrdFlag!=0) then begin
    if (UserCanAction("StockMovOrdFlagOff",true)==false) then begin
      res = false;
    end;   
  end else begin
    if (UserCanAction("StockMovOrdFlag",true)==false) then begin
      res = false;
    end; 
  end;
  StockMovDClassOrdFlagButtonAction = res;
  return;
end;

//global // EVS: GREG-1 moving this to the proper file, otherwise it will not work
//function Integer IsUnOKAllowed_StockMovVc(record StockMovVc SMp)
//begin
//  Integer res;
//  record MainStockBlock MSb;
//
//  res = 0;
//  BlockLoad(MSb);
//  //VN Block
//  if ((UserCanAction("UnOKAll",false) or UserCanAction("UnOKStockMov",false))) then begin
//    res = 0;
//  end else begin
//    if (nonblankdate(MSb.StockCorectAfter)) then begin
//      if (SMp.TransDate<MSb.StockCorectAfter) then begin
//        res = 20884;
//        goto LIsUnOKAllowed_StockMovVc;
//      end;
//    end else begin
//      res = 20884;
//      goto LIsUnOKAllowed_StockMovVc;
//    end;
//    if (nonblank(SMp.Hash)) then begin
//      res = 20650;
//      goto LIsUnOKAllowed_StockMovVc;
//    end;
//  end;
//  //End
//LIsUnOKAllowed_StockMovVc:;
//  IsUnOKAllowed_StockMovVc = res;
//  return;
//end;

// TM - DESK 5130 
global
function Boolean StockMovDClassADORLockedButtonAction(Integer wn,Integer value)
begin
  StockMovDClassADORLockedButtonAction = false;
  return;
end;

global
updating procedure SendStockMovToADORDsm()
begin
  record StockMovVc StockMovr;
  record RcVc RepSpec;
  Integer wn,i;


  wn = CurWindow;
  GetWindowRecord(wn,StockMovr);
  if (UserCanAction("SendToADOR",false)) then begin
    if ((WindowState(wn)==0)) then begin
      if(StockMovr.OrdFlag==1 and StockMovr.SentOKFlag==1) then begin 
          AddOneStockMovInToADORQueue(StockMovr);
          MessageBox(3100044,"");
          PutWindowRecord(wn,StockMovr);
      end else begin 
        AddOneStockMovToADORQueue(StockMovr);
        MessageBox(3100042,"");
        PutWindowRecord(wn,StockMovr);
      end; 
    end; 
end else begin
    MessageBox(3100041,"");
end;


  return;
end;
//:TM 

//TM - Stock Movement Customization for ADOR 

//Out Stock Movement 
function Boolean StockMovDClassADOROutSMEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  
  record StockMovVc StockMovr; 
  row StockMovVc StockMovrw; 
  record ADORInQVc ADORInQr; 
  row ADORInQVc ADORInQrw; 
  boolean testf,oncef; 
  integer i,j,k,rwcnt,rwcnt2,rwcnt3,sentquant; 
  string 20 artcode;
  val rowtotal,vat,vatpercent; 
   
  testf = false; 
  oncef = false; 

  DeselectWindow(wn,false); 
  GetWindowRecord(wn,StockMovr); //take what's on the window and populate the StockMovVc record 
  
  ADORInQr.SerNr = StockMovr.ADOROutSM; //use the order number 
   //and PO Number to search for a GRV in the ADORInQVc register 
  
  if(ReadFirstMain(ADORInQr,1,true)) then begin 
    ADORInQr.RecordType = "ADOROutSM";
        if(ADORInQr.RecordNr == StockMovr.SerNr) then begin 
            if(ADORInQr.OKFlag!=1 and StockMovr.OKFlag == 0 and StockMovr.OrdFlag == 1 and StockMovr.SentOKFlag == 0 and StockMovr.ADORLocked == 1 ) then begin  
              testf = true; 
            end; 
           
            if(testf) then begin 
                      rwcnt = MatRowCnt(StockMovr);
                      rwcnt2 = MatRowCnt(ADORInQr);
                      
                                for (i = 0; i < rwcnt; i = i + 1) begin //outer loop for register with many rows i.e. the StockMovVc
                                    MatRowGet(StockMovr, i, StockMovrw); //get row from record 
                                    oncef = false; //resets oncef  
                                    for(j=0; j<rwcnt2; j=j+1) begin //inner loop for register with fewer matrix rows 
                                          MatRowGet(ADORInQr, j, ADORInQrw);      
                                          
                                          if(StockMovrw.ArtCode == ADORInQrw.ArtCode) then begin
                                                oncef = true; //set oncef to true if we have a match 
                                                  StockMovrw.SentQuant = ADORInQrw.ADORQty; //update the StockMovVc quantity with Qty from ADOR 
                                                  MatRowPut(StockMovr,i,StockMovrw);  //Write to the StockMovr matrix 
                                                  PutWindowRecord(wn,StockMovr);      
                                          end; 
                                    end; 
                                      
                                    if(!oncef) then begin  //outside the inner loop because obviously the inner loop will be just for those that will be found in both registers 
                                        StockMovrw.SentQuant = 0; //set the quantities to 0 for those items that dont exist in the ADOR register 
                                        MatRowPut(StockMovr,i,StockMovrw); //write matrix row 
                                        PutWindowRecord(wn,StockMovr); //write record to window 
                                    end; 
                                end;  
                      
                      //-- calculating new totals 
                      StockMovr.TotSentQty = 0; 
                      rwcnt3 = MatRowCnt(StockMovr);
                  for (k = 0; k < rwcnt3; k = k + 1) begin
                        MatRowGet(StockMovr, k, StockMovrw); //get row from record 
                        StockMovr.TotSentQty = StockMovr.TotSentQty + StockMovrw.SentQuant; 
                        MatRowPut(StockMovr,k,StockMovrw);
                        PutWindowRecord(wn,StockMovr);
                  end; 
                      //----end of new totals calculation 

              

              end; 

              if(!testf) then begin 
                LogText(0,"Please make sure that the SM is already confirmed and that it's is not already sent or received")
              end; 
      
        end else begin 
          MessageBox(0,"Wrong ADOR Out Stock Movement Selected"); 
        end; 
        
  end;  //next end to be above this line 
    
  StockMovDClassADOROutSMEFAfter = true;
  return;
end; 

//In Stock Movement 
function Boolean StockMovDClassADORInSMEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  
  record StockMovVc StockMovr; 
  row StockMovVc StockMovrw; 
  record ADORInQVc ADORInQr; 
  row ADORInQVc ADORInQrw; 
  boolean testf,oncef; 
  integer i,j,k,rwcnt,rwcnt2,rwcnt3,quant; 
  string 20 artcode;
  val rowtotal,vat,vatpercent; 
   
  testf = false; 
  oncef = false; 

  DeselectWindow(wn,false); 
  GetWindowRecord(wn,StockMovr); //take what's on the window and populate the StockMovVc record 
  
  ADORInQr.SerNr = StockMovr.ADORInSM; 
   if(ReadFirstMain(ADORInQr,1,true)) then begin 
     ADORInQr.RecordType = "ADORInSM";
        if(ADORInQr.RecordNr == StockMovr.SerNr) then begin 
            if(ADORInQr.OKFlag == 0 and StockMovr.OKFlag == 0 and StockMovr.OrdFlag == 1 and StockMovr.SentOKFlag == 1 and StockMovr.ADORLocked == 1 ) then begin  
              testf = true; 
            end; 
           
            if(testf) then begin 
                      rwcnt = MatRowCnt(StockMovr);
                      rwcnt2 = MatRowCnt(ADORInQr);
                      
                                for (i = 0; i < rwcnt; i = i + 1) begin //outer loop for register with many rows i.e. the StockMovVc
                                    MatRowGet(StockMovr, i, StockMovrw); //get row from record 
                                    oncef = false; //resets oncef  
                                    for(j=0; j<rwcnt2; j=j+1) begin //inner loop for register with fewer matrix rows 
                                          MatRowGet(ADORInQr, j, ADORInQrw);      
                                          
                                          if(StockMovrw.ArtCode == ADORInQrw.ArtCode) then begin
                                                oncef = true; //set oncef to true if we have a match 
                                                  StockMovrw.Quant = ADORInQrw.ADORQty; //update the StockMovVc quantity with Qty from ADOR 
                                                  MatRowPut(StockMovr,i,StockMovrw);  //Write to the StockMovr matrix 
                                                  PutWindowRecord(wn,StockMovr);      
                                          end; 
                                    end; 
                                      
                                    if(!oncef) then begin  //outside the inner loop because obviously the inner loop will be just for those that will be found in both registers 
                                        StockMovrw.Quant = 0; //set the quantities to 0 for those items that dont exist in the ADOR register 
                                        MatRowPut(StockMovr,i,StockMovrw); //write matrix row 
                                        PutWindowRecord(wn,StockMovr); //write record to window 
                                    end; 
                                end;  
                      
                      //-- calculating new totals 
                      StockMovr.TotQty = 0; 
                      rwcnt3 = MatRowCnt(StockMovr);
                  for (k = 0; k < rwcnt3; k = k + 1) begin
                        MatRowGet(StockMovr, k, StockMovrw); //get row from record 
                        StockMovr.TotQty = StockMovr.TotQty + StockMovrw.Quant; 
                        MatRowPut(StockMovr,k,StockMovrw);
                        PutWindowRecord(wn,StockMovr);
                  end; 
                      //----end of new totals calculation 

              

              end; 

              if(!testf) then begin 
                LogText(0,"Please make sure that the SM is already confirmed and sent and that it's is not already received and that the branch is ador controlled"); 
              end; 
    
        end else begin 
          MessageBox(0,"Wrong ADOR In Stock Movement Selected"); 
        end; 
        
  end;  //next end above this line 
    
  StockMovDClassADORInSMEFAfter = true;
  return;
end; 

//

global
updating function Boolean StockMovDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ADOROutSM": res = StockMovDClassADOROutSMEFAfter(wn,rownr,changed!=0);  //  TM
    case "ADORInSM": res = StockMovDClassADORInSMEFAfter(wn,rownr,changed!=0); //TM 
    otherwise res = inner.StockMovDClassAfterEditField(wn,fieldname,fn,rownr,changed);
  end;

  StockMovDClassAfterEditField = res;
  return;
end;
//TM 