//  VER: 7.1 71120450 (2013-10-13) - AG 2013-11-04 - upgraded
//  VER 6.4 64241500
external inner function Integer TestAcceptanceStatus(Integer);

//Reasons
function Boolean ReasonLimitSDDClassUserCodeEFAfter(Integer wn,Integer changed)
begin
  record UserVc USr;
  record ReasonLimitSDVc RLSDr;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,RLSDr);
    if (NonBlank(RLSDr.UserCode)) then begin
      USr.Code = RLSDr.UserCode;
      if (ReadFirstMain(USr,1,true)) then begin
        RLSDr.UserName = USr.Name;
      end;
    end;
    PutWindowRecord(wn,RLSDr);
  end;

  ReasonLimitSDDClassUserCodeEFAfter = res;
  return;
end;

global
function Boolean ReasonLimitSDDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "UserCode": res = ReasonLimitSDDClassUserCodeEFAfter(wn,changed);
  end;

  ReasonLimitSDDClassAfterEditField = res;
  return;
end;

function Boolean ReasonLimitGRDClassUserCodeEFAfter(Integer wn,Integer changed)
begin
  record UserVc USr;
  record ReasonLimitGRVc RLSDr;
  Boolean res;

  res = true;
  if (changed!=0) then begin
    GetWindowRecord(wn,RLSDr);
    if (NonBlank(RLSDr.UserCode)) then begin
      USr.Code = RLSDr.UserCode;
      if (ReadFirstMain(USr,1,true)) then begin
        RLSDr.UserName = USr.Name;
      end;
    end;
    PutWindowRecord(wn,RLSDr);
  end;

  ReasonLimitGRDClassUserCodeEFAfter = res;
  return;
end;

global
function Boolean ReasonLimitGRDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "UserCode": res = ReasonLimitGRDClassUserCodeEFAfter(wn,changed);
  end;

  ReasonLimitGRDClassAfterEditField = res;
  return;
end;

function LongInt CheckifReconned(string Accno, date rcptdate)
begin
  record AccVc Accr;
  record MainVc mainr;
  record TRVc TRr;
  row TRVc TRrw;
  Boolean TrHs,Accs,testf;
  Integer trrwcnt,i;
  string 60 objstr;
  LongInt res;

  res = 0; //Unreconciled!
  Accr.AccNumber = Accno;
  Accs = true;
  while (LoopMain(Accr,1,Accs)) begin
    if (Accs) then begin
      mainr.AccNumber = Accr.AccNumber;
      mainr.TransDate = rcptdate;
      TrHs = true;
      ResetLoop(mainr);
      while (LoopMain(mainr,2,TrHs)) begin
        if (mainr.TransDate>rcptdate) then begin
          TrHs = false;
        end;
        if (TrHs) then begin
          if (mainr.AccNumber<>Accr.AccNumber) then begin
            TrHs = false;
          end;
        end;
        if (TrHs) then begin
          if (mainr.FileName=="TRVc") then begin
            TRr.Number = mainr.TransNr;
            TRr.IntYc = mainr.IntYc;
            if (ReadFirstMain(TRr,2,true)) then begin
              if (mainr.TransDate==TRr.TransDate) then begin
                trrwcnt = MatRowCnt(TRr);
                for (i=0;i<trrwcnt;i=i+1) begin
                  MatRowGet(TRr,i,TRrw);
                  if ((TRrw.stp==1) and (TRrw.ovst==0)) then begin
                    if ((TRrw.AccNumber==Accr.AccNumber) and (SetInSet(objstr,TRrw.Objects))) then begin
                      testf = true;
                      if (TRrw.Reconsf!=0) then begin
                        res = TRrw.Reconsf; //Reconciled?
                      end;
                    end;
                  end;
                end;
              end;
            end;
          end;
        end;
      end;
    end;
  end;

  CheckifReconned = res;
  return;
end;

//  RECEIPTS
global
function Boolean IPDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record IPVc IPr;
  row IPVc IPrw;//VN
  Integer normalmode,updatemode;
  LongInt reconed;//VN

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,IPr);
    if (IPr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        //VN BLOCK
        MatRowGet(IPr,0,IPrw);
        reconed = CheckifReconned(IPrw.ARAcc, IPrw.PayDate);
        if (reconed <> 0) then begin
          if (UserCanAction("UnOKReconnedRecs",false)) then begin
            res = true;//Allow saving
          end else begin
            res = false;//Disallow saving
            MessageBox(3100027,"");
          end;
        end else begin
          res = true;
        end;
        //END
      end;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,IPr);
    if (IPr.OKFlag!=0) then begin
      res = false;
    end;
  end;
//if (IPButActSpec(IPp,IP2p,WindowState(wn),*(Integer*)ap2)==false) then res = false;//I think it is not needed

  IPDClassOKFlagButtonAction = res;
  return;
end;

//  CASH IN
global
function Boolean CLInDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record CLInVc CLInr;
  row CLInVc CLInrw;//VN
  Integer normalmode,updatemode;
  LongInt reconed;//VN

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CLInr);
    if (CLInr.OKFlag!=0) then begin
      res = false;
    end;
    if (UserCanAction("UnOKAll",false)) then begin
      res = false;
      //VN BLOCK
      MatRowGet(CLInr,0,CLInrw);
      reconed = CheckifReconned(CLInrw.ARAPAcc, CLInr.TransDate);
      if (reconed <> 0) then begin
        if (UserCanAction("UnOKReconnedRecs",false)) then begin
          res = true;//Allow saving
        end else begin
          res = false;//Disallow saving
          MessageBox(3100027,"");
        end;
      end else begin
        res = true;
      end;
      //END
    end;
    if (UserCanAction("OKCashIn",true)==false) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CLInr);
    if (CLInr.OKFlag!=0) then begin
      res = false;
    end else begin
      if (UserCanAction("OKCashIn",true)==false) then begin
        res = false;
      end;
    end;
  end;

  CLInDClassOKFlagButtonAction = res;
  return;
end;

//  CASH OUT
global
function Boolean CLOutDClassOKFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record CLOutVc CLOutr;
  row CLOutVc CLOutrw;//VN
  Integer normalmode,updatemode;
  LongInt reconed;//VN

  res = true;
  normalmode = 0;//Rs_normal
  updatemode = 2;//Rs_update
  if (WindowState(wn)==normalmode) then begin
    GetWindowRecord(wn,CLOutr);
    if (CLOutr.OKFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        res = false;
        //VN BLOCK
        MatRowGet(CLOutr,0,CLOutrw);
        reconed = CheckifReconned(CLOutrw.APARAcc, CLOutr.TransDate);
        if (reconed <> 0) then begin
          if (UserCanAction("UnOKReconnedRecs",false)) then begin
            res = true;//Allow saving
          end else begin
            res = false;//Disallow saving
            MessageBox(3100027,"");
          end;
        end else begin
          res = true;
        end;
        //END
      end;
      if (UserCanAction("OKCashOut",true)==false) then begin
        res = false;
      end;
    end;
  end;
  if (WindowState(wn)==updatemode) then begin
    GetPrevWindowRecord(wn,CLOutr);
    if (CLOutr.OKFlag!=0) then begin
      res = false;
    end else begin
      if (UserCanAction("OKCashOut",true)==false) then begin
        res = false;
      end;
    end;
  end;

  CLOutDClassOKFlagButtonAction = res;
  return;
end;

//  PAYMENTS
global
function Boolean OPDClassDoneFlagButtonAction(Integer wn,Integer value)
begin
  Boolean res;
  record OPVc OPr;
  row OPVc OPrw;//VN
  record OPVc OP2r;
  Integer err;
  LongInt reconed;//VN
  res = true;
  GetWindowRecord(wn,OPr);
  err = TestAcceptanceStatus(OPr.AcceptanceStatus);
  if (err!=0) then begin
    MessageBox(err,"");
    res = false;
    goto LOPDClassDoneFlagButtonAction;
  end;
  if (WindowState(wn)==Rs_normal) then begin
/* Normal mode means that the Second record doesn't exist.
    GetPrevWindowRecord(wn,OP2r);
    if ((OPr.OrderedFlag==0) or (OP2r.OrderedFlag==0)) then begin
      res = false;
    end;
*/
    if (OPr.Invalid!=0) then begin res = false; end;
    if (OPr.DoneFlag!=0) then begin
      res = false;
      if (UserCanAction("UnOKAll",false)) then begin
        //VN BLOCK
        res = false;
        MatRowGet(OPr,0,OPrw);
        reconed = CheckifReconned(OPrw.APAcc, OPr.PayDate);
        if (reconed <> 0) then begin
          if (UserCanAction("UnOKReconnedRecs",false)) then begin
            res = true;//Allow saving
          end else begin
            res = false;//Disallow saving
            MessageBox(3100027,"");
          end;
        end else begin
          res = true; //  Orig
        end;
        //END
      end;
    end;
  end;
  if (WindowState(wn)==Rs_insert) then begin
    if (OPr.OrderedFlag==0) then begin
      res = false;
    end;
  end;
  if (WindowState(wn)==Rs_update) then begin
    GetPrevWindowRecord(wn,OP2r);
    if (OPr.OrderedFlag==0) then begin
      res = false;
    end;
    if ((OPr.DoneFlag!=0) and (OP2r.DoneFlag!=0)) then begin
      res = false;
    end;
    if (OP2r.Invalid!=0) then begin res = false; end;
  end;
//if (OPButActSpec(OPp,OP2p,WindowState(wn),*(Integer*)ap2)==false) then res = false;//I think it is not needed
LOPDClassDoneFlagButtonAction:;

  OPDClassDoneFlagButtonAction = res;
  return;
end;


//  AG 2013-06-05 -- ORB001-130523-001 - Inventory Exception Rules  >>
function Boolean InvExpRulesDClassGroupEFAfter(Integer wn,Integer rownr,Integer changedf)
begin
  record ITVc ITr;
  record InvExpRulesVc IERr;
  row InvExpRulesVc IERrw;

  if (changedf) then begin
    GetWindowRecord(wn,IERr);
    DeselectWindow(wn,false);
    MatRowGet(IERr,rownr,IERrw);
    ITr.Code = IERrw.Group;
    if (ReadFirstMain(ITr,1,true)) then begin
    end;
    IERrw.Description = ITr.Comment;
    MatRowPut(IERr,rownr,IERrw);
    PutWindowRecord(wn,IERr);
  end;

  InvExpRulesDClassGroupEFAfter = true;
  return;
end;

global
function Boolean InvExpRulesDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Group": res = InvExpRulesDClassGroupEFAfter(wn,rownr,changed);
  end;

  InvExpRulesDClassAfterEditField = res;
  return;
end;
//  AG 2013-06-05 <<

//  AG 2013-06-07 -- ORB001-130523-001 -- Last Sold Date - not allowed to manually create new or duplicate  >>
global
procedure LastSoldDateDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin

  duplOK = false;
  newOK = false;

  return;
end;

global
procedure LastSoldDateLClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin

  duplOK = false;
  newOK = false;

  return;
end;
//  AG 2013-06-07 <<

// EVS: GREG-17
global
function Boolean HALGMSStockSetTClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)
begin
  Boolean res;
  record HALGMSStockSetBlock setbl;
  record LocationVc Locr;

  res = true;
  switch (fieldname) begin
    case "ShelfLoc1":
      if (changed!=0) then begin
        GetWindowRecord(wn,setbl);
        Locr.Code = setbl.ShelfLoc1;
        if (ReadFirstMain(Locr,1,true)) then begin
          setbl.ShelfLoc1Name = Locr.Name;
        end else begin
          setbl.ShelfLoc1Name = "";
        end;
        PutWindowRecord(wn,setbl);
      end;
    case "ShelfLoc2":
      if (changed!=0) then begin
        GetWindowRecord(wn,setbl);
        Locr.Code = setbl.ShelfLoc2;
        if (ReadFirstMain(Locr,1,true)) then begin
          setbl.ShelfLoc2Name = Locr.Name;
        end else begin
          setbl.ShelfLoc2Name = "";
        end;
        PutWindowRecord(wn,setbl);
      end;
  end;

  HALGMSStockSetTClassAfterEditField = res;
  return;
end;
// :EVS