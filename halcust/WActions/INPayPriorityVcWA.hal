// remote function boolean IsINPayPriorityUsed(longint);// remote function boolean isINPayPriorityInInvoice(longint);global function string 255 TypeColumnINPayPriorityCC(Record INPayPriorityVc INPayPriorityr) begin  string 255 res;  Longint strnr;    strnr = 1000068 + INPayPriorityr.INPayType;  res = USetStr(strnr);    TypeColumnINPayPriorityCC=res;return;end;function boolean INPayPriorityDClassArtCodeEFAfter(integer wn,integer rownr,integer changed) begin  boolean res;  Record INPayPriorityVc INPayPrr;  Row INPayPriorityVc INPayPrrw;  Record INVc INr;    if changed!=0 then begin    GetWindowRecord(wn,INPayPrr);    MatRowGet(INPayPrr,rownr,INPayPrrw);    if nonblank(INPayPrrw.ArtCode) then begin      INr.Code=INPayPrrw.ArtCode;      if ReadFirstMain(INr,1,true) then begin        INPayPrrw.Comment=INr.Name;        MatRowPut(INPayPrr,rownr,INPayPrrw);        PutWindowRecord(wn,INPayPrr);      end else begin        beep;      end;    end;  end;    INPayPriorityDClassArtCodeEFAfter=res;end;global function boolean INPayPriorityDClassAfterEditField(Integer wn,string fieldname,Integer fn,Integer rownr,Integer changed)begin  Boolean res;    Switch(fieldname) begin    Case "ArtCode": res=INPayPriorityDClassArtCodeEFAfter(wn,rownr,changed);  end;    INPayPriorityDClassAfterEditField=res;end;globalfunction Boolean INPayPriorityDClassActiveEditField(Integer wn,string fieldname,Integer fn,Integer wnst,Integer rownr,Integer changed)BEGIN  Boolean res;  record INPayPriorityVc INPayPriorityr;  row INPayPriorityVc INPayPriorityrw;    res=true;  GetWindowRecord(wn,INPayPriorityr);  if windowstate(wn)!=1 then begin    // if fieldname!="Comment" then begin    //   if isINPayPriorityInInvoice(INPayPriorityr.SerNr) then begin    //     res=false;    //   end;    //   if IsINPayPriorityUsed(INPayPriorityr.SerNr) and UserCanAction("OBSChangeUsedINPayPr",false)==false and res then begin    //     res=false;    //   end;    // end;  end;    INPayPriorityDClassActiveEditField = res;  RETURN;END;globalfunction Boolean INPayPriorityDClassINPayTypeButtonAction(Integer wn,Integer value) begin  boolean res;  record INPayPriorityVc INPayPriorityr;    res = true;  GetWindowRecord(wn,INPayPriorityr);  if windowstate(wn)!=1 then begin    // if isINPayPriorityInInvoice(INPayPriorityr.SerNr) then begin    //   res=false;    // end;    // if IsINPayPriorityUsed(INPayPriorityr.SerNr) and UserCanAction("OBSChangeUsedINPayPr",false)==false and res then begin    //   MessageBox(1274," " & StringFromStringSet(3,"OBSChangeUsedINPayPr"));    //   res=false;    // end;  end;    INPayPriorityDClassINPayTypeButtonAction = res;  return;end;global function Boolean INPayPriorityDClassDeleteRowTest(Integer wn,Integer rownr) begin  Boolean res;  record INPayPriorityVc INPayPriorityr;    res=true;  GetWindowRecord(wn,INPayPriorityr);  if windowstate(wn)!=1 then begin    // if isINPayPriorityInInvoice(INPayPriorityr.SerNr) then begin    //   res=false;    // end;    // if IsINPayPriorityUsed(INPayPriorityr.SerNr) and UserCanAction("OBSChangeUsedINPayPr",false)==false and res then begin    //   MessageBox(1274," " & StringFromStringSet(3,"OBSChangeUsedINPayPr"));    //   res=false;    // end;  end;    INPayPriorityDClassDeleteRowTest=res;  return;end;global function Boolean INPayPriorityDClassInsertRowTest(Integer wn,Integer rownr) begin  Boolean res;  record INPayPriorityVc INPayPriorityr;    res=true;  GetWindowRecord(wn,INPayPriorityr);  if windowstate(wn)!=1 then begin    // if isINPayPriorityInInvoice(INPayPriorityr.SerNr) then begin    //   res=false;    // end;    // if IsINPayPriorityUsed(INPayPriorityr.SerNr) and UserCanAction("OBSChangeUsedINPayPr",false)==false and res then begin    //   MessageBox(1274," " & StringFromStringSet(3,"OBSChangeUsedINPayPr"));    //   res=false;    // end;  end;    INPayPriorityDClassInsertRowTest=res;  return;end;