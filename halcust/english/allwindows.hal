//NOTICE WHEN UPDATING: do not add superfluous external calls - only the ones that are actually used! This file will be sent to a mobile client.
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function string 60 UserDefined(string,string);
external inner function Boolean UseTaxTemplatesforTaxCalc();
// TravelLog
external inner function Integer LoginShortcuts();
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasApprovals();
external inner function Boolean HasAdvancedAccounting();

external inner function Boolean HasAdvancedStock();
external inner function Boolean HasBase2();
external inner function Boolean HasDownpayments();
external inner function Boolean HasExtTax();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasLanguages();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasObjects();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasQualityControl();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasEMail();
external inner function Boolean HasModCO();
external inner function Boolean HasModIN();
external inner function Boolean HasModNL();
external inner function Boolean HasModPO();
external inner function Boolean HasModPL();
external inner function Boolean HasModRent();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasAmazonIntegration();
external inner function Boolean HasSupplierStatus();
external inner function Boolean HasCategories();
external inner function Boolean HasContactClassification();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasLocalMachines();


//RP - Delete Old Transactions
external inner function Boolean HasModExp();//
external inner function Boolean HasModCheck();//
external inner function Boolean HasModCL();//
external inner function Boolean HasModAT2();//

//RP - Payments
external inner function Boolean HasBankImport();
external inner function Boolean HasModCheck();

//RP - Location
external inner function Boolean HasEbayIntegration();


//TM - DESK 5130 
external inner function Boolean HasThrouLocation();
external inner function Boolean HasModProd();
external inner function Boolean HasLimitedAccess();

//TM - Desk 5130 Deliveries 
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasModSO();

//TM - Desk 5130 Purchase Order 
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasModSVO();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasVATZone();
external inner function Boolean HasModCRM();
//TM

//START OF S/L POS TOUCH SCREEN 
external inner function Boolean StandardHansa();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasObjects();
external inner function Boolean HasItemClassification();
external inner function string 60 UserDefined(string,string);
external inner function Boolean IsEnterprise();
external inner function Boolean HasModRest();
external inner function Boolean HasStandardCRM();

//What we added 22-09-2018
external inner function Boolean UseTaxTemplatesforTaxCalc();
external inner function Boolean HasVarieties();
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function Boolean HasSalesGroup();
external inner function Boolean HasTREO();
external inner function Boolean HasApprovals();
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasModCRM();

//end of what we added 22-09-2018

//END OF S/L POS TOUCH SCREEN 

//Oudster - TM 
external inner function Boolean HasBuyBack();
external inner function Boolean HasPriceLists();
//End of Oudster 

//Item Pics - TM
external inner function Boolean HasCommunicator();
external inner function Boolean HasModSL();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasCustItem();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasAvalara();
external inner function Boolean HasModPOS();
external inner function Boolean HasModCredMan();
//

external inner procedure DrawPOSInterface2_ENG(string,string,record POSButtonsVc,string,Integer,Integer);
external inner function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner  function Boolean HasFiscalPrinter();
remote inner function string 255 CurDrawerCode(string);

window LocationDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,l,v,vm,vs;
  Integer tilenr;

  WindowBegin("Location",LocationDClass,CGview,-);
  SetWRect(64,80,570,520);
  UseView(LocationVc);
  v = 10; vs = 20; h = 120; h2 = 350; l = -60;
  if (IsEnterprise) then begin
    Tile(0,50+24,false,"",Code);
  end;
  EditField(h,v,120,"Code",Normal,Code,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    EditField(h2,v,l,"Group",Normal,Group,false,LocGrSClass);
  end;
  EditField(h,v+=vs,l,"Name",Normal,Name,false,0);
  if (IsEnterprise) then begin
    tilenr = 1;
    TileButton(tilenr,"Address"); tilenr = tilenr + 1;
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Warehouse"); tilenr = tilenr + 1;
    end;
    tilenr = 1;
    Tile(tilenr,350,false,tilenr,Addr0); tilenr = tilenr + 1;
    EditField(h,v=6,l,"Address",Normal,Addr0,false,0);
  end else begin
    EditField(h,v+=vs,l,"Address",Normal,Addr0,false,0);
  end;
    if (!HasLocalization("BRA") and !HasAvalara) then begin
      EditField(h,v+=vs,l,"",Normal,Addr1,false,0);
      EditField(h,v+=vs,l,"",Normal,Addr2,false,0);
      EditField(h,v+=vs,l,"",Normal,Addr3,false,0);
      EditField(h,v+=vs,l,"",Normal,Addr4,false,0);
    end else begin
      EditField(h,v+=vs,l,"House Number",Normal,Addr1,false,0);
      EditField(h,v+=vs,100,"Neighbourhood",Normal,Addr5,false,0);//Addr5
      EditField(h,v+=vs,100,"City",Normal,Addr2,false,0);
      EditField(h2,v,l,"Avalara City Code",Normal,AvalaraCityCode,false,0);
      EditField(h,v+=vs,100,"Postal Code",Normal,Addr3,false,0);
      EditField(h2,v,l,"Avalara State Code",Normal,AvalaraStateCode,false,0);
      EditField(h,v+=vs,100,"Country",Normal,Addr4,false,CountrySClass);
      EditField(h2,v,l,"Avalara Country Code",Normal,AvalaraCountryCode,false,0);
  end;
  EditField(h,v+=vs,l,"Contact",Normal,Contact,false,0);
  EditField(h,v+=vs,l,"Telephone",Normal,Phone,false,0);
  EditField(h,v+=vs,l,"Fax",Normal,Fax,false,0);
  EditField(h,v+=vs,l,"Email",Normal,Email,false,0);
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,l,"Classification",Normal,Classification,false,LocClSClass);
    end;
    EditField(h,v+=vs,100,"Responsible Person",Normal,RespPerson,false,UserSClass);
    EditField(h2,v,l,"Reserv. Access",Normal,ReservLocAccess,false,ReservLocAccessSClass);
  end;
  if (HasModNL) then begin
    EditField(h,v+=vs,100,"#Stock# A/C",Normal,StockAcc,false,AccSClass);
  end;
  if (HasObjects) then begin
    EditField(h2,v,l,"Tag/Object",Normal,Objects,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
  //  EditField(h,v+=vs,100,"Price List",Normal,PriceList,false,PLDefSClass);//No Code
    EditField(h,v+=vs,100,"Purchase Location",Normal,PurLoc,false,LocationSClass);
    EditField(h2,v,l,"Ship-To Account",Normal,ShipToAccount,false,0);
    EditField(h,v+=vs,100,"Via Location",Normal,ThrouLocation,false,LocationSClass);
    CheckBox(h,vm=(v+=30),0,"Ignore Chronology",IgnoreChronology);
    CheckBox(h,v+=16,0,"Require Position",RequirePos);
    CheckBox(h,v+=16,0,"Closed",Closed);
    if (HasLocalization("BRA") and HasAvalara) then begin
      CheckBox(h,v+=16,0,"Public Way Service Location",PubWayServLoc);
    end;
    CheckBox(h,v+=vs,0,"Via Location",ViaLocation);//VN
    CheckBox(h,v+=vs,0,"ADOR controlled Location",ADORControl); // KOS: HAL-942
    ButtonFrame(h2,v=vm+10,100,2,"Type");
    RadioButton(h2,v,0,0,"Other",Type);
    RadioButton(h2,v+=16,1,0,"Production",Type);
  end;
  if (HasModWHM) then begin
    Tile(tilenr,310,false,tilenr,WHMPalletArea); tilenr = tilenr + 1;
    EditField(h=200,v=6,l=100,"Empty Pallets Area",Normal,WHMPalletArea,false,LocAreaSClass);
    EditField(h,v+=vs,l,"Picking Area",Normal,WHMPickArea,false,LocAreaSClass);
    EditField(h,v+=vs,l,"Position for Goods Receipts",Normal,WHMDefPUPosCode,false,PosSClass);
    EditField(h,v+=vs,l,"Position for Production",Normal,WHMDefProdPosCode,false,PosSClass);
    EditField(h,v+=vs,l,"Wrapping Machine Position",Normal,WHMWraperPosCode,false,PosSClass);
    EditField(h,v+=vs,l,"Delivery Position for Picking",Normal,WHMDeliveryPosCode,false,PosSClass);//the same as WraperPosCode at ethe moment
    EditField(h,v+=vs,l,"Delivery Area",Normal,WHMDeliveryArea,false,LocAreaSClass);
    EditField(h,v+=vs,l,"Express Orders",Normal,WHMExpressOrderClass,false,OrderClassSClass);
    EditField(h,v+=vs,l,"Def. #Supplier#",Normal,WHMDefPUVECode,false,VESClass);
    CheckBox(h,v+=24,0,"Require Position",RequirePos);
    CheckBox(h,v+=16,0,"Start from Highest Position",WHMHighestPosCodeFirst);
    ButtonFrame(h,v+=40,140,3,"Forklift System");
    RadioButton(h,v,0,0,"O_ff",WHMForkLiftSystem);
    RadioButton(h,v+=16,1,0,"On",WHMForkLiftSystem);
    RadioButton(h,v+=16,2,0,"On, Picking Mode Off",WHMForkLiftSystem);
  end;
  if (HasLocalization("BRA") and HasAvalara) then begin
    TileButton(tilenr,"Company");
    Tile(tilenr,310,false,tilenr,CompName); tilenr = tilenr + 1;
    EditField(h=130,v=6,-20,"Company Name",Normal,CompName,false,0);
    EditField(h,v+=vs,-20,"Business Name",Normal,BusinessName,false,0);
    EditField(h,v+=vs,140,"#VAT Reg. No.#",Normal,VATNr,false,0);
    EditField(h,v+=vs,140,"#Reg. No.#",Normal,RegNr1,false,0);
    EditField(h,v+=vs,140,"Sales Tax No.",Normal,RegNr2,false,RegDefSClass);
    EditField(h,v+=vs,-20,"Suframa ID",Normal,SuframaID,false,0);
    EditField(h,v+=vs,-20,"Tax Regime",Normal,TaxRegime,false,SetSClass);
    EditField(h,v+=vs,-20,"Business Entity",Normal,BusinessEntity,false,SetSClass);
  end;
  if (HasEbayIntegration) then begin
    SpecialMenu("Register Location on eBay",' ',1,"EbayCreateInventoryLocationLsm");
    SpecialMenu("Delete Location from eBay",' ',1,"EbayDeleteInventoryLocationLsm");
  end;
  EndWindow;
end;

window ORDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs,h5,flipnr,width;
  string 255 label;
  Integer rn;
  
  WindowBegin("Order",ORDClass,CGview,-);
  if (HasLocalization("BRA") and HasAvalara) then begin
    SetWRect(20,80,900,460);
  end else begin
    SetWRect(20,80,750,460);
  end;
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-120,"Name",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    EditField(h,vm=(v+=20),135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    CheckBox(h4=-100,v=6,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);
  end;
  CheckBox(h4,v+=16,0,"Closed",Closed);
  CheckBox(h4,v+=16,0,"Reserved",Reserved);  
  HalPushButton(h4-200,v+=26,-170,v+vs*2,"GrandmarkItemSearchsm","Grandmark Item Search"); // RP
  HalPushButton(h4-50,v,-20,v+vs*2,"VehiclePartsSearchsm","Vehicle Parts Search"); // RP
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Currency");
  TileButton(4,"Del. Terms");
  TileButton(5,"Price List");
  TileButton(6,"Inv. Address");
  TileButton(7,"Del. Address");
  TileButton(8,"Claim Detail"); //MDS GREG-9
  if (HasAmazonIntegration) then begin
    TileButton(8,"Web");
  end;
  Tile(1,110,false,"1",OrdDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Date",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Payment Terms",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs,82,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
  EditField(h1,v+=vs,82,"#Despatch# Date",Normal,DespatchDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"#Despatch# Time",Normal,DespatchTime,false,PasteCurTime);
  if ((HasLocalization("BRA") and HasAvalara)) then begin
    EditField(h1,v+=vs,82,"Withholding Mode",Normal,WithholdingMode,false,StrSetSClass);
    EditField(h2,v,135,"Process Origin",Normal,ProcessOrigin,false,StrSetSClass);
  end;
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,PRSClass);
  end;
  EditField(h3,v+=vs,80,"Order Class",Normal,OrderClass,false,OrderClassSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Order Type",Normal,OrderType,false,SetSClass);
    EditField(h3,v+=vs,80,"Sales Contract",Normal,ORCONr,false,ORCOSClass);
  end;
  // CheckBox(h4,v=6,0,"Closed",Closed);
  // CheckBox(h4,v+=16,0,"Reserved",Reserved);
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  if HasLocalization("BRA") and HasAvalara then begin
    EditField(55,-21,50,"With.Tax",Normal,WithholdingTax,true,0);
  end;
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(165,-41,65,"GP %",Normal,GPProc,true,0);
      EditField(165,-21,65,"Total GP",ViewOnly,TotGP,true,0);
    end;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(310,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
      EditField(310,-21,50,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end else begin
      EditField(290,-41,70,"Tax2",ViewOnly,TAX2Sum,true,0);
      EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end;
    EditField(410,-41,100,"#VAT#",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
      EditField(290,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    EditField(410,-41,100,"Tax",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,100,"Base",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,100,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  flipnr = 0;
  Flip(flipnr); flipnr = flipnr + 1;
  MatText(t=9,32,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Sum",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  //VN MatCol(t=1,32,"Item",0,ArtCode,false,INSClass);
  MatCol(t=1,30,"Item",0,ArtCode,false,INSClass); //  VN
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  t = 1;
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=10,32,"This row and all rows below it will be hidden on printout",false);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Description",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Tag/Object",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-204,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-154,"Tag/Object",0,Objects,false,ObjSClass);
    if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
      MatCol(t,-90,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-45,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Tag/Object",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-204,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-154,"Tag/Object",0,Objects,false,ObjSClass);
    if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
      MatCol(t,-90,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-45,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-350,"Order Type",0,OrderType,false,SetSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Cost",0,BasePrice,true,0);
    MatCol(t,-70,"GP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Cost",0,BasePrice,true,0);
    MatCol(t,-70,"GP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Desc.",0,Spec,false,0);
  MatCol(t,-300,"#Salesmen#",0,Salesmen,false,UserSClass);
  MatCol(t,-236,"Del.",0,Shipd1,true,0);
  MatCol(t,-184,"Del. OK",0,Shipd2,true,0);
  MatCol(t,-132,"Invoiced",0,Invd,true,0);
  MatCol(t,-80,"Recipe",0,Recepy,false,RecSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Desc.",0,Spec,false,0);
  MatCol(t,-290,"Del.",0,Shipd1,true,0);
  MatCol(t,-220,"Del. OK",0,Shipd2,true,0);
  MatCol(t,-150,"Invoiced",0,Invd,true,0);
  MatCol(t,-80,"Recipe",0,Recepy,false,RecSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  if (HasLocalization("BRA") and HasAvalara) then begin
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-540,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(t,-420,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
    MatCol(t,-355,"Price Factor",0,PriceFactor,true,0);
    MatCol(t,-285,"Other Cost",0,OtherCost,false,0);
    MatCol(t,-225,"Freight Cost",0,FreightCost,false,0);
    MatCol(t,-155,"Insurance",0,Insurance,false,0);
    MatCol(t,-100,"Untax. Other Cost",0,UntaxedOtherCost,false,0);
  end else begin
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-290,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(t,-150,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
    MatCol(t,-70,"Price Factor",0,PriceFactor,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-290,"Serial No.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Price Factor",0,PriceFactor,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Delivery Note",0,ShipNote,false,0);
  MatCol(t,-210,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Position",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Source",0,Source,true,SourceSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Delivery Note",0,ShipNote,false,0);
  MatCol(t,-210,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Position",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Source",0,Source,true,SourceSClass);
  if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Pick. Date",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Pick. Time",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Inl. Date",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Inl. Time",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"#Desp.# Date",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"#Desp.# Time",0,DespatchRowTime,true,PasteCurTime);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Pick. Date",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Pick. Time",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Inl. Date",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Inl. Time",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"#Desp.# Date",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"#Desp.# Time",0,DespatchRowTime,true,PasteCurTime);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Picture",'P','P',0,"ItemPicORDsm"); //RP
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"ORLastSPrsm");
  end;
  RowMenuItem(0,"Add Header Line",' ',' ',0,"ORAddHeaderLine");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"ORAddHidLine");
  RowMenuItem(0,"Add Subtotal Line",' ',' ',0,"SubtotalORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Manager's Discount Override",' ',' ',0,"MgrsDiscOverrideORDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  if (StandardHansa==false) then begin
    v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);  
  EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);   
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
  end;
  EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
  end;
  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
  EditField(h2,v+=vs,80,"Intrastat Code",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
  end;
  CheckBox(473,v=vm,0,"Invoice Before Delivery",InvBeforeShip);
  ButtonFrame(473,vm=(v+=20),240,3,"");
  RadioButton(473,v,0,0,"Default",SHShipSetToZero);
  RadioButton(473,v+=16,1,0,"Set delivered quantity to Zero",SHShipSetToZero);
  RadioButton(473,v+=16,2,0,"Set delivered quantity to Invoiced quantity",SHShipSetToZero);
  Tile(5,130,false,"5",PriceList);
  h3 = 530;
  EditField(h1,v=vm,80,"Price List",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Discount Matrix",Normal,RebCode,false,RebSClass);
//  EditField(h2,v+=vs,80,"Disc %",ViewOnly,DiscPerc,false,0);
//  EditField(h2,v+=vs,80,"Disc Amnt",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Credit Card",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"#Authorisation#",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,-20,"Comment",Normal,Comment,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment4,false,0);
  EditField(h1,v+=vs,-20,"Account Op.",Normal,BankCode,false,BankSClass);
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h1,v+=vs,80,"Spec. Situation",Normal,SpecSituation,false,StrSetSClass);
    CheckBox(h3,v,0,"Public Highway Service",PubHighwayServ);
    EditField(h1,v+=vs,80,"Admin Process No",Normal,AdminProcessNo,false,0);
  end;
  v = vm;
  if (HasSalesGroup) then begin
    EditField(h2,v,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
    v = v + vs;
  end;
  EditField(h2,v,80,"Language",Normal,LangCode,false,LangSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Commission",Normal,Commision,true,0);
    EditField(h2,v+=vs,80,"Total Incl. Com.",ViewOnly,SumIncCom,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v=vm,80,"TREO No.",Normal,TREONr,false,0);
    EditField(h3,v+=vs,80,"TREO Expiry Date",Normal,TREOExpDate,false,PasteCurDate);
  end;
  if (HasLocalization("FIN")) then begin
    EditField(h3,v+=vs,80,"Account Dimension",Normal,AccountDimension,false,0);
    EditField(h3,v+=vs,80,"Tender Reference",Normal,TenderReference,false,0);
    EditField(h3,v+=vs,80,"Contract",Normal,ContractNr,false,0);
  end;
  Tile(6,250,false,"6",Addr1);
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr3,false,0);
    EditField(h2+200,v,-20,"City Code",Normal,AvalaraCityCode,false,0);
  end else begin
    EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  end;
  label = UserDefined("CUVc","InvAddr4");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr4,false,0);
    EditField(h2+200,v,-20,"State Code",Normal,AvalaraStateCode,false,0);
  end else begin
    EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  end;
  EditField(h,vm=(v+=vs),80,"Country",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h2+200,v,-20,"Country Code",Normal,AvalaraCountryCode,false,0);
  end;
  if (HasLocalization("BRA")) then begin 
    EditField(h2-89,v,200,"",ViewOnly,InvCountryName,false,0);
    h5 = -140;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*  
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/    
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm+20,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  Tile(7,170,false,"7",ShipAddr0);
  EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);

  EditField(h1,v+=vs,-20,"Name",Normal,ShipAddr0,false,0);
  label = UserDefined("CUVc","DelAddr0");
  EditField(h,v+=vs,-20,label,Normal,ShipAddr1,false,0);
  label = UserDefined("CUVc","DelAddr1");
  EditField(h,v+=vs,-20,label,Normal,ShipAddr2,false,0);
  label = UserDefined("CUVc","DelAddr2");
  EditField(h,v+=vs,-20,label,Normal,ShipAddr3,false,0);
  label = UserDefined("CUVc","DelAddr3");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,200,label,Normal,DelAddr3,false,0);
    EditField(h+350,v,-20,"City Code",Normal,DelAvalaraCityCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,DelAddr3,false,0);
  end;
  label = UserDefined("CUVc","DelAddr4");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,200,label,Normal,DelAddr4,false,0);
    EditField(h+350,v,-20,"State code",Normal,DelAvalaraStateCode,false,0);
  end else begin
    EditField(h,v+=vs,-20,label,Normal,DelAddr4,false,0);
  end;
/*
  EditField(h1,v+=vs,-20,"Delivery",Normal,ShipAddr0,false,0);
  EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
*/ 
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h1+90,v,170,"",ViewOnly,DelCountryName,false,0);
    if (HasAvalara) then begin
      EditField(h1+350,v,-20,"Country Code",Normal,DelAvalaraCountryCode,false,0);
      EditField(h1,v+=vs,200,"Phone",Normal,DelPhone,false,0);
      EditField(h1+350,v,-20,"Email",Normal,DelEmail,false,0);
      v = v+vs;
    end;
    h5 = -170;
    width = -20;
  end;  
  EditField(h1+350,v,-20,"Delivery GLN",ViewOnly,DelRecipientGLN,false,0);
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);
  if (HasAmazonIntegration) then begin
    Tile(8,170,false,"7",AmazonOrderId);
    EditField(h1,v=6,150,"Amazon Ord. Status",ViewOnly,AmazonOrderStatus,false,0);
    CheckBox(h1+170,v,0,"Amazon Synced",AmazonSyncedFlag);
    EditField(h1,v+=vs,150,"Amazon Ord. ID",ViewOnly,AmazonOrderId,false,0);
  end;
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);

    Tile(8,170,false,"8",BrNum); vs = 20; //MDS GREG-9
  v=10;
  h2 = 300;
    EditField(h,v+=vs,h1-20,"Broker Nr.",Normal,BrNum,false,BrokerSClass);
    EditField(h,v+=vs,h1-20,"Broker Name",Normal,BrName,false,0);
    EditField(h,v+=vs,h1-20,"Client Name",Normal,ClientName,false,0);
    EditField(h,v+=vs,h1-20,"Client Cell phone",Normal,ClCellNum,false,0);
  v =10;
    EditField(h2,v+=vs,h1-20,"Policy Number",Normal,PolicyNum,false,0);
    EditField(h2,v+=vs,h1-20,"Claim Number",Normal,ClaimNum,false,0);
    EditField(h2,v+=vs,h1-20,"Order Number",Normal,OrderNum,false,0);
  v=10;
  h2 = 550;
    EditField(h2,v+=vs,h1-20,"Vehicle Registration Number",Normal,VehRegNr,false,0);
    EditField(h2,v+=vs,h1-20,"Vehicle Description",Normal,VehDesc,false,0);
     //Client Cell phone

  //:MDS
  EnterSkip(OrdDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Order Status",'r',5,"ORInfoRnORDsm");
    SpecialMenu("Item Status",'I',2,"ItemStatusORDsm");
    SpecialMenu("Create Delivery",'L',0,"SHFromORDsm");
    SpecialMenu("Create Invoice",'F',1,"IVFromORDsm");
    SpecialMenu("Add Subtotal",' ',14,"SubtotalORDsm");
/*
email not working yet
    SpecialMenu("Create Email",'m',11,"CreateMailFromORDsm");
*/
  end else begin
  SpecialMenu("Recalculate Discount",' ',11,"RecalcDiscountORDsm");
  if (StandardHansa==false) then begin
    SpecialMenu("Recalculate Weight and Volume",' ',10,"RecalculateWeightORDsm");
  end;
  if (HasLocalization("CAN,USA")) then begin
    SpecialMenu("Get Tax Rates",' ',0,"ORGetTaxRates2Dsm");
  end;

  SpecialMenu("Update Currency Price List Items",' ',7,"UpdatePricesORDsm");
  if (HasModProd) then begin
    SpecialMenu("Update Cost from Production Orders",' ',14,"UpdORCstFromProdOrdDsm");
  end;
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  SpecialMenu("Order Status",'r',5,"ORInfoRnORDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixORDsm");
  end;
  if (StandardHansa==false) then begin
    SpecialMenu("Print Internal Order",' ',4,"Or2FormORDsm");
  end;
  SpecialMenu("Reservations",' ',15,"OrderReservORDsm");
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"ORSendforAcceptanceORDsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Sign",' ',10,"SignORDsm");
  end;
  if (HasLocalization("BRA") and HasAvalara) then begin
    SpecialMenu("Calculate Avalara Brazilian Taxes",'',17,"BrazilAvalaraJsonFileForSendingORDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//  SpecialMenu("Activity",'c',9,"CreateActFromORDsm");
  SpecialMenu("Delivery",'L',0,"SHFromORDsm");
  if (HasDownpayments) then begin
    SpecialMenu("Down Payment Invoice",' ',3,"DownPayFromORDsm");
  end;
  if (HaseMail or IsEnterprise) then begin
    SpecialMenu("Email",'m',11,"CreateMailFromORDsm");
  end;
  SpecialMenu("Invoice",'F',1,"IVFromORDsm");
  if (HasModTS or IsEnterprise) then begin
    SpecialMenu("Project",' ',9,"CreatePRFromORDsm");
    SpecialMenu("Project Budget",' ',10,"CreateTBBUFromORDsm");
  end;
  SpecialMenu("Purchase Order",' ',4,"POFromORDsm");
  SpecialMenu("Returned Goods",'B',6,"RetFromORsm");
  if (HasModProd) then begin
    SpecialMenu("Production Order",' ',7,"ProdOrderFromORDsm");
  end;
  SpecialMenu("#Stock# Movement",' ',8,"StockMovFromORDsm");
  SpecialMenu("Add Customer",' ',0,"AddCustomerORDsm");
  SpecialMenu("Add Item",' ',0,"AddItemORDsm");  
  if (HasModPOS) then begin
    SpecialMenu("POS Invoice",' ',11,"IVCashFromORDsm");
  end; 
  end;
  EndWindow;
end;

//RGS: HAL-944
window PULClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real pos;

  WindowBegin("Goods Receipts",PULClass,CGmlist,PUView);
  SpawnClass(PUDClass);
  SetWRect(20,80,800,298);
  Sizeable(-1,-1,0,0);
  UseView(PUVc);
  FormName(PrintPUL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Date",TransDate,false,TransDate);
  pos = 191;
  if (HasMultiLocations) then begin
    RlColKey(pos,pos,"Location",Location,false,Location);
    pos = 251;
  end;
  if (HasModPO) then begin
    RlColKey(pos,pos,"PO No.",PONr,false,PONr);
    pos = 331;
  end;
  RlColKey(pos,pos,"#Supplier#",VECode,false,VECode);
  RlColKey(391,391,"Name",VEName,false,VEName);
  RlColKey(531,531,"Comment",Comment,false,Comment);
  if (AcceptanceStatusColumnTest("PUVc")) then begin
    CalculatedColumn(-40,-40,"Appr.","PULClassAcceptanceStatus",false);
  end;
  RlCol(-80,-80,"ADOR Locked",ADORLocked,true);
  if (HasAdvancedStock) then begin
    RlCol(-1,-1,"",Invalid,true);
  end;
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Search");
  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    RowMenuItem(0,"OK",'G','G',4312,"PUOKLsm");
    EndRowMenu;
  end else begin
    SpecialMenu("OK",'G',0,"PUOKLsm");
  end;
  EndWindow;
end;
//:RGS

//TM - Desk 5130 
//TM - ADOR 
window POLClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","*")
begin
  Integer pos,rn;

  WindowBegin("#Purchase Orders#",POLClass,CGmlist,POView);
  SpawnClass(PODClass);
  SetWRect(20,80,1000,298);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  FormName(PrintPOL);
  RecordList(4,17,-21,-39);
/*
old design
  if (GUIType==kGuiiPhone) then begin
    RlCellKey(10,6,70,19,SerNr,false,12,patM4black,SerNr);
    RlCellKey(80,6,90,19,OKFlag,false,12,patM4black,OKFlag);
    RlCellKey(100,6,130,19,PUFlag,false,12,patM4black,PUFlag);
    RlCellKey(140,6,150,19,PIFlag,false,12,patM4black,InvFlag);
    RlCellKey(155,6,165,19,Closed,false,12,patM4black,Closed);
    RlCellKey(170,6,280,19,TransDate,false,12,patM4black,TransDate);
    RlCellKey(290,6,320,19,Location,false,12,patM4black,Location);
    RlCellKey(10,26,90,39,Reference,false,12,patM4black,Reference);
    RlCellKey(100,26,160,39,VECode,false,12,patM4black,VECode);
    RlCellKey(170,26,-180,39,Addr0,false,12,patM4black,Name);
    RlCellKey(-170,26,-105,39,POClass,false,12,patM4black,POClass);
    RlCellKey(-100,26,-40,39,Sum4,true,12,patM4black,Sum4);
  end else begin
*/
    RlColKey(4,4,"No.",SerNr,false,SerNr);
    RlColKey(79,79,"OK",OKFlag,false,OKFlag);
    pos = 111;
    if (HasModIN) then begin
      RlColKey(pos,pos,"GR",PUFlag,false,PUFlag);
      pos = 143;
    end;
    if (HasModPL) then begin
      RlColKey(pos,pos,"Inv.",PIFlag,false,InvFlag);
      pos = 175;
    end;
    RlColKeyTL(pos,pos,"Clsd",M4Mark,Closed,false,Closed);
    pos = pos + 32;
    RlColKey(pos,pos,"Date",TransDate,false,TransDate);
    pos = pos + 80;
    if (HasMultiLocations) then begin
      RlColKey(pos,pos,"Location",Location,false,Location);
      pos = pos + 80;
    end;
    if (IsEnterprise) then begin
      RlColKey(pos,pos,"Reference",Reference,false,Reference);
      pos = pos + 80;
    end;
    RlColKey(pos,pos,"#Supplier#",VECode,false,VECode);
    pos = pos + 60;
    RlColKey(pos,pos,"Name",Addr0,false,Name);
    if (IsEnterprise) then begin
      RlCol(-190,-190,"Class",POClass,false);
      if (AcceptanceStatusColumnTest("POVc")) then begin
        CalculatedColumn(-160,-160,"Appr.","POLClassAcceptanceStatus",false);
      end;
      RlCol(-225,-225,"Total",Sum4,true);
      RlCol(-165,-165,"Downpaid",DownPaySent,true);
      RlCol(-80,-80,"ADOR Locked",ADORLocked,true);
    end else begin
      RlCol(-80,-80,"Total",Sum4,true);
    end;
//  end;
  if (GUIType!=kGuiiPhone) then begin
    SearchField("Search");
    if (HasLimitedAccess) then begin
      BrowseSubsetButton(-40,-15);
    end;
    if (GuiType==kGuiMetro) then begin
      RowMenuBegin("");
      RowMenuItem(0,"OK",'G','G',4312,"OKPOLsm");
      RowMenuItem(0,"Close",' ',' ',4300,"ClosePOLsm");
      if (HasModIN) then begin
        RowMenuItem(0,"Create Goods Receipt",' ',' ',4300,"PUFromPOLsm");
      end;
      if (HasModPO) then begin
        if (IsEnterprise) then begin
          RowMenuItem(0,"Create #Purchase Orders#",' ',' ',4300,"POCreatePOLsm");
        end;
        RowMenuItem(0,"Purchase Order Status",'r','r',4300,"POStatusORLsm");
      end;
      EndRowMenu;
    end else begin
      SpecialMenu("OK",'G',0,"OKPOLsm");
      SpecialMenu("Close",' ',1,"ClosePOLsm");
      if (HasModPO) then begin
        SpecialMenu("Purchase Order Status",'r',4,"POStatusORLsm");
      end;
      SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
      if (HasModIN) then begin
        SpecialMenu("Goods Receipt",' ',2,"PUFromPOLsm");
      end;
      if (HasModPO) then begin
        if (IsEnterprise) then begin
          SpecialMenu("#Purchase Orders#",' ',3,"POCreatePOLsm");
        end; 
      end;
    end;
  end;
  EndWindow;
end;

//TM - //TM - Desk 5130 
window PODClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,v,vm,vs;
  record CYBlock CYb;
  string 255 label;
  Integer tilenr,flipnr,f,rn;

  vs = 20;
  BlockLoad(CYb);
  WindowBegin("Purchase Order",PODClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(POVc);
  CommunicateButton;
  ActiveFieldOnNew("VECode");
  Tile(0,74,false,"",VECode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"#Supplier#",Normal,VECode,false,VESClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  if (IsEnterprise) then begin
    EditField(h,vm=(v+=20),95,"Signers",Normal,OKPersons,false,UserSClass);
    CheckBox(h4=-100,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,v+=vs,0,"OK",OKFlag);
  end;
  tilenr = 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  if (HasModIN) then begin
    TileButton(tilenr,"Del. Terms"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  TileButton(tilenr,"Ord. Address"); tilenr = tilenr + 1;
  TileButton(tilenr,"Del. Address"); tilenr = tilenr + 1;
  if (IsEnterprise and StandardHansa==false) then begin
    TileButton(tilenr,"Extra Costs"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Date",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Payment Terms",Normal,PayDeal,false,PDSClass);
  if (IsEnterprise) then begin
    EditField(h1,v+=vs,82,"Valid Until",Normal,ValidUntil,false,PasteCurDate);
  end;
  if (HasModIN) then begin
    EditField(h1,v+=vs,82,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
  end;
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,VEContact,false,ContactSClass);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  end;
  EditField(h2,v+=vs,135,"Reference",Normal,Reference,false,0);
  if (HasSalesman or HasSalesmanBonus) then begin
    EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  end;
  if (HasModTS or IsEnterprise) then begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,PRSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h3,v+=vs,80,"Purch. Ord. Class",Normal,POClass,false,POrderClassSClass);
    EditField(h3,v+=vs,80,"Order Type",ViewOnly,OrderType,false,0);
  end;
  CheckBox(h4,v=6,0,"Closed",Closed);
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Price Incl. #VAT#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Price Incl. Tax",InclVAT);
  end;
  HalPushButton(620,v+vs,720,v+vs*2,"SendPOToADORDsm","Send To ADOR"); // TM - Desk 5130 
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(110,-41,70,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    EditField(110,-21,70,"Pallets",ViewOnly,TotPalletNr,true,0);
    EditField(260,-41,70,"Freight",Normal,ShipCost,true,0);
    EditField(260,-21,70,"Customs",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    EditField(410,-41,70,"#VAT#",ViewOnly,Sum3,true,0);
    if (HasExtTax) then begin
      EditField(410,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,false,0);
    end;
  end else begin
    EditField(410,-41,70,"Tax",ViewOnly,Sum3,true,0);
  end;
  EditField(-169,-41,118,"Subtotal",ViewOnly,Sum1,true,0);
  EditField(-169,-21,118,"TOTAL",ViewOnly,Sum4,true,0);
//  CheckBox(20,-21,0,"OK",OKFlag);
  v = 24;
  if (HasModIN or HasModPL or HasObjects) then begin
    MatrixBegin(3,v,-50,-44,-,400);
  end else begin
    MatrixBegin(3,v,-25,-44,-,400);
  end;
  MatTypedRow(stp);
  Flip(0);
  MatCol(1,28,"Item",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
//  MatCol(1,194,"Description",0,Spec,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatColTL(1,164,"Unit",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
  MatCol(1,204,"Description",0,Spec,false,0);
  if (HasJewelleryInterface) then begin
    MatCol(1,-337,"#Stock# Type",0,StockType,false,SetSClass);
  end;
  MatCol(1,-237,"Unit Price",0,Price,true,0);
  MatCol(1,-151,"%",0,vRebate,true,0);
  MatCol(1,-116,"Sum",0,Sum,true,0);
  if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
    MatCol(1,-45,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(1,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  if (HasObjects) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,164,"Description",0,Spec,false,0);
    if (IsEnterprise) then begin
      MatCol(1,-310,"Purch. A/C",0,CostAcc,false,AccSClass);
    end;
    MatCol(1,-240,"Tags/Objects",0,Objects,false,ObjSClass);
    if (IsEnterprise) then begin
      MatCol(1,-170,"#Supp.# Item",0,VEArtCode,false,PISClass);
      MatColTL(1,-100,"#S.# Unit",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);//MatCol(1,-100,"#S.# Unit",0,VEUnit,false,UnitSCLass);
      MatCol(1,-50,"#S.# Qty",0,VEQuant,true,0);
    end;
  end;
  if (HasModIN) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,164,"Description",0,Spec,false,0);
    MatCol(1,-330,"Rcvd.",0,Shipd1,true,0);
    MatCol(1,-270,"Rcvd. OK",0,Shipd2,true,0);
    if (HasModPL) then begin
      MatCol(1,-210,"Invoiced",0,Invd,true,0);
    end;
    if (HasModWHM) then begin
      MatCol(1,-150,"Pallet No.",0,PalletNr,true,0);
    end;
    if (HasModTS) then begin
      MatCol(1,-90,"Project",0,PRCode,true,PRSClass);
    end;
    if (HasModSVO) then begin
      MatCol(1,-40,"WS No.",0,WSNr,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    if (StandardHansa==false) then begin
      MatCol(1,164,"Order Type",0,OrderType,false,0);
      MatCol(1,-400,"#Stock# Type",0,StockType,false,SetSClass);
    end else begin
      MatCol(1,164,"Description",0,Spec,false,0);
    end;
    if (HasTREO) then begin
      MatCol(1,-300,"TREO",0,TREO,false,SetSClass);
    end;
    MatCol(1,-200,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
    MatCol(1,-100,"Comment",0,Comment,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,164,"Description",0,Spec,false,0);
      MatCol(1,-420,"Fr. Cost",0,ShipCost,true,0);
      MatCol(1,-360,"Customs",0,CustomsCost,true,0);
      label = UserDefined("AccBlock","PUCost1");
      if (blank(label)) then begin label = "Cost 1";end;
      MatCol(1,-300,label,0,RowCost1,true,0);
      label = UserDefined("AccBlock","PUCost2");
      if (blank(label)) then begin label = "Cost 2";end;
      MatCol(1,-240,label,0,RowCost2,true,0);
      label = UserDefined("AccBlock","PUCost3");
      if (blank(label)) then begin label = "Cost 3";end;
      MatCol(1,-180,label,0,RowCost3,true,0);
      label = UserDefined("AccBlock","PUCost4");
      if (blank(label)) then begin label = "Cost 4";end;
      MatCol(1,-120,label,0,RowCost4,true,0);
      label = UserDefined("AccBlock","PUCost5");
      if (blank(label)) then begin label = "Cost 5";end;
      MatCol(1,-60,label,0,RowCost5,true,0);
    end;
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");
  if (HasModIN and GuiType!=kGuiAndroid) then begin
    RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusPODsm");
  end;
  if (IsEnterprise) then begin
    RowMenuItem(0,"Previous Purchase Prices",' ',' ',0,"POLastPPrsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20; h = 110; h2 = 295;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (HasModIN) then begin
    Tile(tilenr,90,false,tilenr,ShipDeal); tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
    if (IsEnterprise) then begin
      EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
    end;
    if (HasMultiLocations) then begin
      EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
    end;
    if (IsEnterprise) then begin
      if (StandardHansa==false) then begin
        EditField(h1,v+=vs,80,"Branch",ViewOnly,BranchID,false,0);
//  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
//  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
//  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
        EditField(h2,v=vm,80,"Serv. Order No.",Normal,SVONr,false,0);
        EditField(h2,v+=vs,80,"Work Order No.",Normal,WONr,false,0);
        EditField(h2,v+=vs,80,"P/O Process No.",Normal,POCQStatNr,true,POCQStatSClass);
        EditField(h2,v+=vs,80,"PO Contract No.",ViewOnly,POCOSerNr,true,0);
      end;
      CheckBox(473,v=vm,0,"Invoice Before Goods Receipt",InvBeforePU);
      CheckBox(473,v+=vs,0,"Set Goods Receipt Quantity to Zero",SetZeroPUQuant);
      EditField(h3,v+=vs,80,"Intrastat Trans. Code",Normal,IntrastatTransCode,false,IntrastatTransCodeSClass);
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,90,false,tilenr,LangCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Discount Matrix",Normal,RebCode,false,RebSClass);
    if (StandardHansa==false) then begin
      EditField(h1,v+=vs,80,"Factoring",Normal,VEFactoring,false,VESClass);
    end;
    EditField(h1,v+=vs,80,"Order No.",Normal,OrdNr,false,0);
    EditField(h1,v+=vs,-20,"Comment",Normal,Comment,false,0);
    if (HasSalesGroup) then begin
      EditField(h2,v=vm,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
      EditField(h2,v+=vs,80,"Invoice From",Normal,InvoiceToCode,false,VESClass);
    end;
    EditField(h2,v+=vs,80,"Purchase Cost",Normal,CostPerUnit,true,0);
    if (HasLanguages) then begin
      EditField(h3,v=vm,80,"Language",Normal,LangCode,false,LangSClass);
    end;
  end else begin
    Tile(tilenr,20,false,tilenr,Comment); tilenr = tilenr + 1;
    if (HasAdvancedPricing) then begin
      EditField(h1,v=6,80,"Discount Matrix",Normal,RebCode,false,RebSClass);
    end else begin
      EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
    end;
    if (HasLanguages) then begin
      EditField(h1,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
    end;    
  end;
  Tile(tilenr,230,false,tilenr,Addr1); tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Ordering"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,vm=(v+=vs), -20,label,Normal,InvAddr4,false,0);
  vm = vm + 40;

  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=vm,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
  end;
/*
//oldapprovals  
  if (HasApprovals) then begin
    ButtonFrame(h3=h+4,v=vm,123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
  end;
*/  
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end;
  if (IsEnterprise) then begin
    EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
//  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
//  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
//  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  end;
  Tile(tilenr,130,false,tilenr,ShipAddr0); tilenr = tilenr + 1;
  EditField(h,v=6,-20,"Delivery",Normal,ShipAddr0,false,0);
  EditField(h,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr4,false,0);
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,70,false,tilenr,ShipCost); tilenr = tilenr + 1;
    vs = 20; h2 = 290; h3 = 530;
    label = UserDefined("AccBlock","PUCost1");
    if (blank(label)) then begin label = "Extra Cost 1";end;
    EditField(h1,v=6,70,label,Normal,Cost1,true,0);
    label = UserDefined("AccBlock","PUCost2");
    if (blank(label)) then begin label = "Extra Cost 2";end;
    EditField(h2,v,70,label,Normal,Cost2,true,0);
    label = UserDefined("AccBlock","PUCost3");
    if (blank(label)) then begin label = "Extra Cost 3";end;
    EditField(h1,v+=vs,70,label,Normal,Cost3,true,0);
    label = UserDefined("AccBlock","PUCost4");
    if (blank(label)) then begin label = "Extra Cost 4";end;
    EditField(h2,v,70,label,Normal,Cost4,true,0);
    label = UserDefined("AccBlock","PUCost5");
    if (blank(label)) then begin label = "Extra Cost 5";end;
    EditField(h1,v+=vs,70,label,Normal,Cost5,true,0);
    EnterSkip(TransDate);
    ButtonFrame(h3,v=16,130,2,"Extra Costs Calculation");
    RadioButton(h3,v,0,0,"Value",ExtraCostsCalculation);
    RadioButton(h3,v+=16,1,0,"Weight",ExtraCostsCalculation);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
/*  
    if (IsEnterprise) then begin
      SpecialMenu("Add Planned Payment",' ',9,"PlannedPaymentPODsm");
    end;
*/    
    if (HasModIN) then begin
      SpecialMenu("Item Status",'I',2,"ItemStatusPODsm");
    end;
    SpecialMenu("Purchase Order Status",'r',5,"POStatRnPODsm");
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModIN) then begin
      SpecialMenu("Goods Receipt",'L',0,"PUFromPODsm");
    end;
    if (HasModPL) then begin
      SpecialMenu("#Purchase Invoice#",'F',1,"VIFromPODsm");
    end;
    if (HasRetGoodsToSupp and HasModIN) then begin
      SpecialMenu("Returned Goods",'B',6,"RetPUFromPODsm");
    end;
/*
  if (HaseMail) then begin
    SpecialMenu("email",'m',3,"CreateMailFromPODsm");
  end;
*/
  end else begin
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixPODsm");
  end;  
  SpecialMenu("Purchase Order Status",'r',5,"POStatRnPODsm");
  if (IsEnterprise) then begin
    SpecialMenu("Reservations",' ',6,"POReservPODsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"POSendforAcceptancePODsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Activity",'c',9,"CreateActFromPODsm");
  end;
  if (HasDownpayments) then begin
    SpecialMenu("Down Payment Invoice",' ',3,"DownPayFromPODsm");
  end;
  if (HaseMail) then begin
    SpecialMenu("Email",'m',3,"CreateMailFromPODsm");
  end;
  if (HasModIN) then begin
    SpecialMenu("Goods Receipt",'L',0,"PUFromPODsm");
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    SpecialMenu("Shipment Notification",'l',0,"DropSHFromPODsm");
  end;
  if (HasModPL) then begin
    SpecialMenu("#Purchase Invoice#",'F',1,"VIFromPODsm");
  end;
  if (HasRetGoodsToSupp and HasModIN) then begin
    SpecialMenu("Returned Goods",'B',6,"RetPUFromPODsm");
  end;
    SpecialMenu("Add #Supplier#",' ',0,"AddSupplierPODsm");
    SpecialMenu("Add Item",' ',0,"AddItemPODsm");    
  end;
  EndWindow;
end;
//TM

//TM - DESK 5130 Returned Goods to Supplier 
window RetPULClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  Integer pos;
  WindowBegin("Returned Goods to #Supplier#",RetPULClass,CGmlist,-);
  SpawnClass(RetPUDClass);
  SetWRect(20,80,800,298);
  Sizeable(-1,-1,0,0);
  UseView(RetPUVc);
//  FormName(rlRetPULPrint);
  RecordList(4,17,-21,-39);
  if (HasLocalization("POL,PRT")) then begin
    RlColKey(4,4,"Official No.",OfficialSerNr,false,OfficialSerNr);
    pos = 110;
    RlColKey(pos,pos,"No.",SerNr,false,SerNr);
    pos = pos + 70;
  end else begin
    RlColKey(4,4,"No.",SerNr,false,SerNr);
    pos = 79;
  end;
  RlColKey(pos,pos,"OK",OKFlag,false,OKFlag);
  pos = pos + 40;
  RlColKey(pos,pos,"Date",TransDate,false,TransDate);
  pos = pos + 80;
  if (HasMultiLocations) then begin
    RlColKey(pos,pos,"Location",Location,false,LocOK);
    pos = pos + 60;
  end;
  if (HasModPO) then begin
    RlColKey(pos,pos,"PO No.",PONr,false,PONr);
    pos = pos + 70;
  end;
  RlColKey(pos,pos,"#Supplier#",VECode,false,VECode);
  pos = pos + 60;
  RlColKey(pos,pos,"Name",VEName,false,VEName);
  pos = pos + 140;
  RlColKey(pos,pos, "Comment",Comment,false,Comment);
  RlCol(-80,-80,"ADOR Locked",ADORLocked,true);
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Search");
  EndWindow;
end;
//

//TM - DESK 5130 
window StockMovLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("#Stock# Movements",StockMovLClass,CGmlist,-);
  SpawnClass(StockMovDClass);
  SetWRect(64,80,800,298);
  Sizeable(-1,-1,0,0);
  UseView(StockMovVc);
  FormName(PrintStockMovL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,  "No.",SerNr,false,SerNr);
  if (HasThrouLocation) then begin
    RlColKey(71,71,"Sent",SentOKFlag,false,SentOKFlag);
  end;
  RlColKey(111,111,"Rcvd.",OKFlag,false,OKFlag);
  if (HasThrouLocation) then begin
    RlColKey(151,151,"Sent Date",SentTransDate,false,SentTransDate);
  end;
  RlColKey(223,223,"Rcvd. Date",TransDate,false,TransDate);
  if (HasMultiLocations) then begin
    RlColKey(295,295,"Fr. Location",FrLocation,false,FrLocOK);
    if (HasThrouLocation) then begin
      RlColKey(370,370,"Via Location",ThrouLocation,false,ToThrouLocOK);
    end;
    RlColKey(450,450,"To Location",ToLocation,false,ToLocOK);
  end;
  if (HasModProd) then begin
    RlColKey(530,530, "Prod.",ProdSerNr,false,ProdSerNr);
    RlColKey(590,590, "Comment",Comment,false,Comment);
  end else begin
    RlColKey(530,530, "Comment",Comment,false,Comment);
  end;
    RlCol(-80,-80,"ADOR Locked",ADORLocked,true); //TM - DESK 5130 
    SpecialMenu("Receive",'G',0,"OKStockMovLsm");
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Search");
  EndWindow;
end;
//TM 

//TM - DESK 5130 
window SHLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Deliveries",SHLClass,CGmlist,SHView);
  SpawnClass(SHDClass);
  SetWRect(20,80,880,298);
  Sizeable(-1,-1,0,0);
  UseView(SHVc);
  FormName(PrintSHL);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  RlColKey(79,79,"OK",OKFlag,false,OKFlag);
  RlColKey(111,111,"Date",ShipDate,false,ShipDate);
  if (HasMultiLocations) then begin
    RlCol(191,191,"Location",Location,false);
    RlColKey(251,251,"Order No.",OrderNr,false,OrderKey);
  end else begin
    RlColKey(191,191,"Order No.",OrderNr,false,OrderKey);
  end;
  if (HasOfficialSerNr) then begin
    RlColKey(321,321,"Official No.",OfficialSerNr,false,OfficialSerNr);
  end;
  RlColKey(411,411,"Customer",CustCode,false,CustCode);
  RlColKey(471,471,"Name",Addr0,false,CustName);
  if (IsEnterprise) then begin
    RlColKey(-250,-250,"Transport No.",TransportNumber,false,TransportNumber);
    RlColKey(-165,-165,"Del. Mode",ShipMode,false,ShipMode);
  end else begin
    RlColKey(-180,-180,"Comment",Comment,false,Comment);
  end;
  RlCol(-80,-80,"ADOR Locked",ADORLocked,true); //TM - DESK 5130 
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Search");
  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    RowMenuItem(0,"OK",'G','G',4312,"SHOKLsm");
    EndRowMenu;
  end else begin
    SpecialMenu("OK",'G',0,"SHOKLsm");
  end;
  if (HasLocalization("MEX")) then begin
    SpecialMenu("Send Mexican E-Deliveries",'n',3,"SendMexEDelLsm");
  end;
  EndWindow;
end;
//TM 

//TM - Desk 5130 Returned Goods 
window RetLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer pos;
  WindowBegin("Returned Goods",RetLClass,CGmlist,-);
  SpawnClass(RetDClass);
  SetWRect(20,80,830,298);
  Sizeable(-1,-1,0,0);
  UseView(RetVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"No.",SerNr,false,SerNr);
  pos = 71;
  RlColKey(pos,pos,"OK",OKFlag,false,OKFlag);
  pos = pos + 28;
//  RlColKey(108,108,"Clsd.",Closed,false,Closed);
  RlColKey(pos,pos,"Date",TransDate,false,TransDate);
  pos = pos + 80;
  if (HasMultiLocations) then begin
    RlColKey(pos,pos,"Location",Location,false,LocOK);
    pos = pos + 60;
  end;
  if (HasModSO) then begin
    RlColKey(pos,pos,"Order No.",OrdNr,false,OrdNr);
    pos = pos + 80;
  end;
  if (HasPreferedOfficialSerNr or HasOfficialSerNr) then begin
    RlColKey(pos,pos,"Official No.",OfficialSerNr,false,OfficialSerNr);
    pos = pos + 71;
  end;
  RlColKey(pos,pos,"Customer",CustCode,false,CustCode);
  pos = pos + 60;
  RlCol(pos,pos,"Name",CustName,false);
  pos = pos + 40;
  RlColKey(528,528,"Comment",Comment,false,Comment);
  RlCol(-80,-80,"ADOR Locked",ADORLocked,true);
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  SearchField("Search");
  EndWindow;
end;
//TM 

window PUDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  Integer tilenr;
  Integer f,flipnr,rn;

  BlockLoad(CYb);
  WindowBegin("Goods Receipt",PUDClass,CGview,-);
  if (HasJewelleryInterface) then begin
    SetWRect(20,80,870,620);
  end else begin
    SetWRect(20,80,750,620);
  end;
  if (HasMultiCurrency or IsEnterprise or HasObjects) then begin
    Sizeable(-1,-1,0,0);
  end;
  UseView(PUVc);
  ActiveFieldOnNew("VECode");
  FormName(PurchaseForm);
  Tile(0,74,false,"",TransDate);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"#Supplier#",Normal,VECode,false,VESClass);
  EditField(275,v,95,"ADOR GRV",Normal,ADORGRV,false,ADORGRSClass); 
  EnterSkip(TransDate);
  EditField(h=255,v=vm,-40,"Name",Normal,VEName,false,0);
  CheckBox(h4=-100,v+=20,0,"OK",OKFlag);
  CheckBox(h4=-100,v+=17,0,"ADOR Locked",ADORLocked); // RGS: HAL-944
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    CheckBox(h4,v+=16,0,"Price Incl. #VAT#",InclVAT);
  end else begin
    CheckBox(h4,v+=16,0,"Price Incl. Tax",InclVAT);
  end;
  //vs = 20;
  //HalPushButton(620,v+vs,720,v+vs*2,"SendPUToADORDsm","Send To ADOR"); // RGS: HAL-944
  tilenr = 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      TileButton(tilenr,"Extra Costs"); tilenr = tilenr + 1;
      TileButton(tilenr,"Freight"); tilenr = tilenr + 1;
    end;
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  end;
  tilenr = 1;

  vs = 20; h1 = 110; h2 = 300; h3 = 550; h4 = -100;
  Tile(tilenr,70,false,tilenr,TransDate); tilenr = tilenr + 1;
  EditField(h1,vm=(v=6),82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  if (IsEnterprise==false) then begin
    EditField(h2,v,-20,"Comment",Normal,Comment,false,0);
  end;
  if (HasMultiLocations) then begin
    v = v + vs;
    EditField(h1,v,82,"Location",Normal,Location,false,LocationSClass);
  end;
  if (HasRoute) then begin
    v = v + vs;
    EditField(h1,v,82,"Route",ViewOnly,Sorting,false,0);
  end;
  v = v + vs;
  // Need a cleaner way to skip to next visible field
  if (HasObjects) then begin  
    EnterSkip(Objects);
  end else begin
    if (HasModPO) then begin 
      EnterSkip(PONr);
    end else begin
      if (IsEnterprise) then begin
        if (StandardHansa==false) then begin
          EnterSkip(POCOSerNr);
        end else begin
          EnterSkip(PUClass);
        end;
      end else begin
        if (HasLanguages) then begin
          EnterSkip(LangCode);
        end else begin
          if (IsEnterprise) then begin
            EnterSkip(CustomsNr);
          end else begin        
            if (HasLocalization("ARG,MEX,USA")) then begin
              EnterSkip(DispatchNumber);
            end else begin
              EnterSkip(Math);
            end;
          end;
        end; 
      end;
    end;  
  end;
  SoftEditField(h1,v,82,"Scan Barcode",Normal,"scanbarcode",false,0,M4Str,60);
  if (HasObjects) then begin
    if (IsEnterprise) then begin
      EditField(h2,v=vm,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
    end else begin
      if (HasMultiLocations) then begin
        EditField(h2,v,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
      end else begin
        v = v + vs;
        EditField(h2,v,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
      end;
    end;
  end;
  if (HasModPO) then begin
    if (HasObjects) then begin
      v = v + vs;
    end;
    EditField(h2,v,135,"Purch. Order No.",ViewOnly,PONr,false,0);
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      v = v + vs;
      EditField(h2,v,135,"Purch. Contract",ViewOnly,POCOSerNr,true,POCOSClass);
    end;
    EditField(h2,v+=vs,135,"Reason",Normal,Reason,false,StandProblemsSClass);//VN added  //  AG moved for 6.4  //  AG moved for 7.1
    EditField(h3,v=vm,80,"Purch. Order Class",ViewOnly,PUClass,false,0);
  end;
  if (HasLanguages) then begin
    v = v + vs;
    EditField(h3,v,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    v = v + vs;
    EditField(h3,v,80,"Customs Number",Normal,CustomsNr,false,0);
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    v = v + vs;
    EditField(h3,v,80,"Dispatch Number",Normal,DispatchNumber,false,0);
  end;
//  CheckBox(h4,v=vm,0,"Price Incl. #VAT#",InclVAT);
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math); tilenr = tilenr + 1;
  v = 24;
  if (HasSerialNumbers or HasLocalization("ARG,MEX,USA") or HasJewelleryInterface) then begin
    MatrixBegin(4,v,-50,-50,-,400);
  end else begin
    MatrixBegin(4,v,-25,-50,-,400);
  end;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(1,28,"Item",0,ArtCode,false,INSClass);
//  MatCol(1,84,"Var",0,VARList,true,VARSClass);
//  MatCol(1,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(Spec);
  MatText(t=3,28,"Signature",true);
  MatCol(t,100,"",0,Sign,false,0);
  MatText(t,160,"Correction Date",true);
  MatCol(t,290,"UpdDate",0,UpdDate,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  if (HasJewelleryInterface) then begin
    MatColTL(1,144,"Unit",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
    MatCol(1,184,"Description",0,Spec,false,0);
    MatCol(1,-485,"Location",0,Location,false,LocationSClass);
    MatCol(1,-430,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-320,"#Stock# Type",0,StockType,false,SetSClass);
  end else begin
    MatColTL(1,164,"Unit",0,M4Code,ViewOnly,5,UnitCode,false,UnitSCLass);
    MatCol(1,204,"Description",0,Spec,false,0);
  end;
  MatCol(1,-320,"Base Price",0,BasePrice,true,0);
  MatCol(1,-240,"Unit Price",0,UPrice,true,0);
  MatCol(1,-160,"Cost Price",0,CostPrice,true,0);
  MatCol(1,-80,"Sum",0,Sum,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Description",0,Spec,false,0);
    MatCol(1,-350,"Location",0,Location,false,LocationSClass);
    MatCol(1,-280,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-150,"Best Before",0,BestBefore,false,PasteCurDate);
    MatCol(1,-60,"Status",0,BatchStatus,false,BatchStatusSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Description",0,Spec,false,0);
    MatColTL(1,-404,"Item Cost",0,-1,ViewOnly,-1,InPrice,false,0);
    if (StandardHansa==false) then begin
      MatColTL(1,-324,"Price Varian.",0,-1,ViewOnly,-1,VarianceAmount,false,0);
      MatCol(1,-244,"Unit Price",0,UPrice,true,0);
      MatCol(1,-174,"Extra Cost",0,Extra,true,0);
      MatCol(1,-104,"Cost Price",0,CostPrice,true,0);
    end else begin
      MatCol(1,-324,"Fr. Cost",0,ShipCost,true,0);
      MatCol(1,-244,"Extra Cost",0,Extra,true,0);
      MatCol(1,-164,"Customs",0,CustomsCost,true,0);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      MatCol(1,-45,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      if (UserCanAction("ViewVatGoodsReceipt",true)==true) then begin //  VN>>
        MatCol(1,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;  //  VN <<
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Description",0,Spec,false,0);
    MatCol(1,-350,"#Supp.# Item No.",0,VEItemCode,false,PISClass);
    MatColTL(1,-270,"#S.# Unit",0,M4Code,ViewOnly,5,VEUnit,false,UnitSCLass);
    MatCol(1,-200,"#Supp.# Qty",0,VEQuant,true,0);
    if (StandardHansa==false) then begin
      MatCol(1,-140,"Coeff.",0,Coefficient,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Description",0,Spec,false,0);
    if (StandardHansa==false) then begin
      MatCol(1,-400,"#Stock# Type",0,StockType,false,SetSClass);
    end;
    if (HasTREO) then begin
      MatCol(1,-310,"TREO",0,TREO,false,SetSClass);
    end;
    MatCol(1,-220,"#Stock# A/C",0,CostAcc,false,AccSClass);
    MatCol(1,-155,"Purch. A/C",0,CredAcc,false,AccSClass);
    MatCol(1,-90,"Tags/Objects",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Customs No.",0,CustomsNr,false,0);
      MatCol(1,-340,"Customs Date",0,CustomsDate,false,PasteCurDate);
      MatCol(1,-240,"Country of O.",0,CountryOfOrg,false,CountrySClass);
      MatCol(1,-140,"From Pos.",0,PosCode,false,PosSClass);
      MatCol(1,-70,"To Position",0,ToPosCode,false,FreePosSClass);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"Description",0,Spec,false,0);
    MatCol(1,-250,"Serial No.",0,SerialNr,false,SerialNrSClass);
    MatCol(1,-135,"Width",0,UnitXval,true,0);
    MatCol(1,-90,"Height",0,UnitYval,true,0);
    MatCol(1,-45,"Depth",0,UnitZval,true,0);
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Extra Cost",0,Extra,true,0);
      MatCol(1,-420,"Freight",0,ShipCost,true,0);
      MatCol(1,-360,"Customs",0,CustomsCost,true,0);
      label = UserDefined("AccBlock","PUCost1");
      if (blank(label)) then begin label = "Cost 1";end;
      MatCol(1,-300,label,0,RowCost1,false,0);
      label = UserDefined("AccBlock","PUCost2");
      if (blank(label)) then begin label = "Cost 2";end;
      MatCol(1,-240,label,0,RowCost2,false,0);
      label = UserDefined("AccBlock","PUCost3");
      if (blank(label)) then begin label = "Cost 3";end;
      MatCol(1,-180,label,0,RowCost3,false,0);
      label = UserDefined("AccBlock","PUCost4");
      if (blank(label)) then begin label = "Cost 4";end;
      MatCol(1,-120,label,0,RowCost4,false,0);
      label = UserDefined("AccBlock","PUCost5");
      if (blank(label)) then begin label = "Cost 5";end;
      MatCol(1,-60,label,0,RowCost5,false,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(1,144,"PO No.",0,PONr,false,POSClass);
    MatCol(1,194,"PO Row",0,OrdRow,false,0);
    MatCol(1,-370,"PO Recon.",0,PORecon,false,0);
    MatCol(1,-310,"Comment",0,POReconComment,false,0);
    MatCol(1,-200,"Inv. Recon.",0,VIRecon,false,0);
    MatCol(1,-130,"Comment",0,VIReconComment,false,0);
  end else begin
    if (HasSerialNumbers) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,144,"Description",0,Spec,false,0);
      if (HasMultiLocations) then begin
        MatCol(1,-350,"Location",0,Location,false,LocationSClass);
      end;
      MatCol(1,-230,"Serial No.",0,SerialNr,false,SerialNrSClass);
      MatCol(1,-80,"Best Before",0,BestBefore,false,0);
    end;
/*
    MatCol(1,-280,"Unit Price",0,UPrice,true,0);
    MatCol(1,-210,"Freight",0,ShipCost,true,0);
    MatCol(1,-140,"Extra Cost",0,Extra,true,0);
    MatCol(1,-70,"Cost Price",0,CostPrice,true,0);
*/
  end;
  if (HasLocalization("ARG,MEX,USA")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-250,"Dispatch Number",0,DispatchNumber,false,0);
  end;
  if (HasJewelleryInterface) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-350,"#Supp.# Serial No",0,SuppSerialNr,true,0);
    MatCol(t,-200,"Metal",0,Metal,true,0);
    MatCol(t,-150,"Weight",0,RowWeight,true,0);
    MatCol(t,-100,"Size",0,Size,true,0);
    MatCol(t,-50,"Length",0,Length,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-350,"Major Stone",0,MajStoneDet,true,0);
    MatCol(t,-250,"#Colour#",0,Colour,true,0);
    MatCol(t,-200,"Clarity",0,Clarity,true,0);
    MatCol(t,-150,"Cert",0,Cert,true,0);
    MatCol(t,-100,"Minor Stone",0,MinStoneDet,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-400,"Watch Brand",0,WatchBrand,true,0);
    MatCol(t,-300,"Style Name",0,StyleName,true,0);
    MatCol(t,-200,"Watch Metal",0,WatchMetal,true,0);
    MatCol(t,-100,"Movement",0,Movement,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-400,"Brc/Str",0,BrcStr,true,0);
    MatCol(t,-300,"Gender",0,Gender,true,0);
    MatCol(t,-200,"Other",0,Other,true,0);
    MatCol(t,-100,"Other 2",0,Other2,true,0);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (StandardHansa==false) then begin
    if (HasSerialNumbers) then begin
      RowMenuItem(0,"Open Batch Specification",' ',' ',0,"OpenBatchPUDsm");
    end;
    RowMenuItem(0,"Split Row",' ',' ',0,"SplitRowPUDsm");
    if (HasQualityControl) then begin
      RowMenuItem(0,"Quality Control",' ',' ',10,"QualConFromPUDsm");
    end;
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
//  v = 18;
  v = v + 1;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  EditField(110,-41,70,"Total Qty",ViewOnly,SumQuant,true,0);
//  EditField(110,-21,70,"Price Subtotal",Normal,SubTotal,true,0); //Shows the same as SumCostPrice?
  EditField(260,-41,70,"Freight",Normal,ShipCost,true,0);
  if (IsEnterprise) then begin
    EditField(260,-21,70,"Customs",Normal,CustomsCost,true,0);
  end;
  if (CYb.UseTaxTemplatesforTaxCalc==0) then begin
    if (UserCanAction("ViewVatGoodsReceipt",true)==true) then begin // VN  >>
      EditField(410,-41,70,"#VAT#",ViewOnly,VATVal,true,0);
    end;  //  VN
    if (HasExtTax) then begin
      EditField(410,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end;
  end else begin
    EditField(410,-41,70,"Tax",Normal,VATVal,true,0);
  end;
  EditField(-169,-41,118,"Subtotal",ViewOnly,SumCostPrice,true,0);
  if (UserCanAction("ViewVatGoodsReceipt",true)==true) then begin // VN  >>
    EditField(-169,-21,118,"TOTAL",ViewOnly,PayVal,true,0);
  end;  //  VN
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate); tilenr = tilenr + 1;
    vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (IsEnterprise and StandardHansa==false) then begin
    Tile(tilenr,120,false,tilenr,Cost1); tilenr = tilenr + 1;
    vs = 20;
    label = UserDefined("AccBlock","PUCost1");
    if (blank(label)) then begin label = "Extra Cost 1";end;
    EditField(h=110,v=6,70,label,Normal,Cost1,false,0);
    label = UserDefined("AccBlock","PUCost2");
    if (blank(label)) then begin label = "Extra Cost 2";end;
    EditField(h2=295,v,70,label,Normal,Cost2,false,0);
    label = UserDefined("AccBlock","PUCost3");
    if (blank(label)) then begin label = "Extra Cost 3";end;
    EditField(h,v+=vs,70,label,Normal,Cost3,false,0);
    label = UserDefined("AccBlock","PUCost4");
    if (blank(label)) then begin label = "Extra Cost 4";end;
    EditField(h2,v,70,label,Normal,Cost4,false,0);
    label = UserDefined("AccBlock","PUCost5");
    if (blank(label)) then begin label = "Extra Cost 5";end;
    EditField(h,v+=vs,70,label,Normal,Cost5,false,0);
    if (HasApprovals) then begin
      SoftEditField(h2,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
    ButtonFrame(h3=400,v=16,130,2,"Extra Costs Calculation");
    RadioButton(h3,v,0,0,"Value",ExtraCostsCalculation);
    RadioButton(h3,v+=16,1,0,"Weight",ExtraCostsCalculation);
/*
//oldapprovals  
    ButtonFrame(h3=-163,v=16,123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/    
    Tile(tilenr,130,false,tilenr,FreightCode); tilenr = tilenr + 1;
    EditField(h1,v=6,80,"Freight Company",Normal,FreightCode,false,FreightCompanySClass);
    EditField(h1,v+=vs,-20,"Name",Normal,FreightCompany,false,0);
    EditField(h1,v+=vs,-20,"#Reg. No.#",Normal,FreightCompanyRegNr,false,0);
    EditField(h1,v+=vs,-20,"Truck Information",Normal,TruckInfo,false,0);
    EditField(h1,v+=vs,-20,"Driver",Normal,Driver,false,0);
    EditField(h1,v+=vs,-20,"CMR",Normal,CMRText,false,0); // International transporting number
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
  end;
  if (StandardHansa==true) then begin
    Tile(tilenr,30,false,tilenr,Comment); tilenr = tilenr + 1;
    EditField(h1,v=6,-20,"Comment",Normal,Comment,false,0);
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Goods Receipt Status",'r',4,"PUStatusDsm");
    SpecialMenu("Generate Serial No.",' ',2,"GenSerialNosPUDsm");
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',4,"OpenTRFromPU");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModPL) then begin
      SpecialMenu("#Purchase Invoice#",'F',3,"VIFromPUDsm");
    end;
    if (HasRetGoodsToSupp and HasModIN) then begin
      SpecialMenu("Returned Goods",'B',7,"RetPUFromPUDsm");
    end;
  end else begin
    if (IsEnterprise) then begin
      SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
      SpecialMenu("Goods Receipt Status",'r',4,"PUStatusDsm");
    end;
    if (HasSerialNumbers) then begin
      SpecialMenu("Generate Serial No.",' ',2,"GenSerialNosPUDsm");
    end;
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',4,"OpenTRFromPU");
    end;
    if (HasTaxMatrix) then begin
      SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixPUDsm");
    end;
    SpecialMenu("Print Labels",'e',0,"PrintPULabPUDsm");
    SpecialMenu("Update Prices",' ',1,"UpdatePricesPUDsm");

    if (HasModWHM) then begin
      SpecialMenu("Accept Warehouse #Stock# Movements",' ',9,"OKStockMovPUrDsm");
    end;
    if (HasLocalization("HRV")) then begin
      SpecialMenu("Sales Price Calculation",' ',8,"SPCHRVPUDsm");
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"PUSendforAcceptancePUDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModPL) then begin
      SpecialMenu("#Purchase Invoice#",'F',3,"VIFromPUDsm");
    end;
    if (HasAdvancedStock or (HasRetGoodsToSupp and HasModIN)) then begin
      SpecialMenu("Returned Goods",'B',7,"RetPUFromPUDsm");
    end;
    if (HasModRent) then begin
  //  SpecialMenu("Create #Stock# Movement",' ',5,"StockMovFromPUSpec");
  //  SpecialMenu("Scan",' ',8,"ScanBarCodePUDsm");
      SpecialMenu("#Stock# Transfer",' ',8,"INTransFromPUsm");
    end;
    SpecialMenu("Add #Supplier#",' ',0,"AddSupplierPUDsm");
    SpecialMenu("Add Item",' ',0,"AddItemPUDsm");    
  end;
  EndWindow;
end;

window OPDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,h3,h4,t,v,vm,vs;
  Integer tilenr,verticalpos;
  Integer f,flipnr;  
  Boolean buttonf;
  record EnableBankBlock EBb;

  WindowBegin("Payment",OPDClass,CGview,-);
  SetWRect(20,80,700,464);
  Sizeable(-1,-1,0,0);
  UseView(OPVc);
  ActiveFieldOnNew("PayDate");
  h = 100; h2 = 280; h3 = 490; v = 6; vs = 20;
  if (IsEnterprise) then begin
    Tile(0,110,false,"",SerNr);
  end;
  if (HasNumberSeries) then begin
    EditField(h,v,80,"No.",St_i,SerNr,false,TSerSClass);
  end else begin
    EditField(h,v,80,"No.",St_i,SerNr,false,0);
  end;
  EditField(h2,v,80,"Payment Date",Normal,PayDate,false,PasteCurDate);
  if (HasModNL) then begin
    EditField(h3,v,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  end;
  EditField(h,v+=vs,30,"Payment Mode",Normal,PayMode,false,PMSClass);
  CheckBox(h4=-100,6,0,"Ordered",OrderedFlag);
  CheckBox(h4=-100,6+vs,0,"OK",DoneFlag);
  CheckBox(h4=-100,6+vs+vs,0,"Paid",Paid); // VN //  AG moved here for 6.4
  EnterSkip(Math);
  EditField(h2,v,80,"Own Bank A/C",Normal,BankAcc,false,0);
  EditField(h3,v,82,"#Sort Code#",Normal,SortCode,false,0);
  EditField(h,v+=vs,80,"Reference",Normal,PayNumber,false,0);
  if (HasAdvancedAccounting) then begin
    CheckBox(h2,v,0,"#Supp.# Info on Trans.",APonTR);
  end;
  if (HasLanguages) then begin
    EditField(h3,v,82,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,472,"Comment",Normal,BankName,false,0);
  end else begin 
    v = v + 10;
  end;
  EnterSkip(Math);
//  CheckBox(h,v=6,0,"Re_jected",RejectedFlag);//not used any more
//  CheckBox(h2,v,0,"#Supp.# Info on Trans.",APonTR);
  tilenr = 1;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Payments"); tilenr = tilenr + 1;
    TileButton(tilenr,"Bank"); tilenr = tilenr + 1;
    tilenr = 1;
    Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  end;
//  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
//  CheckBox(25,v=-20,0,"OK",DoneFlag);
  if (HasLocalization("EST,LVA")) then begin
    buttonf = true;
    HalPushButton(40,-25,40+100,-5,"EPaymentSignOPDsm","Sign");
    HalPushButton(150,-25,150+100,-5,"EPaymentQueOPDsm","Send to Bank");
  end;
  if (HasMultiCurrency) then begin
    EditField(-300,-21,50,"Currency",Normal,PayCurCode,false,CurncyCodeSClass);
  end;
  EditField(-125,-21,85,"Withdrawn",Normal,CurPayVal,true,0);
  h = 10;
  if (tilenr>1) then begin
    if (HasLocalization("EST,LVA")) then begin
      MatrixBegin(h,v=24,-50,-35,-,200);
    end else begin
      MatrixBegin(h,v=24,-50,-25,-,200);
    end;
  end else begin
    verticalpos = -40;
    if (HasLocalization("FIN,LVA,LTU,AUS") or HasMultiCurrency) then begin
      verticalpos = -50;
    end;
    if (HasLocalization("AUS,EST,LVA,RUS,POL,LTU") or (!WindowsMode) or HasModCheck or HasMultiCurrency or HasObjects or HasRussianPrepayment or HasPrepayments or HasBankImport or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN"))) then begin
      if (buttonf) then begin
        MatrixBegin(h,v+=40,verticalpos,-40,-,200);
    end else begin
        if (WindowsMode) then begin
          MatrixBegin(h,v+=40,verticalpos,-25,-,200);
        end else begin
          MatrixBegin(h,v+=40,verticalpos,-30,-,200);
        end;
      end;
    end else begin
      MatrixBegin(h,v+=30,-30,-30,-,200);
    end;
  end;
  vm = v;
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kPaymentRowTypeNormal,24,"Invoice No.",0,VISerNr,false,APSClass);
  MatCol(t,100,"#Supplier#",0,VECode,false,VESClass);
  EnterSkip(RecVal);
  MatCol(t=kPaymentRowTypeSettlementDiscount,24,"",0,VISerNr,false,APSClass);
  MatText(t,105,"Set. Disc.",true);
  MatCol(t,190,"Tag/Object",0,Objects,false,ObjSClass);
  MatCol(t,-370,"PI.Cur",0,PInvCurncy,true,0);
  MatCol(t,-330,"Invoice Val",0,PInvVal,true,0);
  MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
  MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Sent Value",0,RecVal,true,0);
  MatCol(t=kPaymentRowTypeBankFee,24,"",0,VISerNr,false,APSClass);
  MatText(t,105,"Fee",true);
  MatCol(t,190,"Tag/Object",0,Objects,false,ObjSClass);
  MatCol(t,-370,"PI.Cur",0,PInvCurncy,true,0);
  MatCol(t,-330,"Invoice Val",0,PInvVal,true,0);
  MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
  MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
  MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
  MatCol(t,-90,"Sent Value",0,RecVal,true,0);
  flipnr = 1;
  if (HasMultiCurrency or HasObjects or HasRussianPrepayment or HasPrepayments or HasBankImport or ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA,LTU")) or HasLocalization("AUS")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
  end;
  MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    MatCol(t,-370,"Split VAT",0,SplitVAT,true,0);
  end;
  if (HasMultiCurrency) then begin
    MatCol(t,-260,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-220,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-350,"I. Cur.",0,PInvCurncy,true,0);
    MatCol(t,-310,"Open Inv. Value",0,PInvOutstand,false,0);
    MatCol(t,-220,"Invoice Value",0,PInvVal,true,0);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    if (HasLocalization("POL")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-310,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
      MatCol(t,-270,"Bank Amount",0,BankVal,true,0);
      MatCol(t,-180,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
      MatCol(t,-110,"Bank Amt. in Cur. 1",0,B1BankVal,true,0);
    end;
  end else begin
    if (HasLocalization("LTU,LVA")) then begin
      MatCol(t,-180,"Bank Amount",0,BankVal,true,0);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"Open Inv. Value",0,PInvOutstand,false,0);
      MatCol(t,-180,"Invoice Value",0,PInvVal,true,0);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    end else begin
      if (!IsEnterprise and HasLocalization("POL") and HasSupplierStatus) then begin
        MatCol(t,-320,"Open Inv. Value",0,PInvOutstand,false,0);
        MatCol(t,-235,"Invoice Value",0,PInvVal,true,0);
        MatCol(t,-165,"Sent Value",0,RecVal,true,0); 
        MatCol(t,-110,"Reference Number",0,rkPayNumber,false,0);
        MatCol(t,-60,"Req.Date",0,rkPayNumberDate,false,0);
      end else begin 
        MatCol(t,-300,"Open Inv. Value",0,PInvOutstand,false,0);
        MatCol(t,-215,"Invoice Value",0,PInvVal,true,0);
        MatCol(t,-135,"Sent Value",0,RecVal,true,0);
      end;
    end;
  end;
  if (IsEnterprise==false) then begin
    if (HasObjects) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      if (HasRussianPrepayment) then begin
        if (HasModPO) then begin
          MatCol(t,-320,"Tags/Objects",0,Objects,false,ObjSClass);
          MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
        end else begin
          MatCol(t,-260,"Tags/Objects",0,Objects,false,ObjSClass);
        end;
        MatCol(t,-100,"Prepayment No.",0,PrepayNr,false,OPPSClass);
      end else begin
        MatCol(t,-160,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
    end else begin
      if (HasRussianPrepayment) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
        if (HasModPO) then begin
          MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
        end;
        MatCol(t,-100,"Prepayment No.",0,PrepayNr,false,OPPSClass);
      end;
    end;
    if ((Left(BuildProductCode,16)=="StandardAccounts" or IsSberbankProduct or BuildProductCode=="StandardBusiness" or (IsBooks and IsStandardProduct==false)) and HasLocalization("FIN,LVA")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t,360,"Bank Reference",0,BankRefStr,false,0);
      MatCol(t,-250,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-110,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-80,"#VAT# Value",0,VATVal,false,0);
    end;
    if (HasRussianPrepayment==false and HasPrepayments) then begin 
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Prepayment No.",0,PrepayNr,false,OPPSClass);
      if (HasModPO) then begin
        MatCol(t,-200,"Order No.",0,OrderNr,false,POSClass);
      end;
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);      
    end;
    if (HasLocalization("AUS")) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-160,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      MatCol(t,-90,"#Sort Code#",0,SortCode,false,0);
    end else begin
      if (HasModCheck) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
        MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
        MatCol(t,-100,"#Cheque# No.",0,ChequeNr,false,0);
      end;
      if (HasBankImport) then begin
        Flip(flipnr); flipnr = flipnr + 1;
        MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
        MatCol(t,-250,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
      end;
    end;
    if (BuildProductCode=="StandardRestaurant" or BuildProductCode=="StandardHealthcare") then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    end;
  end else begin
    if (StandardHansa==false) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
      MatCol(t,-270,"P. Mode",0,PayMode,false,PMSClass);
      MatCol(t,-220,"#Cheque# No.",0,ChequeNr,false,0);
      MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-320,"Order No.",0,OrderNr,false,POSClass);
    MatCol(t,-230,"Prepayment No.",0,PrepayNr,false,OPPSClass);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-310,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    MatCol(t,-270,"#VAT# Value",0,VATVal,false,0);
//  MatCol(t,-200,"Extra Tax",0,TAX1Sum,false,0);
    MatCol(t,-130,"#S.# Cur.",0,RecCurncy,true,CurncyCodeSClass);
    MatCol(t,-90,"Sent Value",0,RecVal,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Text",0,Comment,false,0);
    MatCol(t,-260,"Tags/Objects",0,Objects,false,ObjSClass);
    if (StandardHansa==false) then begin
      MatCol(t,-130,"#S.# Cur",0,RecCurncy,true,CurncyCodeSClass);
      MatCol(t,-90,"Sent Value",0,RecVal,true,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(t=kPaymentRowTypeNormal,190,"Round Off A/C",0,RoundOffAcc,false,AccSClass);
      if (HasLocalization("POL")) then begin
        MatCol(t,-290,"Round Off",0,RoundOff,true,0);
        MatCol(t,-210,"#Instalment#",0,InstNr,false,APInstallSClass);
        if (HasSupplierStatus) then begin
          MatCol(t,-150,"Reference No.",0,rkPayNumber,false,0);
         MatCol(t,-70,"Req. Date",0,rkPayNumberDate,false,0);
        end;
      end else begin
        MatCol(t,-270,"Round Off",0,RoundOff,true,0);
        MatCol(t,-170,"#Instalment#",0,InstNr,false,APInstallSClass);
        if (HasSupplierStatus) then begin
          MatCol(t,-100,"Reference Number",0,rkPayNumber,false,0);
        end;
      end;
    end else begin
      MatCol(t=kPaymentRowTypeNormal,-170,"Round Off A/C",0,RoundOffAcc,false,AccSClass);
      MatCol(t,-80,"Round Off A/C",0,RoundOff,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,190,"Creditors A/C",0,APAcc,false,AccSClass);
    MatCol(t,-370,"Bank Reference",0,BankRefStr,false,0);
    MatCol(t,-270,"To Bank A/C",0,BankAcc,false,VEBankAccSClass);
    MatCol(t,-140,"#Sort Code#",0,SortCode,false,0);
    MatCol(t,-50,"P. Code",5,PaymentCode,false,PaymentCodeSClass);//whoever added it, why not using BankRefStr ?
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,200,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-400,"Bank Amt.",0,BankVal,true,0);
    MatCol(t,-330,"Bank Fee",0,BankFeeVal,true,0);
    MatCol(t,-270,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-200,"B. Cur. 1 V.",0,B1BankVal,true,0);
    MatCol(t,-130,"B. Cur. 2 V.",0,B2BankVal,true,0);
//  MatCol(t,-120,"Fee %",0,BankFeePrc,true,0); /* What was this ?? */
    if (StandardHansa==false) then begin
      MatCol(t,-60,"Coef. Value",0,Coef,true,0);
    end;
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,-470,"B. Cur.",0,BankCurncy,true,CurncyCodeSClass);
    MatCol(t,-430,"Bank Amount",0,BankVal,true,0);
    MatCol(t,-350,"Rate",0,FrRateBankVal,true,0);
    MatCol(t,-310,"To B. Cur. 1",0,ToRateB1BankVal,true,0);
    MatCol(t,-240,"To B. Cur. 2",0,ToRateB2BankVal,true,0);
    MatCol(t,-170,"Base Rate 1",0,BaseRate1BankVal,true,0);
    MatCol(t,-95,"Base Rate 2",0,BaseRate2BankVal,true,0);
//    if (StandardHansa==false) then begin
//      MatCol(t,-30,"Coef. Value",0,Coef,true,0);
//    end;
  end;
  if (HasLocalization("ARG")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=kPaymentRowTypeNormal,-210,"Text",0,Comment,false,0);
    MatCol(t,-160,"P. Mode",0,PayMode,false,PMSClass);
    MatCol(t,-110,"W. Tax",0,WHTax,false,WHTaxSClass);
    MatCol(t,-65,"W. Tax Base",0,WHTaxBase,false,0);
//    MatCol(t,-100,"W. Tax Accumul.",0,WHTaxAccumBase,false,0);
  end;
  if (HasLocalization("SWE,NOR")) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t,-300,"Payment Channel",0,PayChannel,false,SetSClass);
    MatCol(t,-200,"Urgency",0,PayUrgency,false,SetSClass);
    MatCol(t,-200,"Bank Fee",0,BankFee,false,SetSClass);
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  if (HasSettlementDiscount) then begin
    RowMenuItem(0,"Add Settlement Discount",' ',' ',4312,"CashDiscountOPDsm");
  end;
  if (HasModPL and HasModNL) then begin
    RowMenuItem(0,"Add Bank Fee",' ',' ',4312,"NewFeeOPDsm");
  end;
  if (HasLocalization("POL") and (IsEnterprise or Left(BuildProductCode,16)=="StandardAccounts" or Left(BuildProductCode,23)=="StandardBookkeepingLite")) then begin
    RowMenuItem(0,"Fill Split VAT",' ',' ',0,"FillSplitVATOPDsm");
  end;
  if (HasLocalization("POL")) then begin
    if (IsEnterprise) then begin
      RowMenuItem(0,"Check #Supplier# in #VAT# Payer List",' ',' ',0,"VATPayerListOPDsm");
    end else begin
      if (HasSupplierStatus) then begin
        RowMenuItem(0,"Check #Supplier# in #VAT# Payer List",' ',' ',0,"VATPayerListOPDsm");
      end;
    end;
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  if (tilenr>1) then begin
//    v = 18;
    v = v + 1;
  end;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,120,true,tilenr,BankAcc); tilenr = tilenr + 1;
    v=6; h= 100;
        CheckBox(h2,v,0,"Foreign Payment",ForeignPayment);
    BlockLoad(EBb);
    if (EBb.Enable) then begin
      CheckBox(h,v,0,"Electronically submitted",ElectSentFlag);
    end;
    if (HasApprovals) then begin
      SoftEditField(h3=520,v,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*      
      ButtonFrame(h3=490,v=vm,123,6,"Approval Status");
      RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
      RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/      
/*
  CheckBox(25,v=-39,0,"O_rdered",OrderedFlag);
  CheckBox(25,v=-20,0,"OK",DoneFlag);
  HalPushButton(150,-30,150+100,-5,"EPaymentQueOPDsm","Send to Bank");
*/
    end;
    ButtonFrame(h=40,vm=(v+=40),123,3,"Payment Format");
    RadioButton(h,v,0,0,"Per Row",PayperSupplier);
    RadioButton(h,v+=16,1,0,"Per #Supplier#",PayperSupplier);
    RadioButton(h,v+=16,2,0,"Batch",PayperSupplier);
    ButtonFrame(h2=190,v=vm,123,3,"Payment Method");
    RadioButton(h2,v,0,0,"Normal",PayMethod);
    RadioButton(h2,v+=16,1,0,"Express",PayMethod);
    RadioButton(h2,v+=16,2,0,"Extra urgent",PayMethod);
    ButtonFrame(h3=340,v=vm,123,3,"Bank Fees");
    RadioButton(h3,v,0,0,"We pay",Bankfees);
    RadioButton(h3,v+=16,1,0,"#Suppliers# pay",Bankfees);
    RadioButton(h3,v+=16,2,0,"Shared",Bankfees);
    
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Payment Status",'r',4,"OPStatusDsm");
    if (HasModPL and HasModNL) then begin
      SpecialMenu("Add Bank Fee",' ',3,"NewFeeOPDsm");
    end;
    if (IsEnterprise) then begin
//    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
      SpecialMenu("(-",' ',1,"");
      SpecialMenu("Add Settlement Discount",' ',2,"CashDiscountOPDsm");
    end;
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromOP");
    end;
  end else begin
  //    SpecMenuItem("Print Forms",' ',0); // any code for this one??, no code
    if (HasIntegratedNL) then begin
      SpecialMenu("Open #NL# Transaction",'t',5,"OpenTRFromOP");
    end;
    if (IsEnterprise) then begin
  //    SpecialMenu("Open Withholding Certificate",'',5,"OpenWHCertificateOPDsm");
      if (StandardHansa==false) then begin
        SpecialMenu("Assign #Cheque# Number",' ',6,"AssignChequeOPDsm");
        SpecialMenu("Prepare #Cheque#",'e',9,"PrepChequesOPDsm");
        SpecialMenu("Print #Cheques#",' ',9,"PrintChequesOPDsm");
      end;
    end;
    if (HasWithholdingTax) then begin
      SpecialMenu("Calculate Withholding Taxes",' ',11,"WithholdTaxesOPDsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Payment Status",'r',4,"OPStatusDsm");
      SpecialMenu("Bank Statement",' ',12,"BankStOPDsm");
      if (HasLocalization("EST,LVA")) then begin
        SpecialMenu("E-Payment Status",' ',13,"EPaymentStatusOPDsm");
      end;
      SpecialMenu("Print Cash IN-OUT",' ',4,"PrintCashInOutOPDsm");
      SpecialMenu("Banking File Export",'',4,"BankingFileExportDsm");
      if (HasLocalization("POL")) and (HasSupplierStatus) then begin
        SpecialMenu("Check #Supplier# in #VAT# Payer List",' ',30,"VATAllPayerListOPDsm");
      end;
    end else begin
      if (HasLocalization("AUS") or HasBankImport) then begin
        SpecialMenu("Banking File Export",'',4,"BankingFileExportDsm");
      end;
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"OPSendforAcceptanceOPDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    SpecialMenu("Send Payment to Enablebanking",' ',9,"OPSendtoEnableBankingDsm");
  //SpecialMenu("Get  Payment status ",' ',9,"DoGetPaymentStatusDsm");
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasDownpayments) then begin
      SpecialMenu("Down Payment",' ',7,"DownPayFromOPDsm");
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Cash Out",' ',8,"CLOutFromOPDsm");
    end;
    if (HaseMail) then begin
      SpecialMenu("Email",'m',9,"CreateMailFromOPDsm");
    end;
    if (HasLocalization("HRV,RUS,SLV,SRB,SVN,UKR") and (HasIntegratedNL or IsEnterprise)) then begin
      SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm");
    end;
    if (HasLocalization("POL") and IsEnterprise) then begin
      SpecialMenu("#VAT# Correction #P/L#",' ',9,"VATCorrectionOPsm");
    end;
  end;
  EndWindow;
end;

window GenSTVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Create #Stocktaking# Records",GenSTVClass,CGMnt,RcType);
  SetWRect(20,80,430,310);
  vs = 20; v=6; h = 130;
  EditFieldTL(h,v, 150,"Item No.",M4UStr,Normal,50,f2,false,INSClass);
  EditFieldTL(h,v+=vs, 150,"Item Group",M4Code,Normal,10,FirstAcc,false,ITSClass);
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs, 150,"Item Classification", M4UStr,Normal,60,f6,false,DISClass);
  end;
  EditFieldTL(h,v+=vs, 150,"Location",M4Code,Normal,10,f1,false,LocationSClass);
  if (StandardHansa==false) then begin
    EditFieldTL(h,v+=vs, 100,"Shelf Code", M4UStr,Normal,10,LastAcc,false,0);
    EditFieldTL(h,v+=vs, 150,"Position",   M4Code,Normal,10,AccStr,false,PosSClass);
  end;
  ButtonFrame(h,vm=(v+=41),123,3,"Sorting");
  RadioButton(h,v,0,0,"Item No.",flags[1]);
  RadioButton(h,v+=16,1,0,"Item Group",flags[1]);
  RadioButton(h,v+=16,2,0,"Shelf Code",flags[1]);
  CheckBox(h,v+=32,0,"Include items not in stock",flags[2]);//VN
  StaticText(h=10,v+=40,"If you sort by Item Group or Shelf Code please specify Location as well.",false);
  EndWindow;
end;

window STCompRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify #Stocktaking# Comparison",STCompRClass,CGRcW,RcType);
  SetWRect(20,80,470,400);
  v = 6; vs = 20; h = 140;
  EditFieldTL(h,v, 150,"Item No.",   M4UStr,Normal,50,f1,false,INSClass);
  if (HasItemGroups) then begin
    EditFieldTL(h,v+=vs, 150,"Group",   M4UStr,Normal,5,f3,false,ITSClass);
  end;
  if (HasItemClassification) then begin
    EditFieldTL(h,v+=vs, 150,"Item Classification", M4UStr,Normal,60,f4,false,DISClass);
    EditFieldTL(h,v+=vs, 80,"Classification Type",M4UStr,Normal,60,f5,false,CTypeSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs, 150,"Location",   M4Code,Normal,10,AccStr,false,LocationSClass);
  end;
  if (HasPositions) then begin
    EditFieldTL(h,v+=vs, 150,"Position",   M4Code,Normal,10,LastAcc,false,PosSClass);
  end;
  EditFieldTL(h,v+=vs, 80,"Date",   M4Date,Normal,0,RegDate,false,PasteCurDate);
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs, 80,"Value Variance >",M4Val,Normal,0,vals0,true,0);
  end;
  EditFieldTL(h,v+=vs, 150,"Shelf Code",   M4UStr,Normal,50,f2,false,0);  //  VN
  ButtonFrame(h=30,vm=(v+=50),390,3,"If Item Not Registered on #Stocktaking# Records of Specified Date");
  RadioButton(h,v,0,0,"Assume Counted Quantity is Zero",flags[3]);
//  RadioButton(h,v+=16,1,0,"If Item not on last #Stocktaking# assume 0 in #Stock#",flags[3]);
  RadioButton(h,v+=16,2,0,"Assume Adjusted Quantity is Zero",flags[3]);
  RadioButton(h,v+=16,3,0,"Do Not Show Item in the Report",flags[3]);
  if (IsEnterprise) then begin
    ButtonFrame(h,vm=(v+=40),150,3,"Sorting");
    RadioButton(h,v,0,0,"Item",flags[2]);
    RadioButton(h,v+=16,1,0,"Item Group",flags[2]);
    RadioButton(h,v+=16,2,0,"Shelf Code",flags[2]);
    ButtonFrame(h=200,v=vm,150,3,"Function");
    RadioButton(h,v,0,0,"Show Quantities",flags[1]);
    RadioButton(h,v+=16,1,0,"Show Prices",flags[1]);
    RadioButton(h,v+=16,2,0,"Shelf Code",flags[1]);
  end;
  if (HasSecondQuantity) then begin
    CheckBox(h=30,vm=(v+=28),0,"Show Quantity 2",flags[0]);
  end;
  if (IsEnterprise) then begin
    CheckBox(h,v+=16,0,"Per Serial Number (using today's Serial Number status)",flags[5]);
    CheckBox(h=160,v=vm,0,"Exclude Items if Adjusted Qty is zero",flags[4]);
  end;
  EndWindow;
end;

//START OF S/L POS TOUCH SCREEN 
// window CCPayTouchScreenConfirmSignatureTClass:1
//   wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
// begin
//   real h,h2,v;
//   WindowBegin("Credit Card Payment",CCPayTouchScreenDClass,CGother,RcType);
//   Modality(kModalityGlobal);
//   UseView(RcVc);
//   SetWRect(80,200,530,440);
//   h = 60; h2 = 170; v=40;
//   if (GuiType==kGuiiPhone or GuiType==kGuiMetro) then begin
//     PopoverWindow;
//   end;
//   StaticText(h,v,"Signature OK?",false);
//   ColourPushButton(h,v+=20,h+165,v+48,"YesCCPayTouchScreenConfirmSignatureTClass","Yes",2);
//   ColourPushButton(h+=180,v,h+165,v+48,"NoCCPayTouchScreenConfirmSignatureTClass","No",1);
//   EndWindow;
// end;


// window DCPayTouchScreenDClass:1
//   wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
// begin
//   real h,h2,v;
//   record LocalMachineBlock LMb;
//   WindowBegin("Debit Card Payment",DCPayTouchScreenDClass,CGother,RcType);
// //  Modality(kModalityGlobal);
//   UseView(RcVc);
//   SetWRect(80,200,530,440);
//   h = 210; h2 = 170; v=40;
//   if (GuiType==kGuiiPhone) then begin
//     h = 280; h2 = 240; v=60;
//   end;
//   if (GuiType==kGuiiPhone or GuiType==kGuiMetro) then begin
//     PopoverWindow;
//   end;
//   EditFieldTLX(h,v=6, 140,"Amount",M4Val,Normal,0,30,patM4black,vals0,true,0);
//   BlockLoad(LMb);
//   if (LMb.CCRequireAuthCode!=0) then begin
//     EnterSkip(f1);
//     EditFieldTLX(h,v=v+40, 140,"#Authorisation#",M4Str,Normal,20,30,patM4black,f1,false,0);
//   end;
//   EditFieldTLX(h,v=v+40, 80,"Currency",M4Str,ViewOnly,5,30,patM4black,CurncyCode,false,0);
//   StaticText(h-145,v+=70,"(If you have the debit card ready, you may swipe it now.)",false);
//   if (GuiType==kGuiiPhone) then begin
//     h = 160; h2 = 450;
//   end else begin
//     h=50; h2 = 370;
//   end;
//   if (GuiType==kGuiiPhone) then begin
//     ColourPushButton(h,v+=20,h+165,v+48,"CancelCCPayTouchScreenDClass","Cancel",20);
//     ColourPushButton(h+=180,v,h+165,v+48,"ProceedCCPayTouchScreenDClass","Proceed",20);
//   end else begin
//     ColourPushButton(h,v+=20,h+165,v+48,"CancelCCPayTouchScreenDClass","Cancel<BR>F2",20);
//     ColourPushButton(h+=180,v,h+165,v+48,"ProceedCCPayTouchScreenDClass","Proceed<BR>F1",20);
//     ColourPushButton(h2,v=3,h2+70,v+50,"CashPayTouchScreenKeypad","Keypad<BR>F3",2);
//   end;
//   EndWindow;
// end;


//Attach Pictures to Items 
// window INAttachPictFileVClass:1
//   wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
// begin
//   real h,v,vm,vs;
//   WindowBegin("Specify Attach Pictures to Items",INAttachPictFileVClass,CGMnt,RcType);
//   SetWRect(20,80,400,230);
//   vs = 20;h = 130; v = 6;
//   StaticText(h,13,"Please Item field MUST NEVER BE BLANK!",false);
//   EditFieldTL(h,v+=vs,150,"Item",M4UStr,Normal,41,f1,false,INSClass);
//   EditFieldTL(h,v+=vs,150,"File extensions",M4Str,Normal,200,f2,false,0);
//   ButtonFrame(h,vm=(v=(v+40)),123,2,"Picture Name");
//   RadioButton(h,v,    0,0,"Item Code",flags[0]);
//   RadioButton(h,v+=16,1,0,"Alternative Code",flags[0]); 
//   RadioButton(h,v+=16,2,0,"GM Code",flags[0]);
//   EndWindow;
// end;

//QTVc modified for pics 
window QTDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,h5,t,v,vm,vs,width;
  string 255 label;
  Integer f,flipnr,tilenr,rn;

  WindowBegin("Quotation",QTDClass,CGview,-);
  SetWRect(20,80,820,460);
  Sizeable(-1,-1,0,0);
  UseView(QTVc);
  ActiveFieldOnNew("CustCode");
  if (HasCommunicator) then begin
    CommunicateButton;
  end;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,LeadCUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  // EditField(h,v+=20,150,"Loyalty Card",Normal,LoyaltyCardNr,false,LoyaltyCardSClass); //RP
  if (HasOfficialSerNr) and (HasLocalization("AGO,PRT,MOZ")) then begin
    EditField(h,v+=20,150,"Official No.",ViewOnly,ProformaOfficialSerNr,ViewOnly,LegalInvNrSClass);
  end;
  HalPushButton(h4-300,v+=27,-170,v+vs*2,"GrandmarkItemSearchsm","Grandmark Item Search"); // RP
  HalPushButton(h4-150,v,-20,v+vs*2,"VehiclePartsSearchsm","Vehicle Parts Search"); // RP
  v=v-27; //RP
  tilenr = 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Del. Terms"); tilenr = tilenr + 1;
  end;
//??
  if (HasPriceLists) then begin
    TileButton(tilenr,"Price List"); tilenr = tilenr + 1;
  end else begin
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  end;
  if (HasModSL) then begin
    TileButton(tilenr,"Inv. Address"); tilenr = tilenr + 1;
  end else begin
    TileButton(tilenr,"Address"); tilenr = tilenr + 1;
  end;
  if (HasModSO or HasModIN) then begin
    TileButton(tilenr,"Del. Address"); tilenr = tilenr + 1;
  end;
  if (HasModTS) then begin
    TileButton(tilenr,"Job Costing"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,110,false,tilenr,QTDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 300; h3 = 535; h4 = -90;
  EditField(h1,vm=(v=6),82,"Date"  ,Normal,QTDate,false,PasteCurDate);
  EditField(h1,v+=vs,35,"Payment Terms",Normal,PayDeal,false,PDSClass);
  if (HasAdvancedCRM) then begin
    EditField(h1,v+=vs,82,"Valid Until",Normal,ValidUntilDate,false,PasteCurDate);
  end;
  EditField(h1,v+=vs,82,"Make Contact",Normal,MakeContactDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Decision Date",Normal,RejectDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  end;
  if ((HasLocalization("BRA") and HasAvalara)) then begin
    EditField(h2,v+=vs,135,"Withholding Mode",Normal,WithholdingMode,false,StrSetSClass);
    EditField(h2,v+=vs,135,"Process Origin",Normal,ProcessOrigin,false,StrSetSClass);
  end;
  v = vm;
  if (HasSalesman or HasSalesmanBonus or HasStandardCRM) then begin
    EditField(h3,v,80,"#Salesman#",Normal,SalesMan,false,UserSClass); v = v + vs;
  end;
  if (HasModTS or IsEnterprise) then begin
    EditField(h3,v,80,"Project",Normal,PRCode,false,PRSClass); v = v + vs;
  end;
  EditField(h3,v,80,"Quotation Class",Normal,QuoteClass,false,QuoteClassSClass); v = v + vs;
  EditField(h3,v,80,"Probability %",Normal,Probability,false,0); v = v + vs;
  if (HasStandardCRM) then begin
    EditField(h3,v,80,"Priority",Normal,Priority,false,0); v = v + vs;
  end;
  ButtonFrame(h4,v=15,80,3,"Status");
  RadioButton(h4,v,0,0,"Open",Rejected);
  RadioButton(h4,v+=16,2,255,"Accepted",Rejected);
  RadioButton(h4,v+=16,1,255,"Rejected",Rejected);
  if (HasStandardCRM) then begin
    CheckBox(h4,v+=24,0,"Closed",Closed);
  end;
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math);  tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(55,-21,50,"With.Tax",Normal,WithholdingTax,true,0);
  end;
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(160,-41,70,"GP %",ViewOnly,GPProc,true,0);
      EditField(160,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(330,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
      EditField(330,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end else begin
      if (HasExtTax) then begin
        EditField(330,-41,70,"TAX2",ViewOnly,TAX2Sum,true,0);
        EditField(330,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end;
    end;
    EditField(460,-41,100,"#VAT#",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(330,-41,70,"GP %",ViewOnly,GPProc,true,0);
      EditField(330,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    EditField(460,-41,100,"Tax",ViewOnly ,Sum3,true,0);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(460,-21,100,"Base",ViewOnly,BaseSum4,true,0);
  end;
  EditField(-150,-41,100,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  if (HasObjects or HasModNL) then begin
    MatrixBegin(3,v,-45,-49,-,200);
  end else begin
    MatrixBegin(3,v,-20,-49,-,200);
  end;
  MatTypedRow(stp);
  Flip(0);
  MatCol(t=1,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  if (GuiType==kGuiiPhone) then begin
    MatCol(t=9,100,"Subtotal",0,Spec,false,0);
    MatCol(t,347,"Sum",0,Sum,true,0);
  end else begin
    MatText(t=9,32,"Subtotal",true);
    MatCol(t,100,"",0,Spec,false,0);
    MatCol(t,-80,"Sum",0,Sum,true,0);
  end;
  MatText(t=10,32,"This row and all rows below it will be hidden on printout",false);
  if (GuiType==kGuiiPhone) then begin
    MatCol(t=17,-300,"Header",0,Spec,false,0);
  end else begin
    MatText(t=17,32,"Header",true);
    MatCol(t,100,"",0,Spec,false,0);
  end;
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Description",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  if (HasModNL or HasObjects) then begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    if (UseTaxTemplatesforTaxCalc) then begin
      if (HasCustItem) then begin
        MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-164,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      if (HasCUstItem) then begin
        MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-204,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-154,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      if (HasLocalization("GBR,LTU,POL,LVA")) then begin
        MatCol(t,-90,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        MatCol(t,-45,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
      end else begin
        MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;
    end;
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    if (UseTaxTemplatesforTaxCalc) then begin
      if (HasCustItem) then begin
        MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-164,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      if (HasCustItem) then begin
        MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-204,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-154,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
        MatCol(t,-90,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        MatCol(t,-45,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
      end else begin
        MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;
    end;
  end else begin
    if (UseTaxTemplatesforTaxCalc) then begin
      MatCol(t,-295,"Unit Price",0,Price,true,0);
      MatCol(t,-195,"%",0,vRebate,true,0);
      MatCol(t,-160,"Sum",0,Sum,true,0);
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
      MatCol(t,-295,"Unit Price",0,Price,true,0);
      MatCol(t,-195,"%",0,vRebate,true,0);
      MatCol(t,-160,"Sum",0,Sum,true,0);
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      MatCol(t=1,-265,"Unit Price",0,Price,true,0);
      MatCol(t,-165,"%",0,vRebate,true,0);
      MatCol(t,-130,"Sum",0,Sum,true,0);
      MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
      MatCol(t,-265,"Unit Price",0,Price,true,0);
      MatCol(t,-175,"%",0,vRebate,true,0);
      MatCol(t,-140,"Sum",0,Sum,true,0);
      if ((HasLocalization("GBR,LTU,POL,LVA") and IsEnterprise) or HasLocalization("LVA")) then begin
        MatCol(t,-90,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        MatCol(t,-45,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
      end else begin
        MatCol(t,-45,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;
    end;
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    t = 1;
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    if (UserCanAction("ViewCostPrice",true)) then begin
      MatCol(t,-175,"%",0,vRebate,true,0);
      MatCol(t,-140,"Cost",0,BasePrice,true,0);
      MatCol(t,-70,"GP",0,rowGP,true,0);
    end else begin
      MatCol(t,-135,"%",0,vRebate,true,0);
      MatCol(t,-100,"Sum",0,Sum,true,0);
    end;
//  MatCol(t,-100,"FIFO",0,FIFO,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    if (UserCanAction("ViewCostPrice",true)) then begin
      MatCol(t,-175,"%",0,vRebate,true,0);
      MatCol(t,-140,"Cost",0,BasePrice,true,0);
      MatCol(t,-70,"GP",0,rowGP,true,0);
    end else begin
      MatCol(t,-135,"%",0,vRebate,true,0);
      MatCol(t,-100,"Sum",0,Sum,true,0);
    end;
  end;
//  MatCol(t,-100,"FIFO",0,FIFO,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    t = 1;
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-340,"#Salesmen#",0,Salesmen,false,UserSClass);
    MatCol(t,-280,"Invoiced",0,Invd,true,0);
    MatCol(t,-230,"Unit Price",0,Price,true,0);
    MatCol(t,-150,"Price Factor",0,PriceFactor,true,0);
    MatCol(t,-70,"Recipe",0,Recepy,false,RecSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-340,"Unit Price",0,Price,true,0);
    MatCol(t,-262,"Price Factor",0,PriceFactor,true,0);
    MatCol(t,-170,"",0,MotherArtCode,false,0);
    MatCol(t,-100,"",0,RecipeQuant,false,0);
    MatCol(t,-70,"Recipe",0,Recepy,false,RecSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    t = 1;
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
    MatCol(t,-270,"Unit Qty",0,UnitFactQuant,true,0);
    MatCol(t,-215,"Width",0,UnitXval,true,0);
    MatCol(t,-170,"Height",0,UnitYval,true,0);
    MatCol(t,-125,"Depth",0,UnitZval,true,0);
    MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
    MatCol(t,-270,"Unit Qty",0,UnitFactQuant,true,0);
    MatCol(t,-215,"Width",0,UnitXval,true,0);
    MatCol(t,-170,"Height",0,UnitYval,true,0);
    MatCol(t,-125,"Depth",0,UnitZval,true,0);
    MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  end;
  if (HasModTS) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    if (IsEnterprise) then begin
      MatCol(t=1,-490,"Phase",0,PRStage,false,PRStageSClass);
    end;
    MatCol(t=1,-440,"Person",0,EMCode,false,UserSClass);
    if (IsEnterprise) then begin
      MatCol(t,-390,"Group",0,JobGroup,false,EGSClass);
      MatCol(t,-340,"Time Class",0,TimeClass,false,TimeClassSClass);
    end;
    MatCol(t,-280,"Markup",0,Markup,true,0);
    MatCol(t,-230,"Type",0,BudType,true,SetSClass);
    MatCol(t,-190,"Inv. After",0,InvAfter,true,PasteCurDate);
    MatCol(t,-120,"Inv. Date",0,InvDate,true,PasteCurDate);
    MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-490,"Phase",0,PRStage,false,PRStageSClass);
    MatCol(t,-440,"Person",0,EMCode,false,UserSClass);
    if (IsEnterprise) then begin
      MatCol(t,-390,"Group",0,JobGroup,false,EGSClass);
      MatCol(t,-340,"Time Class",0,TimeClass,false,TimeClassSClass);
    end;
    MatCol(t,-270,"Markup",0,Markup,true,0);
    MatCol(t,-220,"Type",0,BudType,true,SetSClass);
    MatCol(t,-170,"Inv. After",0,InvAfter,true,PasteCurDate);
    MatCol(t,-110,"Inv. Date",0,InvDate,true,PasteCurDate);
    MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
    if (HasLocalization("BRA") and HasAvalara) then begin
      Flip(flipnr); flipnr = flipnr + 1;
      t = 1;
      MatCol(t,144,"Description",0,Spec,false,0);
      MatCol(t,-320,"Other Cost",0,OtherCost,false,0);
      MatCol(t,-250,"Freight Cost",0,FreightCost,false,0);
      MatCol(t,-180,"Insurance",0,Insurance,false,0);
      MatCol(t,-110,"Untaxed Other Cost",0,UntaxedOtherCost,false,0);
    end;
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");
  if (HasModIN) then begin 
    RowMenuItem(0,"Item Picture",'P','P',0,"ItemPicQTDsm"); //RP
    RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusQTDsm");
  end;
  RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"QTLastSPrsm");
  RowMenuItem(0,"Add Header Line",' ',' ',0,"QTAddHeaderLine");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"QTAddHidLine");
  RowMenuItem(0,"Add Subtotal Line",' ',' ',0,"SubtotalQTDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Manager's Discount Override",' ',' ',0,"MgrsDiscOverrideQTDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-31,v,-12,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;

  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate);  tilenr = tilenr + 1;
    vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,110,false,tilenr,ShipDeal);  tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
    EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
    if (HasRoute) then begin
      EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
    end;
    EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
    if (StandardHansa==false) then begin
      EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
    end;
    EditField(h1,v+=vs,80,"Opportunity",ViewOnly,OYNr,false,0);
    EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
    EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
    EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
    EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
    EditField(h2,v+=vs,80,"Cont. Start Date",Normal,ContractStartDate,true,0);
    EditField(h2,v+=vs,-40,"Opp. Comment",Normal,OYDescription,false,0);
    EditField(h3,v=vm,80,"Order No.",Normal,OrderNr,false,0);
    EditField(h3,v+=vs,80,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
    EditField(h3,v+=vs,80,"Days to Delivery",Normal,DaysToDelivery,false,0);
//    EditField(h3,v+=vs,80,"Intrastat Transaction Code",Normal,IntrastatTransCode,false,IntrastatTransCodeSClass);
    EditField(h3,v+=vs,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
    CheckBox(h3-30,v+=20,0,"Disallow Invoicing more than Quoted",DisallowInvoicemorethanQuoted);
  end;
  if (HasPriceLists) then begin
    Tile(tilenr,110,false,tilenr,PriceList);  tilenr = tilenr + 1;
    v = vm;
    if (HasPriceLists) then begin
      EditField(h1,v,80,"Price List",Normal,PriceList,false,PLDefSClass);
      if (IsEnterprise==false and HasLanguages) then begin
        EditField(h2,v,80,"Language",Normal,LangCode,false,LangSClass);
      end;
      v = v + vs;
    end else begin
      if (IsEnterprise==false and HasLanguages) then begin
        EditField(h1,v,80,"Language",Normal,LangCode,false,LangSClass); v = v + vs;
      end;
    end;
    if (HasAdvancedPricing) then begin
      if (IsEnterprise==false) then begin vm = v; end;
      EditField(h1,v,80,"Discount Matrix",Normal,RebCode,false,RebSClass); v = v + vs;
    end;
    if (IsEnterprise) then begin
      EditField(h1,v,80,"Invoice To",Normal,InvoiceToCode,false,CUSClass); v = v + vs;
      if (StandardHansa) then begin
        EditField(h1,v,80,"Original Customer",Normal,OrgCust,false,AllCUSClass);
        EditField(h2,v,80,"Language",Normal,LangCode,false,LangSClass); v = v + vs;
      end else begin
        EditField(h1,v,80,"Original Customer",Normal,OrgCust,false,AllCUSClass); v = v + vs;
      end;
    end;
  end else begin
    Tile(tilenr,110,false,tilenr,Comment);  tilenr = tilenr + 1;
    v = vm;
  end;
  EditField(h1,v,-20,"Comment",Normal,Comment,false,0); v = v + vs;
  if (HasModSVO or IsEnterprise) then begin
    EditField(h1,v,-20,"",Normal,Comment2,false,0); v = v + vs;
    EditField(h1,v,-20,"",Normal,Comment3,false,0); v = v + vs;
    EditField(h1,v,-20,"",Normal,Comment4,false,0); v = v + vs;
  end;
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h1,v,80,"Spec. Situation",Normal,SpecSituation,false,StrSetSClass);
    CheckBox(h3,v,0,"Public Highway Service",PubHighwayServ);
    EditField(h1,v+=vs,80,"Admin Process No",Normal,AdminProcessNo,false,0);
  end;
  if (IsEnterprise) then begin  
    v = vm; 
  end else begin
    if (HasAdvancedPricing==false) then begin
      h2 = h1;
    end;
  end;
  if (HasSalesMan and StandardHansa==false) then begin
    EditField(h2,v=vm,80,"Sales Group",ViewOnly,SalesGroup,false,SalesGroupSClass);
    if ((HasLanguages and HasPriceLists==false) or IsEnterprise) then begin
      EditField(h2,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  end;  
  if (HasExtTax) then begin
    EditField(h2,v+=vs,80,"Tax Sum",ViewOnly,TAX1Sum,true,0);
  end;
  if (HasModSVO) then begin
    EditField(h2,v+=vs,80,"Serv. Ord. No.",ViewOnly,SVOSerNr,true,0);
  end;
  if (HasLocalization("FIN")) then begin
    EditField(h3,v=vm,80,"Account Dimension",Normal,AccountDimension,false,0);
    EditField(h3,v+=vs,80,"Tender Reference",Normal,TenderReference,false,0);
    EditField(h3,v+=vs,80,"Contract",Normal,ContractNr,false,0);
  end;
  Tile(tilenr,250,false,tilenr,Addr1);  tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr3,false,0);
    EditField(h2+200,v,-20,"City Code",Normal,AvalaraCityCode,false,0);
  end else begin
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  end;
  label = UserDefined("CUVc","InvAddr4");
  if (HasLocalization("BRA") and HasAvalara) then begin
    EditField(h,v+=vs,150,label,Normal,InvAddr4,false,0);
    EditField(h2+200,v,-20,"State code",Normal,AvalaraStateCode,false,0);
  end else begin
    EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  end;
  h5 = 290; width = 135; 
  if (HasCountryPerCustomer) then begin
    EditField(h,vm=(v+=vs),50,"Country",Normal,InvCountry,false,CountrySClass);
    if (HasLocalization("BRA") and HasAvalara) then begin
      EditField(h2+200,v,-20,"Country Code",Normal,AvalaraCountryCode,false,0);
    end;
    if (HasLocalization("BRA")) then begin 
      EditField(h1+61,v,200,"",ViewOnly,InvCountryName,false,0);
      h5 = -170;
      width = -20;
    end;
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,width,"Account Op.",Normal,BankCode,false,BankSClass);
    vm = v;
  end else begin
    if (HasApprovals==false) then begin
      vm = v+2*vs;
    end;
  end;
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
  end;
/*
//oldapprovals  
  if (HasApprovals) then begin
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
  end;
*/  
  if (HasVATZone) then begin
    if (StandardHansa==false) then begin
      v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
    end else begin
      v = VATZoneButtonsLabelsENG(h3=290,v=vm+40,170,16);
    end;
  end;
  if (IsEnterprise) then begin
    EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
    EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
    EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
    EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  end;
  if (HasModSO or HasModIN) then begin
    v = 6; h1 = 110;
    Tile(tilenr,170,false,tilenr,ShipAddr0);  tilenr = tilenr + 1;
    if (IsEnterprise and StandardHansa==false) then begin
      EditField(h1,v,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
      v = v + vs;
    end;
    if (HasLocalization("BRA") and HasAvalara) then begin  
      EditField(h1,v,-20,"Delivery",Normal,ShipAddr0,false,0);
      EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
      EditField(h1,v+=vs,-20,"House-Complement",Normal,ShipAddr2,false,0);
      EditField(h1,v+=vs,-20,"Neighbourh.",Normal,ShipAddr3,false,0);
      EditField(h1,v+=vs,200,"City",Normal,DelAddr3,false,0);
      EditField(h1+380,v,-20,"City Code",Normal,DelAvalaraCityCode,false,0);
      EditField(h1,v+=vs,200,"Postcode",Normal,DelAddr4,false,0);
      EditField(h1+380,v,-20,"State code",Normal,DelAvalaraStateCode,false,0);
  end else begin
    EditField(h1,v,-20,"Delivery",Normal,ShipAddr0,false,0);
    EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
    EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
    EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
    end;
    if (HasCountryPerCustomer) then begin
      EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
      if (HasLocalization("BRA")) then begin 
        EditField(h1+90,v,200,"",ViewOnly,DelCountryName,false,0); 
        if (HasAvalara) then begin
      EditField(h1+380,v,-20,"Country Code",Normal,DelAvalaraCountryCode,false,0);
      EditField(h1,v+=vs,200,"Phone",Normal,DelPhone,false,0);//adr 5postcode
      EditField(h1+380,v,-20,"Email",Normal,DelEmail,false,0);//adr 5postcode
      v = v+vs;
    end;
      end;      
    end;
    EnterSkip(QTDate);
  end;
  if (HasModTS) then begin
    Tile(tilenr,115,false,tilenr,Markup);  tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    if (IsEnterprise) then begin
      ButtonFrame(h1,v=18,120,2,"Invoice Time");
      RadioButton(h1,v,0,0,"Actual",BudTime);
      RadioButton(h1,v+=16,1,255,"As Quoted",BudTime);

      ButtonFrame(h1,v+=40,120,2,"Invoice Purchases");
      RadioButton(h1,v,0,0,"Actual",BudOther);
      RadioButton(h1,v+=16,1,255,"As Quoted",BudOther);

      ButtonFrame(h2,v=18,120,2,"Invoice Material");
      RadioButton(h2,v,0,0,"Actual",BudMaterial);
      RadioButton(h2,v+=16,1,255,"As Quoted",BudMaterial);

      ButtonFrame(h2,v+=40,120,2,"Invoice #Stocked# Items");
      RadioButton(h2,v,0,0,"Actual",BudStocked);
      RadioButton(h2,v+=16,1,255,"As Quoted",BudStocked);
    end else begin
      ButtonFrame(h1,v=18,120,2,"Invoice");
      RadioButton(h1,v,0,0,"Actual",BudOther);
      RadioButton(h1,v+=16,1,255,"As Quoted",BudOther);
    end;

    EditField(h3,v=6,80,"Markup",Normal,Markup,false,0);
    if (IsEnterprise) then begin
      EditField(h3,v+=vs,80,"Total Time",Normal,SumTime,false,0);
      EditField(h3,v+=vs,80,"Total Purchases",Normal,SumOther,false,0);
      EditField(h3,v+=vs,80,"Total Materials",Normal,SumMaterial,false,0);
      EditField(h3,v+=vs,80,"Total #Stocked#",Normal,SumStocked,false,0);
    end else begin
      EditField(h3,v+=vs,80,"Total",Normal,SumOther,false,0);
    end;
  end;
  
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Quotation Status",'r',3,"QTStatusDsm");
    if (HasModIN) then begin
      RowMenuItem(0,"Item Picture",'P','P',0,"ItemPicQTDsm"); //RP
      SpecialMenu("Item Status",'I',1,"ItemStatusQTDsm");
    end;
/*email not working yet
    if (HaseMail) then begin
      SpecialMenu("Create email",'m',12,"CreateMailFromQTDsm");
    end;
*/
    SpecialMenu("Add Subtotal",' ',4,"SubtotalQTDsm");
    if (HasCustomerStatusReport) then begin 
      SpecialMenu("Customer Status",'e',2,"CUStatusQTDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModSO) then begin
      SpecialMenu("Order",'G',9,"ORFromQTDsm");
    end;
    if (HasModSL) then begin
      SpecialMenu("Invoice",'F',10,"IVFromQTDsm");
    end;
  end else begin
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  if (HasCustomerStatusReport) then begin
    SpecialMenu("Customer Status",'e',2,"CUStatusQTDsm");
  end;
  SpecialMenu("Quotation Status",'r',3,"QTStatusDsm");
  if (IsEnterprise) then begin
    if (HasLocalization("CAN,USA")) then begin
      SpecialMenu("Get Tax Rates",' ',0,"QTGetTaxRates2Dsm");
    end;
    if (StandardHansa==false) then begin
      if (HasLocalization("AGO,PRT")) then begin
        SpecialMenu("Print Proforma Invoice",' ',4,"PrintProformaInvoiceQTDsm");
      end;
    end;
    SpecialMenu("Recalculate Discount",' ',6,"RecalcDiscountQTDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Recalculate Weight and Volume",' ',7,"RecalcWeightQTDsm");
    end;
  end else begin
    if (HasAvalara) then begin
      SpecialMenu("Get Tax Rates",' ',0,"QTGetTaxRates2Dsm");
    end;
    if (HasLocalization("AGO,PRT") and HasStandardCRM==false) then begin
      SpecialMenu("Print Proforma Invoice",' ',4,"PrintProformaInvoiceQTDsm");
    end;
  end;    
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Sign",' ',10,"SignQTDsm");
  end;
  if (HasAdvancedPricing and (HasMultiCurrency or HasBase2)) then begin
    SpecialMenu("Update Currency Price List Items",' ',8,"UpdatePricesQTDsm");
  end;
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixQTDsm");
  end;
  if (StandardHansa==false) then begin
    SpecialMenu("Manager's Discount Override",' ',24,"MgrsDiscOverrideQTDsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"QTSendforAcceptanceQTDsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  if (HasLocalization("BRA") and HasAvalara) then begin
    SpecialMenu("Calculate Avalara Brazilian Taxes",'',17,"BrazilAvalaraJsonFileForSendingQTDsm");
  end;
  if (HasModProd) then begin
    SpecialMenu("Update Cost from Production Orders",' ',14,"UpdQTCstFromProdOrdDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModSO or IsSberbankProduct) then begin
    SpecialMenu("Order",'G',9,"ORFromQTDsm");
  end;
  if (HasStandardCRM==false) or (HasModSL) then begin
    SpecialMenu("Invoice",'F',10,"IVFromQTDsm");
  end;
  if (HasModPOS) then begin
    if (HasLocalization("PRT")==false) then begin
      SpecialMenu("POS Invoice",'f',10,"IVCashFromQTDsm");
    end;
  end;
  if (HasStandardCRM) then begin
//    SpecialMenu("Activity",'c',11,"CreateActFromQTDsm");
  end;
  if (HaseMail or IsEnterprise) then begin
    SpecialMenu("Email",'m',12,"CreateMailFromQTDsm");
  end;
  if (HasModTS or IsEnterprise) then begin
    SpecialMenu("Project",' ',13,"CreatePRFromQT");
    SpecialMenu("Project Budget",' ',14,"CreateTBBUFromQTDsm");
  end;
  if (HasModProd) then begin
    SpecialMenu("Production Order",' ',14,"ProdOrderFromQTDsm");
  end;
  if (HasModSVO) then begin
    SpecialMenu("Work Sheet",'',14,"WSFromQTDsm");
  end;
  if (HasModCredMan) then begin
    SpecialMenu("Credit Agreement",' ',15,"CreateCredManQTsm");
  end;
  end;
  SpecialMenu("Add Customer",' ',0,"AddCustomerQTDsm");
  SpecialMenu("Add Item",' ',0,"AddItemQTDsm");  
  EndWindow;
end;

//TM - Prices Customization 
window PLLClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,l,v;
  
  h2 = 270;
  WindowBegin("Prices",PLLClass,CGmlist,-);
  SpawnClass(PLDClass);
  SetWRect(20,80,550,370); 
  Sizeable(-1,-1,0,0);
  UseView(PLVc);
  RecordList(4,17,-21,-39);
  RlColKey(h=4,h,"Item",ArtCode,false,ArtCode);
  RlColKey(h=100,h,"Price List",PLCode,false,PLCode);
 // if (HasStandardCRM) then begin
    RlCol(h=180,h,"Customer",CustCode,false);
    RlColKey(h=270,h, "Comment",Comment,false,Comment);
  //end else begin
  //  RlColKey(h+=135,h,"Comment",Comment,false,Comment);
  //end;
  RlColKey(h=500,h,"End Date",EndDate,false,EndDate);
  RlCol(-115,-30,"Price",ExVatPrice,true); 
  SearchField("Search");
  EndWindow;
end;

window PLDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Price",PLDClass,CGview,-);
  SetWRect(64,80,459,330);
  UseView(PLVc);
  v = 10; vs = 20; h = 120;
  EditField(h,v, 100,"Item",Normal,ArtCode,false,INSClass);
  EditField(h,v+=vs,100,"Price List",Normal,PLCode,false,PLDefSClass);
  EditField(h,v+=vs,-40,"Comment",Normal,Comment,false,0);
  EditField(h,v+=vs ,70,"Price",Normal,ExVatPrice,true,0);
  EditField(h,v+=vs ,70,"End Date",Normal,EndDate,false,0); //RP - Special prices end date
  if (HasModNL) then begin
    EditField(h,vm=(v+=vs),70,"Sales A/C",Normal,SalesAcc,false,AccSClass);
  end;
//  EditField(h,v+=vs,70,"#VAT# Code",Normal,VATCode,false,VATCodeSClass);
  if (HasStandardCRM) then begin
    EditField(h,v+=vs,70,"Customer",Normal,CustCode,false,CUSClass);
  end;
  if (HasBuyBack) then begin
    EditField(h,v+=vs ,70,"BuyBack Cost",Normal,CostPrice,true,0);
    EditField(h,v+=20,70,"BuyBack Accr. A/C",Normal,BBVarAcc,false,AccSClass);
  end;
  if (IsEnterprise) then begin
    CheckBox(80,v+=30,0,"Use this price, don't use any other Pricing Calculations",NoOtherPricing);
    CheckBox(80,v+=16,0,"Do not Recalculate",DonotRecalculate);
  end;
  if (HasBuyBack) then begin
    CheckBox(80,v+=16,0,"Generate BuyBack Transaction",BBGenTrans);
  end;
  EndWindow;
end;

//TM - internal Orders 
window IntORLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Internal Orders",IntORLClass,CGmlist,-);
  SpawnClass(IntORDClass);
  SetWRect(64,80,600,298);
  Sizeable(-1,-1,0,0);
  UseView(IntORVc);
  FormName(PrintIntORL);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"N_o.",SerNr,false,SerNr); 
  RlColKey(71,71,"OK",OKFlag,false,OKFlag); 
  RlColKey(151,151,"Date",TransDate,false,TransDate);
//  RlColKey(141,136,"Status",StatusMark,false,StatusFlag);  // StatusFlag funcionality removed
  RlColKey(230,230,"Department",Department,false,Department);
  RlColKey(310,310,"Reference",Reference,false,Reference);
  RlColKey(370,370,"Person",OurUser,false,OurUser);
  RlColKey(430,430,"Name",Name,false,Name);
  if (AcceptanceStatusColumnTest("IntORVc")) then begin
    CalculatedColumn(-40,-40,"Appr.","IntORLClassAcceptanceStatus",false);
  end;
  SearchField("Search");
  EndWindow;
end;

window IntORDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  WindowBegin("Internal Order",IntORDClass,CGview,-);
  SetWRect(20,80,615,350);
  Sizeable(-1,-1,0,0);
  UseView(IntORVc);
  FormName(IntORForm);
  ActiveFieldOnNew("OurUser");
  h = 100; h2 = 230; h3 = 450; vs = 20;
  Tile(0,50+24,false,"",OurUser);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Person",ViewOnly,OurUser,false,UserSClass);
  EnterSkip(PlanShip);
  EditField(h2=250,v=vm,-40,"Name",Normal,Name,false,0);
  EditField(h2,vm=(v+=20),95,"Department",Normal,Department,false,DepSClass);
  CheckBox(h2+120,vm,0,"Closed",Closed);
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Del. Address");
  TileButton(4,"Comments");
  Tile(1,70,false,"1",PlanShip);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = 600;
  EditField(h1,v=6,82,"Date",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
  EditField(h1,v+=vs,82,"From Location",Normal,FrLocation,false,LocationSClass);
  EditField(h2,v=6,82,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h2,v+=vs,82,"Delivery Mode",Normal,ShipMode,false,DMSClass);
  EditField(h2,v+=vs,82,"To Location",Normal,Location,false,LocationSClass);
  EditField(h3,v=6,82,"Internal Order Class",Normal,IntORClass,false,IntORClassSClass);
  EditField(h3,v+=vs,82,"Language",Normal,LangCode,false,LangSClass);
  EditField(h3,v+=vs,135,"Reference",Normal,Reference,false,0);
//  EditField(h,v+=vs,280,"#Authorised# By",ViewOnly,OKPersons,false,UserSClass);// funcionality removed, no operations menu
  EnterSkip(Math2);
  Tile(2,120,true,"2",Math2);
  EditField(-144,-21,90,"TOTAL",ViewOnly,Total,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-27,-,99);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(1,24,"Item",0,ArtCode,false,INSClass);
  if (HasVarieties) then begin
    MatCol(1,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(1,94,"Qty",0,Quant,true,0);
  end;
  MatCol(1,144,"Treated",0,Shipd1,true,0);
  MatCol(1,194,"Deliv.",0,Shipd2,true,0);
  EnterSkip(ArtCode);
  Flip(1);
  MatCol(1,244,"Description",0,Spec,false,0);
  MatCol(1,-180,"Cost Price",0,Price,true,0);
  MatCol(1,-90,"Total Cost",0,Sum,true,0);
  Flip(2);
  MatCol(t=1,144,"Description",0,Spec,false,0);
  MatCol(t,-304,"Serial No.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-204,"Cost A/C",0,CostAcc,false,AccSClass);
  MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
  MatCol(1,-70,"Recipe",0,Recepy,false,RecSClass);
  Flip(3);
  MatCol(t=1,144,"Desc.",0,Spec,false,0);
  MatCol(1,-280,"Treated",0,Shipd1,false,0);
  MatCol(1,-210,"Deliv.",0,Shipd2,false,0);
  MatCol(t,-140,"Sent",0,Sent,true,0);
  MatCol(t,-70,"P/Ord.",0,POOrd,true,0);
  DeleteRowTest;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  Tile(3,170,false,"3",ShipAddr0);
  EditField(h,v=6,-20,"Delivery",Normal,ShipAddr0,false,0);
  EditField(h,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h2=-170,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  Tile(4,160,false,"4",Math); vs = 20;
  if (HasApprovals) then begin
    SoftEditField(h,v=6,123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
  end;
  StaticText(h-6,v+=40,"Comments",true);
  TextField(h,v-5,-170,-10,Math,0);
/*
//oldapprovals  
  ButtonFrame(h3=-150,v=16,123,6,"Approval Status");
  RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
  RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/  
//  SpecialMenu("#Authorise#",' ',3,"AuthorizeIntORDsm");changed to below
   SpecialMenu("Internal Order Status",'r',5,"IntORStatIntORDsm");
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  SpecialMenu("Reservations",' ',15,"IntORReservIntORDsm");
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"IntORSendforAcceptanceIntORDsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  // SpecialMenu("#Stock# Movement",' ',0,"StockMovFromIntORDsm"); //RP 
  SpecialMenu("#Stock Depreciation#",' ',1,"SDFromIntORDsm");
  SpecialMenu("Purchase Order",' ',2,"POFromIntORDsm");
  SpecialMenu("Greg's Stock Movement",' ',3,"GregsStockMovFromIntORDsm");
  EndWindow;
end;

//Stocktake - TM 
window StockTakeDClass:5
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vs;
  Integer f,flipnr,t;
  Integer icn,pos;

  icn = StringToInt(USetStr(912));
  WindowBegin("#Stocktaking#",StockTakeDClass,CGview,-);
  SetWRect(20,80,570,350);
  Sizeable(-1,-1,0,0);
  UseView(StockTakeVc);
  if (false) then begin
    if (GUIType==kGuiAndroid) then begin
      WindowTitleBar(6002,icn,6003,"#Stocktaking#");
    end;
    h = 10; h2 = 165;
    vs = 38;
    EditField(h,v=6,145,"No.",Normal,SerNr,false,0);
    if (HasMultiLocations) then begin
      EditField(h2,v,145,"Location",Normal,Location,false,LocationSClass);
    end;
    EditField(h,v+=vs,300,"Trans. Date",Normal,TransDate,false,PasteCurDate);
    EditField(h,v+=vs,-10,"Comment",Normal,Comment,false,0);
    CheckBox(40,v+=vs,0,"OK",OKFlag);
    EnterSkip(Math);
    v = v + 42;
    MatrixBegin(0,v,-1,-1,-,999);

    MatCell(t=1,10,6,120,19,ArtCode,false,12,patM4black);
    MatCell(t,130,6,280,19,SerialNr,false,12,patM4black);
    MatCell(t,10,26,190,39,Spec,false,12,patM4black);
    MatCell(t,200,26,280,39,Qty,true,12,patM4black);

  //MatCol(1,-340,"Position",0,Position,false,PosSClass);
    InsertRowTest;
    DeleteRowTest;
    EndMatrix;
  end else begin
    if (GUIType==kGuiiPhone) then begin
      Tile(0,130,false,"",SerNr);
    end;
    vs = 20; h2 = 300;
    EditField(h=100,v=6, 82,"No.",Normal,SerNr,false,TSerSClass);
    EditField(h2,v,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
    if (IsEnterprise) then begin
      CheckBox(-100,v,0,"OK",OKFlag);
    end;
    if (HasMultiLocations) then begin
      EditField(h,v+=vs,82,"Location",Normal,Location,false,LocationSClass);
    end;
    EditField(h2,v,-40,"Comment",Normal,Comment,false,0);
    if (HasLocalization("POL")) then begin
      EditField(-150,-21,82,"Evaluated Value",Normal,EvalSum,false,0);
    end;
    EnterSkip(Math);
  //  CheckBox(420,v=6,0,"Set #Stock# Levels to these Balances on this day",SetStockValue); // Still not working properly
  //  CheckBox(420,v+=vs,0,"Override Backdated",OverrideBackdated); // Still not working properly
    v = v + 42;
    vm = v + 1;
    if (GUIType==kGuiiPhone) then begin
      TileButton(1,"Count");
      TileButton(2,"Comment");
      Tile(1,230,false,"",Math);
    end;
    MatrixBegin(4,v,-50,-35,-,999);
    Flip(0); flipnr = flipnr + 1;
    if (HasJewelleryInterface) then begin
      MatCol(1,32,"Serial No.",0,SerialNr,false,SerialNrSClass);
      EnterSkip(Quant);
      MatCol(1,130,"Item",0,ArtCode,false,INSClass);
      if (HasVarieties) then begin
        MatCol(1,192,"Counted",0,Qty,true,MATVARINSClass);
      end else begin
        MatCol(1,192,"Counted",0,Qty,true,0);
      end;
      if (HasAdvancedStock) then begin
        MatCol(1,254,"In #Stock#",0,InStock,true,0);
        MatCol(1,314,"Description",0,Spec,false,0);
      end else begin
        MatCol(1,254,"Description",0,Spec,false,0);
      end;
      MatCol(1,-160,"Location",0,Location,false,LocationSClass);
    end else begin
      MatCol(1,32,"Item",0,ArtCode,false,INSClass);
  //  MatCol(1,94,"Var",0,VARList,false,VARSClass);
  //  MatCol(1,144,"Qty",0,Qty,true,0);
      if (HasVarieties) then begin
        MatCol(1,94,"Counted",0,Qty,true,MATVARINSClass);
      end else begin
        MatCol(1,94,"Counted",0,Qty,true,0);
      end;
      pos = 154;
      if (HasAdvancedStock) then begin
        MatCol(1,pos,"In #Stock#",0,InStock,true,0);
        pos = pos + 62;
        if (HasSerialNumbers) then begin
          MatCol(1,pos,"Serial No.",0,SerialNr,false,SerialNrSClass);
          pos = pos + 120;
        end;
        MatCol(1,pos,"Description",0,Spec,false,0);
      end else begin
        if (HasSerialNumbers) then begin
          MatCol(1,pos,"Serial No.",0,SerialNr,false,SerialNrSClass);
          pos = pos + 120;
        end;
        MatCol(1,pos,"Description",0,Spec,false,0);
      end;
      if (HasMultiLocations) then begin
        MatCol(1,-160,"Location",0,Location,false,LocationSClass);
      end;
    end;
    if (IsEnterprise) then begin
      Flip(flipnr); flipnr = flipnr + 1;
//      MatCol(1,-160,"Location",0,Location,false,LocationSClass);
      if (HasModWHM) then begin
        MatCol(1,-100,"Position",0,Position,false,PosSClass);
      end;
      MatCol(1,-40,"Coeff.",0,Coefficient,false,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-125,"Base Price",0,BasePrice,true,0);
      MatCol(1,-40,"Coeff.",0,Coefficient,false,0);
      Flip(flipnr); flipnr = flipnr + 1;
      MatCol(1,-140,"Width",0,UnitXval,true,0);
      MatCol(1,-95,"Height",0,UnitYval,true,0);
      MatCol(1,-50,"Depth",0,UnitZval,true,0);
    end;
    DeleteRowTest;
    EndMatrix;
    vs = 20; v=vm;

    if (flipnr>2) then begin
      for (f=1;f<flipnr;f=f+1) begin
        VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
        v = v + vs;
      end;
    end;
    if (GUIType==kGuiiPhone) then begin
      Tile(2,230,false,"",Comment);
    end;
    if (IsEnterprise==false) then begin
      CheckBox(20,-30,0,"OK",OKFlag);
    end;
    if (IsEnterprise) then begin
      SpecialMenu("Fill in Current Cost",' ',1,"StockTakeFillFIFODsm");
      SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  //  SpecialMenu("Import Data from Digitag",'f',1,"StockTakeDigitagDsm");
    end;
  end;
  EndWindow;
end;

//RP
window QTLClass:4
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer,iPad")
begin
  real pos;
  Integer rn;

  WindowBegin("Quotations",QTLClass,CGmlist,-);
  SpawnClass(QTDClass);
  SetWRect(20,80,1020,348);
  Sizeable(-1,-1,0,0);
  UseView(QTVc);
  FormName(PrintQTL);
  RecordList(4,17,-21,-39);
  RlColKey(4,2,"N_o.",SerNr,false,SerNr);
  //RP
  // RLColKey(85,85,"Loyalty Card No.",LoyaltyCardNr,false,LoyaltyCardNr);
  RlColKey(175,175,"Date",QTDate,false,QTDate);
  RlColKey(255,255,"Decision Date",RejectDate,false,RejectDate);
  pos = 385;
  if (HasModSO) then begin
    RlColKey(pos,pos,"Order No.",OrderNr,false,OrderNr);
    pos = pos + 80;
  end;
  RlColKey(pos,pos,"Class",QuoteClass,false,QuoteClass);
  pos = 515;
  if (HasSalesman or HasSalesmanBonus) then begin
    RlColKey(pos,pos,"#Salesman#",SalesMan,false,SalesMan);
    pos = pos + 70;
  end;
  if (HasModTS) then begin
    RlColKey(pos,pos,"Project",PRCode,false,PRCode);
    pos = pos + 70;
  end;
  RlColKey(pos,pos,"Customer",CustCode,false,CustCode);
  pos = pos + 60;
  RlColKey(pos,pos,"Name",Addr0,false,Name);
  if (AcceptanceStatusColumnTest("QTVc")) then begin
    CalculatedColumn(-280,-280,"Appr.","QTLClassAcceptanceStatus",false);
  end;
  CalculatedColumn(-240,-240,"Sum","QTLClassSumExclVAT",true);
  RlCol(-170,-170,"Total",Sum4,true);
  if (GuiType!=kGuiCocoa) then begin
    RlColKeyTL(-100,-100,"Probability %",M4Val,Probability,true,SerNr);
  end else begin
    LevelColumn(-100,-100,"Probability %",Probability,8,35,60);
  end;
  SearchField("Search");
  if (HasLimitedAccess) then begin
    BrowseSubsetButton(-40,-15);
  end;
  if (GuiType==kGuiMetro) then begin
    RowMenuBegin("");
    if (HasModSO) then begin
      RowMenuItem(0,"Create Order",'G','G',4312,"ORFromQTLsm");
    end;
    if (HasModSL) then begin
      RowMenuItem(0,"Create Invoice",'F','F',4300,"IVFromQTLsm");
    end;
    EndRowMenu;
  end else begin
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (GuiType!=kGuiAndroid) then begin
      if (HasModSO) then begin
        SpecialMenu("Order",'G',0,"ORFromQTLsm");
      end;
      if (HasModSL) then begin
        SpecialMenu("Invoice",'F',1,"IVFromQTLsm");
      end;
    end;
  end;
  EndWindow;
end;

//RP - Time maintenances has pixel issues
window TimedMaintLClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  WindowBegin("Timed Maintenances",TimedMaintLClass,CGmlist,-);
  SpawnClass(TimedMaintDClass);
  SetWRect(64,80,509,298);
  Sizeable(-1,-1,0,0);
  UseView(TimedMaintVc);
  RecordList(4,17,-21,-39);
  RlColKey(4,4,"Ser No.",SerNr,false,MainKey);
  RlCol(70,70,"Comment",Comment,false);
  RlCol(-100,-100,"OK",OKFlag,false);
  RlCol(-30,-30,"Done",DoneFlag,false);
  SearchField("Search");
  EndWindow;
end;

window DelTransVClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify Delete Old Transactions",DelTransVClass,CGMnt,RcType);
  SetWRect(20,80,450,380);
  vs = 16;
  EditFieldTL(h=120,v=6, 150,"No.",M4UStr,Normal,30,f1,false,0);
  PeriodField(h,v+=20,"Period");
  h = 30; v =v+ 12; vm = v + vs;
  if (HasModCRM or HasStandardCRM) then begin
    CheckBox(h,v+=vs,0,"Activities",flags[12]);
  end;
  if (HasModAT2) then begin
    CheckBox(h,v+=vs,0,"Asset Disposals",flags[21]);
  end;
  if (HasModCL) then begin
    CheckBox(h,v+=vs,0,"Cash In",flags[22]);
    CheckBox(h,v+=vs,0,"Cash Out",flags[23]);
  end;
  if (HasModCheck) then begin
    CheckBox(h,v+=vs,0,"#Cheques#",flags[24]);
    CheckBox(h,v+=vs,0,"Own #Cheques#",flags[25]);
  end;
  if (HasModIN) then begin
    CheckBox(h,v+=vs,0,"Deliveries",flags[7]);
  end;
  if (HasModExp) then begin
    CheckBox(h,v+=vs,0,"Expenses",flags[14]);
  end;
  if (HasModIN) then begin
    CheckBox(h,v+=vs,0,"Goods Receipts",flags[6]);
  end;
  if (StandardHansa==false) then begin
    CheckBox(h,v+=vs,0,"Internal Invoices",flags[26]);
  end;
  if (HasModSL) then begin
    CheckBox(h,v+=vs,0,"Invoices",flags[0]);
  end;
  if (HasModSO) then begin
    CheckBox(h,v+=vs,0,"Orders",flags[5]);
  end;
  if (HasModPL) then begin
    CheckBox(h,v+=vs,0,"Payments",flags[3]);
  end;
  if (HasModExp) then begin
    CheckBox(h,v+=vs,0,"Personnel Payments",flags[13]);
  end;
  if (HasModPOS) then begin
    CheckBox(h,v+=vs,0,"POS Balances",GroupsOnly);
  end;
  if (HasModProd) then begin
    CheckBox(h,v+=vs,0,"Production Orders",Notation);
  end;
  h = 230; v = 35;
  if (HasModPOS) then begin
    CheckBox(h,v+=vs,0,"POS Invoices",flags[16]);
  end;
  if (HasModProd) then begin
    CheckBox(h,v+=vs,0,"Productions",flags[18]);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=vs,0,"Production Operations",flags[27]);
    end;
  end;
  if (HasModTS) then begin
    CheckBox(h,v+=vs,0,"Project Transactions",flags[17]);
  end;
  if (HasModPL) then begin
    CheckBox(h,v+=vs,0,"#Purchase Invoices#",flags[2]);
  end;
  if (HasModPO) then begin
    CheckBox(h,v+=vs,0,"#Purchase Orders#",flags[10]);
  end;
  if (HasModSL) then begin
    CheckBox(h,v+=vs,0,"Receipts",flags[1]);
  end;
  if (HasModIN) then begin
    CheckBox(h,v+=vs,0,"Returned Goods",flags[20]);
    CheckBox(h,v+=vs,0,"Returned Goods To #Supplier#",flags[19]);
  end;
  //RP - Simulations not needed
  // if (HasModNL) then begin
  //   CheckBox(h,v+=vs,0,"Simulations",flags[11]);
  // end;
  CheckBox(h,v+=vs,0,"Item Pics",flags[11]);
  if (HasModIN) then begin
    CheckBox(h,v+=vs,0,"#Stock Depreciations#",flags[9]);
    CheckBox(h,v+=vs,0,"#Stock# Movements",flags[8]);
    CheckBox(h,v+=vs,0,"#Stock# Revaluations",flags[29]);
  end;
//  CheckBox(h,v+=vs,0,"#Stock# Transfers",flags[1]);
  if (HasModNL) then begin
    CheckBox(h,v+=vs,0,"Transactions",flags[4]);
  end;
  //RP - Worksheets not needed
  // if (HasModSVO) then begin
    // CheckBox(h,v+=vs,0,"Work Sheets",flags[15]);
  // end;
  CheckBox(h,v+=vs,0,"Quotations",flags[15]);
  if (HasModIN) then begin
    CheckBox(h,v+=vs,0,"Stocktaking",TSep);
  end;
  EndWindow;
end;

window IVCJRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,vm,vs;
  WindowBegin("Specify POS Invoice Journal",IVCJRClass,CGRcW,RcType);
  SetWRect(20,80,470,370);
  vs = 20;
  EditFieldTL(h=150,v=6, 150,"Invoice No.",   M4Str,Normal,30,f1,false,0);
  PeriodField(h,v+=vs,"Period");
  EditFieldTL(h,v+=vs ,150,"Customer",M4UStr,Normal,50,f2,false,CUSClass);
  if (HasCategories) then begin
    EditFieldTL(h,v+=vs ,70,"Customer Category",M4UStr,Normal,5,f3,false,CCatSClass);
  end;
  if (HasContactClassification) then begin
    EditFieldTL(h,v+=vs,150,"Customer Class.",M4UStr,Normal,30,f5,false,CClassSClass);
  end;
  if (HasSalesman or HasSalesmanBonus) then begin
    EditFieldTL(h,v+=vs ,100,"#Salesman#",M4UStr,Normal,10,AccStr,false,UserSClass);
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs,250,"Tag/Object",M4UStr,Normal,60,ObjStr,false,ObjSClass);
    EditFieldTL(h,v+=vs,50,"Tag/Object Type",M4UStr,Normal,5,ObjType,false,OTSClass);
  end;
  if (HasMultiLocations) then begin
    EditFieldTL(h,v+=vs,100,"Locations",M4UStr,Normal,60,LastAcc,false,LocationSClass);
  end;
  EditFieldTL(h,v+=vs,50,"Payment Mode",M4UStr,Normal,5,TransStr,false,PMSClass);
  if (HasLocalMachines) then begin
    EditFieldTL(h,v+=vs,50,"Local Machine Code",M4Str,Normal,5,FirstAcc,false,0);
    EditFieldTL(h,v+=vs,50,"Drawer",M4UStr,Normal,11,f4,false,DrawerSClass);
  end;
  ButtonFrame(h,vm=(v+=41),123,2,"Function");
  RadioButton(h,v,0,0,"Overview",ArtMode);
  RadioButton(h,v+=16,1,0,"Detailed",ArtMode);
  ButtonFrame(h+=148,v=vm,123,2,"Status");
  //RP - Options for Oked and Not Oked
  CheckBox(h,v,0,"Not OKed",flags[2]);
  CheckBox(h,v+=16,0,"O_Ked",flags[3]);
  CheckBox(30,v+=32,0,"Show values per #VAT# (only in detailed mode)",flags[1]);
  EndWindow;
end;

window NPTSIVCashDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  date td;
  integer acnt,wn;
  longint bm,lt,rt,tp,page;
  real h,h2,h3,h4,v,fntszfct,fntsz1,fntsz2;
  record IVCashVc IVCashr;
  record LocalMachineBlock LMb;
  record POSButtonsVc POSBr;
  string 255 bc1,bc2,compname,lmc,nr,sessdesc,sm;
  time tt;
  Boolean sessionopenedf;

  BlockLoad(LMb);
  WindowBegin("POS Invoice",NPTSIVCashDClass,CGview,-);
  wn = CurWindow;
  GetScreenSize(wn,tp,lt,bm,rt);
  switch (GuiType) begin
    case kGuiCocoa:
      bm = bm - 80;
    case kGuiWindowsDesktop:
      tp = tp + 30;
      bm = bm - 40;
      rt = rt - 55;
      lt = lt - 45;
    case kGuiGDI:
      tp = tp + 30;
      bm = bm - 40;
      rt = rt - 55;
      lt = lt - 45;
    case kGuiWPF:
      tp = tp + 30;
      bm = bm - 40;
      rt = rt - 55;
      lt = lt - 45;
  end;

  page = StringToInt(GetWindowString(wn,"touchscreenwindowpage"));
  if (page<1) then begin
    page = 1;
  end;
  //stopalert("about to call ReadPOSButtons, page:" & page);
  wn = CurWindow;
  if (wn>0) then begin
    switch (GetWindowClass(wn)) begin
      case "NPTSIVCashDClass":
        GetWindowRecord(wn,IVCashr);
    end;
  end;
  td = IVCashr.TransDate;
  if (blankdate(td)) then begin td = CurrentDate; end;
  tt = IVCashr.TransTime;
  if (blanktime(tt)) then begin tt = CurrentTime; end;
  lmc = IVCashr.LocalMachineCode;
  if (blank(lmc)) then begin lmc = LMb.LocalMachineCode; end;
  sm = IVCashr.SalesMan;
  if (blank(sm)) then begin sm = CurrentUser; end;
  //RP
  IVCashr.LocalMachineCode = CurMachineName;
  IVCashr.DrawerCode = CurDrawerCode(IVCashr.LocalMachineCode);
  //RP end
  if (blank(IVCashr.DrawerCode)) then begin IVCashr.DrawerCode = CurDrawerCode(IVCashr.LocalMachineCode); end;
  ReadNPTSWindowData("NPTSIVCashDClass",LMb.POSButtonGroup,page,IVCashr.LocalMachineCode,IVCashr.DrawerCode,CurrentDate,CurrentTime,sessionopenedf,bc1,bc2,compname,POSBr);
//  ReadPOSButtons("NPTSIVCashDClass",LMb.POSButtonGroup,page,bc1,bc2,compname,POSBr);
  SetWRect(lt,tp,rt,bm); //    SetWRect(0,100,860,760);
//    AbsoluteWindowSize;
  if (TestEnablerFile("EnNoFullscreenWindow")==false) then begin
    FullscreenWindow;
  end;
  BrowseButtons(false);
  Sizeable(-1,-1,0,0);
  BrowseButtons(false);
  DynamicWindow;
  UseView(IVCashVc);
  ActiveFieldOnNew("ivcashcommand");
  if (GuiType==kGuiWindowsDesktop or GuiType==kGuiWPF) then begin
    if (UserRegisterAccess("POSButtonsVc") and CompanyProgramMode!=kProgramModeLiveSync) then begin
      if (GetWindowString(CurWindow,"NPTSIVCashEditMode")=="false" or blank(GetWindowString(CurWindow,"NPTSIVCashEditMode"))) then begin
        ColourPushButton(400,10,400+120,40,"NPTSIVCashEditModeDsm","Edit Buttons",kButtonColourGreen);
      end else begin
        ColourPushButton(400,10,400+120,40,"NPTSIVCashEditModeDsm","Exit Edit Mode",kButtonColourGreen);
      end;
    end;
  end else begin
    //ToolBar;
    if (UserRegisterAccess("POSButtonsVc") and CompanyProgramMode!=kProgramModeLiveSync) then begin
      if (GetWindowString(CurWindow,"NPTSIVCashEditMode")=="false" or blank(GetWindowString(CurWindow,"NPTSIVCashEditMode"))) then begin
        ColourPushButton(300,150,400,70,"NPTSIVCashEditModeDsm","Edit Buttons",kButtonColourGreen);
        //ColourPushButton(400,150,500,70,"NPTSIVCashPhoneDsm","📞",kButtonColourGreen);
      end else begin
        ColourPushButton(300,150,400,70,"NPTSIVCashEditModeDsm","Exit Edit Mode",kButtonColourGreen);
      end;
    end;
    //EndToolBar;
  end;

  v = 20;
  h = -300; h2 = -150; h3 = -70; h4 = -10;

  nr = "Invoice: ";
  if (IVCashr.SerNr>0) then begin
    nr = nr & IVCashr.SerNr;
  end;
  if (nonblank(IVCashr.OfficialSerNr)) then begin
    if (HasOfficialSerNr) or (HasFiscalPrinter and HasLocalization("SVN")) then begin
      nr = "Official No: " & IVCashr.OfficialSerNr;
    end;
  end;

  if (IsEnterprise or BuildProductCode=="PAYYAPERP") then begin
/*  
    if (IsSessionOpen(IVCashr.LocalMachineCode,IVCashr.DrawerCode,CurrentDate,CurrentTime)) then begin
      sessdesc = "POS Session opened";
    end else begin
      sessdesc = "*** POS Session closed ***";
    end;
*/    
    if (sessionopenedf) then begin
      sessdesc = "POS Session opened";
    end else begin
      sessdesc = "*** POS Session closed ***";
    end;
  end;

  // StopAlert("IsSessionOpen(" & IVCashr.LocalMachineCode & "," & IVCashr.DrawerCode & "," & IVCashr.TransDate & "," & IVCashr.TransTime & "); -> " & sessdesc);

  DisplayRecordDetails_ENG(10,26,compname,td,tt,lmc,sm,nr,IVCashr.CustCode,IVCashr.Addr0,
    IVCashr.Addr1,IVCashr.Addr2,IVCashr.Addr3,"",IVCashr.Objects,
    IVCashr.LoyaltyCardNr,LMb.ShowBaggerSupervisor,IVCashr.Bagger,IVCashr.Supervisor,
    IVCashr.DiscountCardNr,IVCashr.DiscountFwdBal,sessdesc,IsStandardProduct==false,IVCashr.OfficialSerNr,
    IVCashr.TaxAdminServSeal);

  fntszfct = 1.0;
  if (GuiType==kGuiWindowsDesktop or GuiType==kGuiWPF) then begin
    if ((rt-lt)<1200) then begin
      fntszfct = 1.0 - ((1200.0-(rt-lt))/600.0);
      if (fntszfct<0.3) then begin
        fntszfct = 0.3;
      end;
    end;
  end;
  if (bm<650) then begin
    fntsz1 = LMb.IVCashPOSDisplayFontSize1;
    if (fntsz1<=0) then begin fntsz1 = 20; end;
    fntsz2 = LMb.IVCashPOSDisplayFontSize2;
    if (fntsz2<=0) then begin fntsz2 = 30; end;

    SoftEditFieldTLX(420,6,h4,"",M4Str,ViewOnly,100,fntsz1*fntszfct,patM4black,"CustomerDisplayData_Line1",true,0);
    SoftEditFieldTLX(420,(fntsz1+16)*fntszfct,h4,"",M4Str,ViewOnly,100,fntsz2*fntszfct,patM4black,"CustomerDisplayData_Line2",true,0);
  end else begin
    fntsz1 = LMb.IVCashPOSDisplayFontSize1;
    if (fntsz1<=0) then begin fntsz1 = 30; end;
    fntsz2 = LMb.IVCashPOSDisplayFontSize2;
    if (fntsz2<=0) then begin fntsz2 = 50; end;

    SoftEditFieldTLX(520,6,h4,"",M4Str,ViewOnly,100,fntsz1*fntszfct,patM4black,"CustomerDisplayData_Line1",true,0);
    SoftEditFieldTLX(520,(fntsz1+16)*fntszfct,h4,"",M4Str,ViewOnly,100,fntsz2*fntszfct,patM4black,"CustomerDisplayData_Line2",true,0);
  end;

  switch (LMb.POSButtonsPosition) begin
    case kPOSButtonsPositionLeft:
      SoftEditField(110,-22,200,"Item/Command"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
    case kPOSButtonsPositionRight:
      SoftEditField(-260,-22,200,"Item/Command"  ,Normal ,"ivcashcommand",false,0,M4Str,255);
  end;
  SoftEditField(2000,-22,200,""  ,Normal ,"ivcashcommandlastitemsernrf",false,0,M4Str,255);

  /*
    if (WindowState(wn)==Rs_Insert) then begin
      StaticText(h2,v,CurrentDate,false);
      StaticText(h3,v,Left(CurrentTime,5),false);
      StaticText(h,v+=20,"Invoice: ",false);
      StaticText(h2,v,"Till: " & LMb.LocalMachineCode,false);
      StaticText(h3,v,CurrentUser,false);
    end else begin
      StaticText(h2,v,IVCashr.TransDate,false);
      StaticText(h3,v,Left(IVCashr.TransTime,5),false);
      StaticText(h,v+=20,"Invoice: " & IVCashr.SerNr,false);
      StaticText(h2,v,"Till: " & IVCashr.LocalMachineCode,false);
      StaticText(h3,v,IVCashr.SalesMan,false);
    end;
  */
  DrawPOSInterface2_ENG(bc1,bc2,POSBr,"",110,bm);
  //BottomBar;
  EndWindow;
end;
